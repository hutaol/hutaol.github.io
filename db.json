{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/assets/svg/bg.png","path":"assets/svg/bg.png","modified":1,"renderable":0},{"_id":"source/assets/svg/bg.svg","path":"assets/svg/bg.svg","modified":1,"renderable":0},{"_id":"source/assets/img/favicon.ico","path":"assets/img/favicon.ico","modified":1,"renderable":0},{"_id":"source/assets/img/avatar.png","path":"assets/img/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/assets/.DS_Store","hash":"7bf391aee33802524690171220b1e59b582de4ff","modified":1671590787785},{"_id":"source/_posts/help.md","hash":"146d92580419fa6ac7dead6aad212d95f2e55e5d","modified":1665731333535},{"_id":"source/.DS_Store","hash":"aefa295e4cde751a17d9a5ce84db3e79b8ac4a25","modified":1687972324792},{"_id":"source/_posts/.DS_Store","hash":"e5d74e02f3c88cf0130cdebb81167e0e20503da4","modified":1629080269382},{"_id":"source/_posts/Android/Android三方库.md","hash":"cb7bd99777687be35c50131d14f306000de64d46","modified":1665990113618},{"_id":"source/_posts/Android/Android应用使用统计.md","hash":"0cd6154f14f550c8ab1b869f6fe532e1e80d98c9","modified":1687971712110},{"_id":"source/tags/index.md","hash":"ca75de1fb2b0d19d1ffc24cf5ba268f597236a32","modified":1624346059026},{"_id":"source/categories/index.md","hash":"194dadc243a9839fd2b44c7f8d17feac02c56d71","modified":1624346059026},{"_id":"source/_posts/Android/Android开发环境搭建.md","hash":"8e1d7b40c383c3a306d30bcec36ae1aad79a2961","modified":1624346059010},{"_id":"source/_posts/Android/Android问题.md","hash":"87e949224a115a0e59bb562ca975648f96368ed2","modified":1687974609147},{"_id":"source/_posts/Mac/CMake.md","hash":"0faa10b716cdf6f1551bcfc0354edf5049a3e524","modified":1687974385018},{"_id":"source/_posts/Mac/Mac命令.md","hash":"709280a7c0b1d383db008dfb009daea17924236c","modified":1629080139651},{"_id":"source/_posts/Mac/Mac工具.md","hash":"4d86b3d8a9309371db31ce79a06ebffa904f0e2c","modified":1685802231536},{"_id":"source/_posts/iOS/CocoaPods使用.md","hash":"5d28653a56638650d249e964d0877275861b0939","modified":1687972948830},{"_id":"source/_posts/iOS/OC-Keywords.md","hash":"171e04f859b19efcf86772dde21d23780f12764c","modified":1624346059012},{"_id":"source/_posts/iOS/OC-Property.md","hash":"f7696b6d4b10317af355456946f073d4aefe581c","modified":1624346059013},{"_id":"source/_posts/iOS/Xcode工具.md","hash":"0241489c9c6172fa0b3ac85a092e3c14a88ab1fa","modified":1687973642924},{"_id":"source/_posts/iOS/iOS-Runtime.md","hash":"83b13cf1eaa9ac2964f4c37a34339631e5e01d42","modified":1668149685446},{"_id":"source/_posts/iOS/iOS三方库.md","hash":"2715a13982f696c226eb4268190c6d9288193e99","modified":1687974321537},{"_id":"source/_posts/iOS/iOS三方库管理工具.md","hash":"7edd99ec09f352db5102519681b747899dc6acfd","modified":1687974525764},{"_id":"source/_posts/mysql/mysql.md","hash":"998d2a1b7b5cf1cbce742665b52a876318b0d8ab","modified":1624346059018},{"_id":"source/_posts/iOS/iOS持久化方式.md","hash":"b81426916b890a2a199dff9c4a7ca588584d75ad","modified":1624346059014},{"_id":"source/_posts/iOS/iOS定时器.md","hash":"59dd9db3c81a39d6a179f1c7f774871519fde3f4","modified":1638261996511},{"_id":"source/_posts/iOS/iOS问题.md","hash":"cc098984e5bc83edc0f22e944e87fad797c28cab","modified":1687974599812},{"_id":"source/_posts/js/Node-js创建应用.md","hash":"c27d27c180cb637f32b818d29d0b5524b8347b6b","modified":1624346059015},{"_id":"source/_posts/js/javascript.md","hash":"7e70043f4f3174af4efec08f7f2fbf15397031c6","modified":1624346059016},{"_id":"source/_posts/linux/Linux系统权限.md","hash":"7fea9f3576bcb2f86954c5b6e766afd8fbc4cace","modified":1625119538439},{"_id":"source/_posts/linux/Linux命令.md","hash":"69ec067b9c716d46769db94bc1f9f4178579aeac","modified":1625119864819},{"_id":"source/_posts/other/解决GitHub下载速度缓慢.md","hash":"ef0857e784bc41205d626cece38a78e340fe1ba6","modified":1624346059019},{"_id":"source/_posts/js/js-string-method.md","hash":"9bd1f3b3d068f9f59118fb00d2b09fc9c4a70540","modified":1624346059016},{"_id":"source/_posts/other/微信小程序反编译.md","hash":"78002950739c2219bdbfb21d095d8a58408050ce","modified":1687973713321},{"_id":"source/_posts/php/apache.md","hash":"0be9c7641f31e721055c61aa6526caa5641e9a17","modified":1624346059020},{"_id":"source/_posts/php/PHP管理工具Composer.md","hash":"f19ec119104e27b7891a9ed08523e6b47fa5a030","modified":1624346059019},{"_id":"source/_posts/python/CentOS6安装Python3环境.md","hash":"fe086e8d99b891d07fe1070537c37fb4fbacabac","modified":1624346059022},{"_id":"source/_posts/tools/Git命令.md","hash":"96b7775f9c2ed8385407dfb7195fc4e53770f3a6","modified":1628228446357},{"_id":"source/_posts/vim/Vim配置及插件安装(Mac).md","hash":"8294fc44aec72b7d249502ace18c8dac90fcc59a","modified":1624346059023},{"_id":"source/assets/svg/bg.png","hash":"8d57b9f2aca8f43997417a4b6f448dc9067665fd","modified":1671591477608},{"_id":"source/assets/svg/bg.svg","hash":"f9a54e9d4592ea9dd302a3e22a4c7c06124148f5","modified":1669348840628},{"_id":"source/_posts/php/.DS_Store","hash":"f678efb48d982617bbb7747f179914082705cdd8","modified":1624334182423},{"_id":"source/_posts/tools/Git常用命令.md","hash":"dce4e468a8f7da402199e01838715cb56553d645","modified":1685802231537},{"_id":"source/_posts/php/laraval/Laravel基础学习.md","hash":"43096446e7f9563cd00267998e6bcd05fdf4ce4f","modified":1624346059020},{"_id":"source/_posts/php/thinkphp5/初学thinkphp5.md","hash":"60b29b433156574f985dcd560ca67cd3222ea472","modified":1624346059021},{"_id":"source/assets/svg/.DS_Store","hash":"a2e0e0f6794791a2bd5a0af1c22206325bb81a71","modified":1671591489357},{"_id":"source/assets/img/favicon.ico","hash":"f0f09f40d0a02143b5024602480c1289e17b82fc","modified":1624346059025},{"_id":"source/assets/img/avatar.png","hash":"c4640041449416b0f21ca706d81c3a836748af7a","modified":1624346059025},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1629092861846},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1629092861847},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1629092861848},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1629092861846},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1629092861849},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1629092861848},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1629092861852},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1629092861853},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1629092861979},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1629092861922},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1629092861856},{"_id":"themes/next/_config.yml","hash":"4ee0781d842ac3361dcb6a2cd1b455fa90673135","modified":1629092861855},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1629092861865},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1629092861863},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1629092861858},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1629092861859},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1629092861867},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1629092861876},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1629092861868},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1629092861870},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1629092861878},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1629092861922},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1629092861923},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1629092861924},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1629092861924},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1629092861924},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1629092861925},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1629092861928},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1629092861926},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1629092861926},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1629092861927},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1629092861927},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1629092861929},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1629092861928},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1629092861930},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1629092861931},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1629092861932},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1629092861933},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1629092861930},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1629092861933},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1629092861935},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1629092861934},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1629092861935},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1629092861975},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1629092861977},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1629092861936},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1629092861976},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1629092861992},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1629092861978},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1629092861978},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1629092861979},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1629092861880},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1629092861898},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1629092861886},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1629092861890},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1629092861901},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1629092861904},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1629092861908},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1629092861907},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1629092861910},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1629092861912},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1629092861918},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1629092861920},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1629092861921},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1629092861939},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1629092861940},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1629092861944},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1629092861946},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1629092861937},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1629092861951},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1629092861937},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1629092861938},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1629092861952},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1629092861953},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1629092861954},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1629092861957},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1629092861956},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1629092861960},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1629092861965},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1629092861980},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1629092861986},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1629092861968},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1629092861968},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1629092861987},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1629092861987},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1629092861988},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1629092861988},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1629092861989},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1629092861990},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1629092861990},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1629092861991},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1629092861992},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1629092861993},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1629092861993},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1629092861994},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1629092861994},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1629092861995},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1629092861995},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1629092861996},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1629092861996},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1629092861997},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1629092861998},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1629092862036},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1629092862050},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629092862050},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1629092862050},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1629092862050},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1629092862051},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1629092862051},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1629092862051},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1629092862051},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1629092862052},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1629092862052},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1629092862052},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629092862052},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1629092862053},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629092862053},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1629092862054},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1629092862053},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1629092862054},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1629092862055},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1629092862053},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1629092862056},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1629092862054},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1629092861942},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1629092861942},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1629092861943},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1629092861943},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1629092861945},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1629092861944},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1629092861945},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1629092861941},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1629092861941},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1629092861947},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1629092861947},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1629092861947},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1629092861948},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1629092861948},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1629092861951},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1629092861949},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1629092861950},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1629092861950},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1629092861954},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1629092861955},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1629092861955},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1629092861956},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1629092861956},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1629092861958},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1629092861958},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1629092861959},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1629092861959},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1629092861960},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1629092861961},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1629092861962},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1629092861962},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1629092861963},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1629092861963},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1629092861964},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1629092861964},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1629092861965},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1629092861966},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1629092861967},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1629092861969},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1629092861970},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1629092861970},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1629092861971},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1629092861972},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1629092861972},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1629092861973},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1629092861974},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1629092861974},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1629092861981},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1629092861975},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1629092861981},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1629092861981},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1629092861982},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1629092861983},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1629092861983},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1629092861984},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1629092861984},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1629092861985},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1629092861986},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1629092861986},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1629092862047},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1629092862048},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1629092862049},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1629092862047},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1629092862048},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1629092862055},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1629092862055},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1629092862059},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1629092862060},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1629092861999},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1629092862000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1629092861998},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1629092862020},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1629092862025},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1629092862026},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1629092862026},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1629092862029},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1629092862030},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1629092862030},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1629092862031},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1629092862019},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1629092862010},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1629092862036},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1629092862037},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1629092862038},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1629092862039},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1629092862039},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1629092862040},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1629092862041},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1629092862041},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1629092862042},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1629092862042},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1629092862038},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1629092862043},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1629092862043},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1629092862044},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1629092862044},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1629092862045},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1629092862045},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1629092862046},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1629092862057},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1629092862046},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1629092862058},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1629092862000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1629092862001},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1629092862002},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1629092862002},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1629092862002},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1629092862003},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1629092862004},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1629092862004},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1629092862004},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1629092862005},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1629092862005},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1629092862006},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1629092862006},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1629092862007},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1629092862007},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1629092862008},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1629092862008},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1629092862009},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1629092862010},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1629092862014},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1629092862014},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1629092862013},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1629092862013},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1629092862015},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1629092862017},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1629092862018},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1629092862016},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1629092862016},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1629092862018},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1629092862018},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1629092862019},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1629092862020},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1629092862021},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1629092862022},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1629092862021},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1629092862023},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1629092862023},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1629092862024},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1629092862024},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1629092862024},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1629092862025},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1629092862028},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1629092862028},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1629092862029},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1629092862032},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1629092862032},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1629092862033},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1629092862033},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1629092862034},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1629092862035},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1629092862027},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1629092862034},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1629092862058},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1629092862058},{"_id":"public/categories/index.html","hash":"f945ab777176cc8b0c3988dce536f02ec6d1863d","modified":1687974847133},{"_id":"public/tags/index.html","hash":"a5be82b8ff6b37110bfd603731245975ac867e55","modified":1687974847133},{"_id":"public/2023/06/29/other/微信小程序反编译/index.html","hash":"42db9c3e5bc771817650a1420df13b7da27541eb","modified":1687974847133},{"_id":"public/2022/12/09/Mac/CMake/index.html","hash":"d66af8611a95a2d4b3e97788116ee58af9474444","modified":1687974847133},{"_id":"public/2022/11/08/iOS/iOS-Runtime/index.html","hash":"303cb9ef2df744c77a5460426908a61325370cc3","modified":1687974847133},{"_id":"public/2022/10/17/Android/Android问题/index.html","hash":"1c223f04fb1db5698071386686c6f8714146c00d","modified":1687974847133},{"_id":"public/2022/10/14/Android/Android三方库/index.html","hash":"c0ec31697ef5386058bee6758adfeb620bda6efa","modified":1687974847133},{"_id":"public/2022/10/14/help/index.html","hash":"81b6c5091a9ac6a84a9c3c8ec36c862e80a5d3ea","modified":1687974847133},{"_id":"public/2021/11/30/iOS/iOS定时器/index.html","hash":"aca8e53edb8b414cc83c9b091a4f36b6d7fe377d","modified":1687974847133},{"_id":"public/2020/03/23/php/thinkphp5/初学thinkphp5/index.html","hash":"3b3f63e905e5f02e5b37ded691d6a9276f5545be","modified":1687974847133},{"_id":"public/2019/07/02/php/apache/index.html","hash":"bb3230a3226042aa1f24b0255a7600f988c63afc","modified":1687974847133},{"_id":"public/2019/07/02/other/解决GitHub下载速度缓慢/index.html","hash":"d2f5de673a832256d9809813817b55ea6b452d30","modified":1687974847133},{"_id":"public/2019/06/19/php/PHP管理工具Composer/index.html","hash":"931c8d26da4a025a4547be70437533b05d73a23c","modified":1687974847133},{"_id":"public/2019/03/25/js/Node-js创建应用/index.html","hash":"e1a47e04803cf547ab366071d94d22f2c8a3a08f","modified":1687974847133},{"_id":"public/2018/12/16/iOS/Xcode工具/index.html","hash":"27905d8037e72c463fa735b31d9a9229b1b99e44","modified":1687974847133},{"_id":"public/2018/12/15/mysql/mysql/index.html","hash":"770404dbbac3a652eb8de2f933bc9292d6bbdd09","modified":1687974847133},{"_id":"public/2018/12/15/linux/Linux系统权限/index.html","hash":"c30e5ca83c9cf4b786816bac21d9dc57761023c7","modified":1687974847133},{"_id":"public/archives/index.html","hash":"1253499e03d8b1dde492d6b70e7e279bb6589ee4","modified":1687974847133},{"_id":"public/archives/page/2/index.html","hash":"e55e84cdb9c0ae1f81390acd9fa86328a2d79ecf","modified":1687974847133},{"_id":"public/archives/page/3/index.html","hash":"e47f28f0fc146f787249a01e792d8ceecbd0a746","modified":1687974847133},{"_id":"public/archives/page/4/index.html","hash":"a7470b58aed5fca36d7c8e4ebfea56bfea329873","modified":1687974847133},{"_id":"public/archives/2018/index.html","hash":"a5a6c2ed148f545046169e5b3e05d1ad0d010b38","modified":1687974847133},{"_id":"public/archives/2018/11/index.html","hash":"af6dbde60056a0878926a712e11872613440255f","modified":1687974847133},{"_id":"public/archives/2018/12/index.html","hash":"7d8e9e1240db8d913c837740d048e173fe215c54","modified":1687974847133},{"_id":"public/archives/2019/index.html","hash":"3cb9297c418be5945e3ca9f84c152040f4e3cefc","modified":1687974847133},{"_id":"public/archives/2019/01/index.html","hash":"7db5a049e85ff82284a8087c88b8be54e509dba3","modified":1687974847133},{"_id":"public/archives/2019/03/index.html","hash":"4546e8862d3809ea10a54b078553c82c39cf04fa","modified":1687974847133},{"_id":"public/archives/2019/05/index.html","hash":"fca631572781bba401f81760dba7ac309df142c9","modified":1687974847133},{"_id":"public/archives/2019/06/index.html","hash":"abb133c8500376143cb713856cb7c4f493ba918c","modified":1687974847133},{"_id":"public/archives/2019/07/index.html","hash":"b5ce2b0eb79705ac2d97fb932265dcab843bf528","modified":1687974847133},{"_id":"public/archives/2019/08/index.html","hash":"9054f4680488ba34b45ab54db8c6fe4553d22404","modified":1687974847133},{"_id":"public/archives/2019/10/index.html","hash":"1b2d40e977cee41af51c831eeb2a50a849eb2533","modified":1687974847133},{"_id":"public/archives/2020/index.html","hash":"872290e38ab4edd81cd50d3a263c4394cb3715f8","modified":1687974847133},{"_id":"public/archives/2020/03/index.html","hash":"71348961da665425b10b11431e7c497d9739bf57","modified":1687974847133},{"_id":"public/archives/2020/05/index.html","hash":"0082f53cd0fd48356488e65cfadd8fa65e8758c8","modified":1687974847133},{"_id":"public/archives/2021/index.html","hash":"0a2553110bb86f47d2820bb7f5eb6ae29c2f21f9","modified":1687974847133},{"_id":"public/archives/2021/08/index.html","hash":"c281c204c9573a7bd46c3b654209c77d11879079","modified":1687974847133},{"_id":"public/archives/2021/11/index.html","hash":"c2aeff7e0e1e5baa302cf87ac26121f6c697e306","modified":1687974847133},{"_id":"public/archives/2022/index.html","hash":"a15043723599d59c88b0cd6a31fd7db83da54c2a","modified":1687974847133},{"_id":"public/archives/2022/10/index.html","hash":"c082a17225ad9a4b12fc4505f2d37dd4e17b5f33","modified":1687974847133},{"_id":"public/archives/2022/11/index.html","hash":"a4f7681fec041bb4a1600680cfbacbcdf46982cd","modified":1687974847133},{"_id":"public/archives/2022/12/index.html","hash":"743b714814f014c4ba6c112d7f04b861377bb7d9","modified":1687974847133},{"_id":"public/archives/2023/index.html","hash":"372656cf97f9e587dd8ec71466132fc0fcde88cb","modified":1687974847133},{"_id":"public/archives/2023/03/index.html","hash":"2354afffbb43c05cef0fe56bef5b55e77340f8bb","modified":1687974847133},{"_id":"public/archives/2023/06/index.html","hash":"81c33f97103bfa678b31af5d714c82406d12182f","modified":1687974847133},{"_id":"public/categories/Android/index.html","hash":"87262ac4242942e30053459bfadc08bca87dcece","modified":1687974847133},{"_id":"public/categories/Mac/index.html","hash":"da48d5441dca465b41fb7ff1bcccd93e4dc44235","modified":1687974847133},{"_id":"public/categories/Objective-C/index.html","hash":"b531d4cd04b3d9a163684d1fbd0f9c5b524c1daa","modified":1687974847133},{"_id":"public/categories/Xcode/index.html","hash":"82082de2f098fa29e136e926dd97ef7fad75e53d","modified":1687974847133},{"_id":"public/categories/iOS/index.html","hash":"15cce1b10767312670b49763c8b57f3be4a9e417","modified":1687974847133},{"_id":"public/categories/MySql/index.html","hash":"8a6e68305f3dbf309c98305281a83380db705b43","modified":1687974847133},{"_id":"public/categories/Linux/index.html","hash":"8938bb75e15dc1dd2c92d8dbdffa2fdb31f5b71a","modified":1687974847133},{"_id":"public/categories/JS/index.html","hash":"4e40097094b03bd6de5ca083acfdd73e4db3a5b5","modified":1687974847133},{"_id":"public/categories/JavaScript/index.html","hash":"ad7e580c50431ef88ce5189d986936a04362937b","modified":1687974847133},{"_id":"public/categories/GitHub/index.html","hash":"cce9afda57b53f7fb49e9625fbe87f8d607c735b","modified":1687974847133},{"_id":"public/categories/PHP/index.html","hash":"aa2c4874226ffe1af69d3a2c0f2d1c3cb0e0356e","modified":1687974847133},{"_id":"public/categories/Git/index.html","hash":"3ebd87d52875e51fc78379eb9fa87a991a7f7309","modified":1687974847133},{"_id":"public/categories/Python/index.html","hash":"8b8aa775c95b96e68809eec6697595a6e17f1c41","modified":1687974847133},{"_id":"public/categories/Vim/index.html","hash":"21991967251c60b4addf31158c6b96877d58fd3e","modified":1687974847133},{"_id":"public/tags/Android/index.html","hash":"5e2a6cf36adc6a7622a59094089f7ea831ae7435","modified":1687974847133},{"_id":"public/tags/Mac/index.html","hash":"5d9bd7727f6e51b44cb8643362e75a1eca8f2878","modified":1687974847133},{"_id":"public/tags/iOS/index.html","hash":"30a460f9856c8ed82c9f293fb18045333aeef50a","modified":1687974847133},{"_id":"public/tags/OC/index.html","hash":"9913ad10bc2e0c23ae820e32616059218c71b02e","modified":1687974847133},{"_id":"public/tags/Linux/index.html","hash":"059d1b54d6ca0b38a1ce348f01c51bbee93dbbd6","modified":1687974847133},{"_id":"public/tags/JS/index.html","hash":"7c652bc348fcc94f71a3b7cea52724e2d479d290","modified":1687974847133},{"_id":"public/tags/Node/index.html","hash":"b3162608165328952f495f6fa8940b6d990d97aa","modified":1687974847133},{"_id":"public/tags/GitHub/index.html","hash":"cb6bdb8efb7636392314c12251e292558fb5cf0e","modified":1687974847133},{"_id":"public/tags/PHP/index.html","hash":"b77fe6eaca6a5b7cf5f08d73b59a8baacb47c30a","modified":1687974847133},{"_id":"public/tags/Composer/index.html","hash":"9666e5ee455ad80b260b3d348045308228b51154","modified":1687974847133},{"_id":"public/tags/Apache/index.html","hash":"6ec1deac21b7b722d58c1de9e69e9fe01b07ea52","modified":1687974847133},{"_id":"public/tags/Git/index.html","hash":"983199c0b65de50096159aa5d44cdf8556324668","modified":1687974847133},{"_id":"public/tags/Python-CentOS6/index.html","hash":"efbd706a2495b3034345806d32d6e0e8e90c09ba","modified":1687974847133},{"_id":"public/tags/Vim/index.html","hash":"2920ca7c7cc70f3e553ea445efcb9f991b7bf82e","modified":1687974847133},{"_id":"public/tags/Laravel/index.html","hash":"e5d1d19e1ad8eaa3894acd6c6189ad755299dce0","modified":1687974847133},{"_id":"public/tags/ThinkPHP/index.html","hash":"af084c4a336a01479ced3a23e2f15a457a74b6d6","modified":1687974847133},{"_id":"public/2023/06/29/iOS/CocoaPods使用/index.html","hash":"f30e82a5398fbf8406e7e5b26a3481d0bd53b960","modified":1687974847133},{"_id":"public/2023/06/29/Android/Android应用使用统计/index.html","hash":"a6b9c6d0dd2c215eea5e1013e293415a605dff47","modified":1687974847133},{"_id":"public/2023/03/03/Mac/Mac工具/index.html","hash":"8158d0bd934ad475ccd3f1936b06db9874bdb1de","modified":1687974847133},{"_id":"public/2022/12/22/iOS/iOS三方库管理工具/index.html","hash":"6a1cf3cbcf71d19bc6eaf4427f95451f0f373b01","modified":1687974847133},{"_id":"public/2022/10/17/iOS/iOS问题/index.html","hash":"6ef58b98146689135284b51445a4dfb33f7fa189","modified":1687974847133},{"_id":"public/2022/10/14/iOS/iOS三方库/index.html","hash":"18a173d0aad93302ea0cd1310878942d5b90e84e","modified":1687974847133},{"_id":"public/2021/08/06/tools/Git命令/index.html","hash":"426cfc75a445b2564bd10d4bb0f5332a019e241e","modified":1687974847133},{"_id":"public/2020/05/23/vim/Vim配置及插件安装(Mac)/index.html","hash":"5390052496c574e2fba83b1d24a7f3f1af46b0fa","modified":1687974847133},{"_id":"public/2020/03/09/php/laraval/Laravel基础学习/index.html","hash":"98012acec562aebf32a9737324fcc17170a1b9b3","modified":1687974847133},{"_id":"public/2019/10/24/Android/Android开发环境搭建/index.html","hash":"00b4689f1588f2ebe4f77510d4ef811ab2da1cf7","modified":1687974847133},{"_id":"public/2019/08/09/python/CentOS6安装Python3环境/index.html","hash":"40c885f8be37722ccc4609972cbb7214795983cb","modified":1687974847133},{"_id":"public/2019/05/23/tools/Git常用命令/index.html","hash":"dda5cabc17574fb8258e26564ba39b080f8a3dff","modified":1687974847133},{"_id":"public/2019/01/10/js/js-string-method/index.html","hash":"01562b9aac0b50cba1fde191af0191070a9f6b63","modified":1687974847133},{"_id":"public/2018/12/19/iOS/OC-Property/index.html","hash":"ab6c9ca9d43afe72680737978162b28629e3fe32","modified":1687974847133},{"_id":"public/2018/12/16/iOS/iOS持久化方式/index.html","hash":"5970c7a2834abda01dec5b4485da61097f07fd57","modified":1687974847133},{"_id":"public/2018/12/15/Mac/Mac命令/index.html","hash":"fbe209a702ba90f4c89ade3398777963810d6378","modified":1687974847133},{"_id":"public/2018/12/15/linux/Linux命令/index.html","hash":"f8b1f72be2973adf4e79ffeca3e4c6b5cc18433c","modified":1687974847133},{"_id":"public/2018/11/09/iOS/OC-Keywords/index.html","hash":"4b4f56e9808179c4dd549499afcc9d9f4e6d7ea7","modified":1687974847133},{"_id":"public/2018/11/07/js/javascript/index.html","hash":"7bcc69bf8910060ebb13052a1d54750cb4f4b8ce","modified":1687974847133},{"_id":"public/index.html","hash":"105e3fd0734f64da466e3262e267f0415cff64d9","modified":1687974847133},{"_id":"public/page/2/index.html","hash":"5cec801b48962422b8c498479d24808d8fda48af","modified":1687974847133},{"_id":"public/page/3/index.html","hash":"6ed83a18ad222981b6491a228cdcb1a695f15f63","modified":1687974847133},{"_id":"public/page/4/index.html","hash":"0c31914a6500dca53ce025660eaa4564a1c0a355","modified":1687974847133},{"_id":"public/assets/svg/bg.svg","hash":"f9a54e9d4592ea9dd302a3e22a4c7c06124148f5","modified":1687974847133},{"_id":"public/assets/img/favicon.ico","hash":"f0f09f40d0a02143b5024602480c1289e17b82fc","modified":1687974847133},{"_id":"public/assets/svg/bg.png","hash":"8d57b9f2aca8f43997417a4b6f448dc9067665fd","modified":1687974847133},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1687974847133},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1687974847133},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1687974847133},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1687974847133},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1687974847133},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1687974847133},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1687974847133},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1687974847133},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1687974847133},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1687974847133},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1687974847133},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1687974847133},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1687974847133},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1687974847133},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1687974847133},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1687974847133},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1687974847133},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1687974847133},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1687974847133},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1687974847133},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1687974847133},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1687974847133},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1687974847133},{"_id":"public/css/main.css","hash":"f65602cc9108e2492d5599d604751aba1e971aec","modified":1687974847133},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1687974847133},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1687974847133},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1687974847133},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1687974847133},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1687974847133},{"_id":"public/assets/img/avatar.png","hash":"c4640041449416b0f21ca706d81c3a836748af7a","modified":1687974847133}],"Category":[{"name":"Android","_id":"cljg0n3z70008j03610q03e7o"},{"name":"Mac","_id":"cljg0n3zc000gj0361xaa6d1j"},{"name":"Objective-C","_id":"cljg0n3zg000sj036gut30uke"},{"name":"Xcode","_id":"cljg0n3zi0010j036a1uva0gk"},{"name":"iOS","_id":"cljg0n3zl001dj036efep9xe3"},{"name":"MySql","_id":"cljg0n3zn001mj0363fd49i93"},{"name":"Linux","_id":"cljg0n3zo001uj036fqbj58uv"},{"name":"JS","_id":"cljg0n3zr0025j036b8uedd6n"},{"name":"JavaScript","_id":"cljg0n3zt002cj036fby2fwt2"},{"name":"GitHub","_id":"cljg0n3zv002mj0365sileix6"},{"name":"PHP","_id":"cljg0n3zw002sj036d8vs1cq7"},{"name":"Git","_id":"cljg0n3zx002zj036diri9bz5"},{"name":"Python","_id":"cljg0n3zy0036j036415f54iz"},{"name":"Vim","_id":"cljg0n3zz003bj0361pkz6jqa"}],"Data":[],"Page":[{"title":"分类","date":"2021-06-21T08:32:36.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-06-21 16:32:36\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-06-22T07:14:19.026Z","path":"categories/index.html","layout":"page","_id":"cljg0n3yx0000j036hxqubvvk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-06-21T08:38:54.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-06-21 16:38:54\ntype: \"tags\"\n---\n","updated":"2021-06-22T07:14:19.026Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cljg0n3z20002j0366uyu7zmx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"help","date":"2022-10-14T06:14:49.000Z","_content":"\nHexo文档：<https://hexo.io/zh-cn/docs/>\n","source":"_posts/help.md","raw":"---\ntitle: help\ndate: 2022-10-14 14:14:49\ntags:\n---\n\nHexo文档：<https://hexo.io/zh-cn/docs/>\n","slug":"help","published":1,"updated":"2022-10-14T07:08:53.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3z00001j0361sshf48f","content":"<p>Hexo文档：<a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hexo文档：<a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></p>\n"},{"title":"Android三方库","date":"2022-10-14T07:46:48.000Z","_content":"\n## Android三方库\n\n选项卡\n\n[FlycoTabLayout](https://github.com/H07000223/FlycoTabLayout)\n\n图片加载\n\n[Glide](https://github.com/bumptech/glide)\n","source":"_posts/Android/Android三方库.md","raw":"---\ntitle: Android三方库\ndate: 2022-10-14 15:46:48\ntags: Android\n---\n\n## Android三方库\n\n选项卡\n\n[FlycoTabLayout](https://github.com/H07000223/FlycoTabLayout)\n\n图片加载\n\n[Glide](https://github.com/bumptech/glide)\n","slug":"Android/Android三方库","published":1,"updated":"2022-10-17T07:01:53.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3z30003j036962vcvgy","content":"<h2 id=\"Android三方库\"><a href=\"#Android三方库\" class=\"headerlink\" title=\"Android三方库\"></a>Android三方库</h2><p>选项卡</p>\n<p><a href=\"https://github.com/H07000223/FlycoTabLayout\">FlycoTabLayout</a></p>\n<p>图片加载</p>\n<p><a href=\"https://github.com/bumptech/glide\">Glide</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Android三方库\"><a href=\"#Android三方库\" class=\"headerlink\" title=\"Android三方库\"></a>Android三方库</h2><p>选项卡</p>\n<p><a href=\"https://github.com/H07000223/FlycoTabLayout\">FlycoTabLayout</a></p>\n<p>图片加载</p>\n<p><a href=\"https://github.com/bumptech/glide\">Glide</a></p>\n"},{"title":"Android应用使用统计","date":"2023-06-28T16:16:52.000Z","_content":"\n## UsageStatsManager\n\n> Android 5.0以上通过UsageStatsManager类 获取应用使用情况\n\n参考：[Android获取应用使用时长和次数-UsageStatsManager使用](https://blog.csdn.net/weixin_45951701/article/details/117486242)\n\n<!-- more -->\n\n### 1.授权声明\n\n> 在`AndroidManifest.xml`文件中声明权限`uses-permission`\n\n```java\n<uses-permission\n    android:name=\"android.permission.PACKAGE_USAGE_STATS\"\n    tools:ignore=\"ProtectedPermissions\" />\n```\n\n### 2.设置授权\n\n```java\nif (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP) {\n    try {\n        startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));\n    } catch (Exception e) {\n        Toast.makeText(MainActivity.this, \"无法开启允许查看使用情况的应用界面\", Toast.LENGTH_LONG).show();\n        e.printStackTrace();\n    }\n}\n```\n\n### 使用\n\n```java\nUsageStatsManager usm = (UsageStatsManager)getSystemService(Context.USAGE_STATS_SERVICE);\n\n// 一周\nCalendar calendar = Calendar.getInstance();\nlong endTime = calendar.getTimeInMillis();\ncalendar.add(Calendar.DAY_OF_WEEK, -1);\nlong startTime = calendar.getTimeInMillis();\n\nlong time = System.currentTimeMillis()-24*60*60*1000;\nList<UsageStats> list = usm.queryUsageStats(UsageStatsManager.INTERVAL_BEST, startTime, endTime);\n\n```\n\n参数：\n第一个参数：间隔类型\n`UsageStatsManager.INTERVAL_BEST`\n`UsageStatsManager.INTERVAL_DAILY`  按天\n`UsageStatsManager.INTERVAL_WEEKLY`  按星期\n`UsageStatsManager.INTERVAL_MONTHLY`  按月\n`UsageStatsManager.INTERVAL_YEARLY`  按年\n第二个参数：开始时间\n第三个参数：结束时间\n\n### UsageStats说明\n\n```java\nusageStats.getPackageName(); //获取包名\nusageStats.getFirstTimeStamp(); //获取第一次运行的时间\nusageStats.getLastTimeStamp(); //获取最后一次运行的时间\nusageStats.getTotalTimeInForeground(); //获取总共运行的时间\n\n// 获取应用启动次数，UsageStats未提供方法来获取，只能通过反射来拿到\ntry {\n    Field field = usageStats.getClass().getDeclaredField(\"mLaunchCount\");\n    int count = (int) field.get(usageStats)\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n> TODO: Android可以，iOS可以吗？\n","source":"_posts/Android/Android应用使用统计.md","raw":"---\ntitle: Android应用使用统计\ndate: 2023-06-29 00:16:52\ntags: Android\n---\n\n## UsageStatsManager\n\n> Android 5.0以上通过UsageStatsManager类 获取应用使用情况\n\n参考：[Android获取应用使用时长和次数-UsageStatsManager使用](https://blog.csdn.net/weixin_45951701/article/details/117486242)\n\n<!-- more -->\n\n### 1.授权声明\n\n> 在`AndroidManifest.xml`文件中声明权限`uses-permission`\n\n```java\n<uses-permission\n    android:name=\"android.permission.PACKAGE_USAGE_STATS\"\n    tools:ignore=\"ProtectedPermissions\" />\n```\n\n### 2.设置授权\n\n```java\nif (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP) {\n    try {\n        startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));\n    } catch (Exception e) {\n        Toast.makeText(MainActivity.this, \"无法开启允许查看使用情况的应用界面\", Toast.LENGTH_LONG).show();\n        e.printStackTrace();\n    }\n}\n```\n\n### 使用\n\n```java\nUsageStatsManager usm = (UsageStatsManager)getSystemService(Context.USAGE_STATS_SERVICE);\n\n// 一周\nCalendar calendar = Calendar.getInstance();\nlong endTime = calendar.getTimeInMillis();\ncalendar.add(Calendar.DAY_OF_WEEK, -1);\nlong startTime = calendar.getTimeInMillis();\n\nlong time = System.currentTimeMillis()-24*60*60*1000;\nList<UsageStats> list = usm.queryUsageStats(UsageStatsManager.INTERVAL_BEST, startTime, endTime);\n\n```\n\n参数：\n第一个参数：间隔类型\n`UsageStatsManager.INTERVAL_BEST`\n`UsageStatsManager.INTERVAL_DAILY`  按天\n`UsageStatsManager.INTERVAL_WEEKLY`  按星期\n`UsageStatsManager.INTERVAL_MONTHLY`  按月\n`UsageStatsManager.INTERVAL_YEARLY`  按年\n第二个参数：开始时间\n第三个参数：结束时间\n\n### UsageStats说明\n\n```java\nusageStats.getPackageName(); //获取包名\nusageStats.getFirstTimeStamp(); //获取第一次运行的时间\nusageStats.getLastTimeStamp(); //获取最后一次运行的时间\nusageStats.getTotalTimeInForeground(); //获取总共运行的时间\n\n// 获取应用启动次数，UsageStats未提供方法来获取，只能通过反射来拿到\ntry {\n    Field field = usageStats.getClass().getDeclaredField(\"mLaunchCount\");\n    int count = (int) field.get(usageStats)\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n> TODO: Android可以，iOS可以吗？\n","slug":"Android/Android应用使用统计","published":1,"updated":"2023-06-28T17:01:52.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3z40004j036a2o9cd8b","content":"<h2 id=\"UsageStatsManager\"><a href=\"#UsageStatsManager\" class=\"headerlink\" title=\"UsageStatsManager\"></a>UsageStatsManager</h2><blockquote>\n<p>Android 5.0以上通过UsageStatsManager类 获取应用使用情况</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/weixin_45951701/article/details/117486242\">Android获取应用使用时长和次数-UsageStatsManager使用</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-授权声明\"><a href=\"#1-授权声明\" class=\"headerlink\" title=\"1.授权声明\"></a>1.授权声明</h3><blockquote>\n<p>在<code>AndroidManifest.xml</code>文件中声明权限<code>uses-permission</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;android.permission.PACKAGE_USAGE_STATS&quot;</span></span><br><span class=\"line\">    tools:ignore=<span class=\"string\">&quot;ProtectedPermissions&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-设置授权\"><a href=\"#2-设置授权\" class=\"headerlink\" title=\"2.设置授权\"></a>2.设置授权</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        startActivity(<span class=\"keyword\">new</span> Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">&quot;无法开启允许查看使用情况的应用界面&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsageStatsManager usm = (UsageStatsManager)getSystemService(Context.USAGE_STATS_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一周</span></span><br><span class=\"line\">Calendar calendar = Calendar.getInstance();</span><br><span class=\"line\"><span class=\"keyword\">long</span> endTime = calendar.getTimeInMillis();</span><br><span class=\"line\">calendar.add(Calendar.DAY_OF_WEEK, -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">long</span> startTime = calendar.getTimeInMillis();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> time = System.currentTimeMillis()-<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>;</span><br><span class=\"line\">List&lt;UsageStats&gt; list = usm.queryUsageStats(UsageStatsManager.INTERVAL_BEST, startTime, endTime);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>参数：<br>第一个参数：间隔类型<br><code>UsageStatsManager.INTERVAL_BEST</code><br><code>UsageStatsManager.INTERVAL_DAILY</code>  按天<br><code>UsageStatsManager.INTERVAL_WEEKLY</code>  按星期<br><code>UsageStatsManager.INTERVAL_MONTHLY</code>  按月<br><code>UsageStatsManager.INTERVAL_YEARLY</code>  按年<br>第二个参数：开始时间<br>第三个参数：结束时间</p>\n<h3 id=\"UsageStats说明\"><a href=\"#UsageStats说明\" class=\"headerlink\" title=\"UsageStats说明\"></a>UsageStats说明</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usageStats.getPackageName(); <span class=\"comment\">//获取包名</span></span><br><span class=\"line\">usageStats.getFirstTimeStamp(); <span class=\"comment\">//获取第一次运行的时间</span></span><br><span class=\"line\">usageStats.getLastTimeStamp(); <span class=\"comment\">//获取最后一次运行的时间</span></span><br><span class=\"line\">usageStats.getTotalTimeInForeground(); <span class=\"comment\">//获取总共运行的时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取应用启动次数，UsageStats未提供方法来获取，只能通过反射来拿到</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Field field = usageStats.getClass().getDeclaredField(<span class=\"string\">&quot;mLaunchCount&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = (<span class=\"keyword\">int</span>) field.get(usageStats)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>TODO: Android可以，iOS可以吗？</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"UsageStatsManager\"><a href=\"#UsageStatsManager\" class=\"headerlink\" title=\"UsageStatsManager\"></a>UsageStatsManager</h2><blockquote>\n<p>Android 5.0以上通过UsageStatsManager类 获取应用使用情况</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/weixin_45951701/article/details/117486242\">Android获取应用使用时长和次数-UsageStatsManager使用</a></p>","more":"<h3 id=\"1-授权声明\"><a href=\"#1-授权声明\" class=\"headerlink\" title=\"1.授权声明\"></a>1.授权声明</h3><blockquote>\n<p>在<code>AndroidManifest.xml</code>文件中声明权限<code>uses-permission</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;android.permission.PACKAGE_USAGE_STATS&quot;</span></span><br><span class=\"line\">    tools:ignore=<span class=\"string\">&quot;ProtectedPermissions&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-设置授权\"><a href=\"#2-设置授权\" class=\"headerlink\" title=\"2.设置授权\"></a>2.设置授权</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        startActivity(<span class=\"keyword\">new</span> Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">&quot;无法开启允许查看使用情况的应用界面&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsageStatsManager usm = (UsageStatsManager)getSystemService(Context.USAGE_STATS_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一周</span></span><br><span class=\"line\">Calendar calendar = Calendar.getInstance();</span><br><span class=\"line\"><span class=\"keyword\">long</span> endTime = calendar.getTimeInMillis();</span><br><span class=\"line\">calendar.add(Calendar.DAY_OF_WEEK, -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">long</span> startTime = calendar.getTimeInMillis();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> time = System.currentTimeMillis()-<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>;</span><br><span class=\"line\">List&lt;UsageStats&gt; list = usm.queryUsageStats(UsageStatsManager.INTERVAL_BEST, startTime, endTime);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>参数：<br>第一个参数：间隔类型<br><code>UsageStatsManager.INTERVAL_BEST</code><br><code>UsageStatsManager.INTERVAL_DAILY</code>  按天<br><code>UsageStatsManager.INTERVAL_WEEKLY</code>  按星期<br><code>UsageStatsManager.INTERVAL_MONTHLY</code>  按月<br><code>UsageStatsManager.INTERVAL_YEARLY</code>  按年<br>第二个参数：开始时间<br>第三个参数：结束时间</p>\n<h3 id=\"UsageStats说明\"><a href=\"#UsageStats说明\" class=\"headerlink\" title=\"UsageStats说明\"></a>UsageStats说明</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usageStats.getPackageName(); <span class=\"comment\">//获取包名</span></span><br><span class=\"line\">usageStats.getFirstTimeStamp(); <span class=\"comment\">//获取第一次运行的时间</span></span><br><span class=\"line\">usageStats.getLastTimeStamp(); <span class=\"comment\">//获取最后一次运行的时间</span></span><br><span class=\"line\">usageStats.getTotalTimeInForeground(); <span class=\"comment\">//获取总共运行的时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取应用启动次数，UsageStats未提供方法来获取，只能通过反射来拿到</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Field field = usageStats.getClass().getDeclaredField(<span class=\"string\">&quot;mLaunchCount&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = (<span class=\"keyword\">int</span>) field.get(usageStats)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>TODO: Android可以，iOS可以吗？</p>\n</blockquote>"},{"title":"Android开发环境搭建","date":"2019-10-24T05:46:30.000Z","_content":"\n> Android（美国谷歌公司开发的移动操作系统）\n\n`Android`（安卓）是一种基于`Linux`内核（不包含`GNU`组件）的自由及开放源代码的`操作系统`。主要使用于`移动设备`，如`智能手机`和`平板电脑`，由美国`Google`公司和`开放手机联盟`领导及开发。上线时间:`2008年9月23日`\n\n<!-- more -->\n\n## Android开发环境搭建（Windows）\n\n* 四步骤完成Android开发环境的搭建\n\n> 1、下载安装JDK  \n2、配置Windows上JDK的变量环境  \n3、下载安装Android Studio  \n4、下载安装Android SDK\n\n### 一、JDK安装\n\nJDK的全称是Java SE Development Kit，也就是Java 开发工具箱。SE表示标准版。JDK是Java的核心，包含了Java的运行环境（Java Runtime Environment），一堆Java工具和给开发者开发应用程序时调用的Java类库。\n\nJDK下载地址：<https://www.oracle.com/technetwork/java/javase/downloads/index.html>\n\n### 二、JDK环境变量\n\n> 详细步骤配置参考：<https://www.runoob.com/java/java-environment-setup.html>\n\n为了配置JDK的系统环境变量，我们需要设置三个系统变量，分别是JAVA_HOME，Path和CLASSPATH。下面是这三个变量的设置范例：\n\n`JAVA_HOME`\n先设置这个系统变量名称，变量值为JDK在你电脑上的安装路径：`C:\\Program Files\\Java\\jdk1.8.0_20`。创建好后则可以利用%JAVA_HOME%作为JDK安装目录的统一引用路径。\n\n`Path`\nPATH属性已存在，可直接编辑，在原来变量后追加：`;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin`。\n\n`CLASSPATH`\n设置系统变量名为：CLASSPATH  变量值为：`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar` 。\n注意变量值字符串前面有一个\".\"表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。\n\n### 三、安装Android Studio\n\nAndroid Studio 下载地址：<https://developer.android.google.cn/studio>\n\n### 四、安装Android SDK\n\nAndroid Studio中下载Android SDK，翻墙除外\n\n参考方法：<https://blog.csdn.net/qq_23599965/article/details/80910202>\n\n方式一、设置HTTP Proxy，反正我没成功过\n\n设置 Host name 为：mirrors.neusoft.edu.cn  \n设置 Port number 为：80\n\n方式二、 更改hosts文件\n  \n得取消设置HTTP Proxy，为了方便Hosts文件下载地址：<https://github.com/googlehosts/hosts> 可直接替换掉hosts文件\n\nhosts系统文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts\n\n后面就轻松多了。。。。。。\n\n注明：Android相关下载工具地址：<https://www.androiddevtools.cn/>\n","source":"_posts/Android/Android开发环境搭建.md","raw":"---\ntitle: Android开发环境搭建\ndate: 2019-10-24 13:46:30\ntags: Android\ncategories: Android\n---\n\n> Android（美国谷歌公司开发的移动操作系统）\n\n`Android`（安卓）是一种基于`Linux`内核（不包含`GNU`组件）的自由及开放源代码的`操作系统`。主要使用于`移动设备`，如`智能手机`和`平板电脑`，由美国`Google`公司和`开放手机联盟`领导及开发。上线时间:`2008年9月23日`\n\n<!-- more -->\n\n## Android开发环境搭建（Windows）\n\n* 四步骤完成Android开发环境的搭建\n\n> 1、下载安装JDK  \n2、配置Windows上JDK的变量环境  \n3、下载安装Android Studio  \n4、下载安装Android SDK\n\n### 一、JDK安装\n\nJDK的全称是Java SE Development Kit，也就是Java 开发工具箱。SE表示标准版。JDK是Java的核心，包含了Java的运行环境（Java Runtime Environment），一堆Java工具和给开发者开发应用程序时调用的Java类库。\n\nJDK下载地址：<https://www.oracle.com/technetwork/java/javase/downloads/index.html>\n\n### 二、JDK环境变量\n\n> 详细步骤配置参考：<https://www.runoob.com/java/java-environment-setup.html>\n\n为了配置JDK的系统环境变量，我们需要设置三个系统变量，分别是JAVA_HOME，Path和CLASSPATH。下面是这三个变量的设置范例：\n\n`JAVA_HOME`\n先设置这个系统变量名称，变量值为JDK在你电脑上的安装路径：`C:\\Program Files\\Java\\jdk1.8.0_20`。创建好后则可以利用%JAVA_HOME%作为JDK安装目录的统一引用路径。\n\n`Path`\nPATH属性已存在，可直接编辑，在原来变量后追加：`;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin`。\n\n`CLASSPATH`\n设置系统变量名为：CLASSPATH  变量值为：`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar` 。\n注意变量值字符串前面有一个\".\"表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。\n\n### 三、安装Android Studio\n\nAndroid Studio 下载地址：<https://developer.android.google.cn/studio>\n\n### 四、安装Android SDK\n\nAndroid Studio中下载Android SDK，翻墙除外\n\n参考方法：<https://blog.csdn.net/qq_23599965/article/details/80910202>\n\n方式一、设置HTTP Proxy，反正我没成功过\n\n设置 Host name 为：mirrors.neusoft.edu.cn  \n设置 Port number 为：80\n\n方式二、 更改hosts文件\n  \n得取消设置HTTP Proxy，为了方便Hosts文件下载地址：<https://github.com/googlehosts/hosts> 可直接替换掉hosts文件\n\nhosts系统文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts\n\n后面就轻松多了。。。。。。\n\n注明：Android相关下载工具地址：<https://www.androiddevtools.cn/>\n","slug":"Android/Android开发环境搭建","published":1,"updated":"2021-06-22T07:14:19.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3z60006j036d6d92rvq","content":"<blockquote>\n<p>Android（美国谷歌公司开发的移动操作系统）</p>\n</blockquote>\n<p><code>Android</code>（安卓）是一种基于<code>Linux</code>内核（不包含<code>GNU</code>组件）的自由及开放源代码的<code>操作系统</code>。主要使用于<code>移动设备</code>，如<code>智能手机</code>和<code>平板电脑</code>，由美国<code>Google</code>公司和<code>开放手机联盟</code>领导及开发。上线时间:<code>2008年9月23日</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Android开发环境搭建（Windows）\"><a href=\"#Android开发环境搭建（Windows）\" class=\"headerlink\" title=\"Android开发环境搭建（Windows）\"></a>Android开发环境搭建（Windows）</h2><ul>\n<li>四步骤完成Android开发环境的搭建</li>\n</ul>\n<blockquote>\n<p>1、下载安装JDK<br>2、配置Windows上JDK的变量环境<br>3、下载安装Android Studio<br>4、下载安装Android SDK</p>\n</blockquote>\n<h3 id=\"一、JDK安装\"><a href=\"#一、JDK安装\" class=\"headerlink\" title=\"一、JDK安装\"></a>一、JDK安装</h3><p>JDK的全称是Java SE Development Kit，也就是Java 开发工具箱。SE表示标准版。JDK是Java的核心，包含了Java的运行环境（Java Runtime Environment），一堆Java工具和给开发者开发应用程序时调用的Java类库。</p>\n<p>JDK下载地址：<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>\n<h3 id=\"二、JDK环境变量\"><a href=\"#二、JDK环境变量\" class=\"headerlink\" title=\"二、JDK环境变量\"></a>二、JDK环境变量</h3><blockquote>\n<p>详细步骤配置参考：<a href=\"https://www.runoob.com/java/java-environment-setup.html\">https://www.runoob.com/java/java-environment-setup.html</a></p>\n</blockquote>\n<p>为了配置JDK的系统环境变量，我们需要设置三个系统变量，分别是JAVA_HOME，Path和CLASSPATH。下面是这三个变量的设置范例：</p>\n<p><code>JAVA_HOME</code><br>先设置这个系统变量名称，变量值为JDK在你电脑上的安装路径：<code>C:\\Program Files\\Java\\jdk1.8.0_20</code>。创建好后则可以利用%JAVA_HOME%作为JDK安装目录的统一引用路径。</p>\n<p><code>Path</code><br>PATH属性已存在，可直接编辑，在原来变量后追加：<code>;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin</code>。</p>\n<p><code>CLASSPATH</code><br>设置系统变量名为：CLASSPATH  变量值为：<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code> 。<br>注意变量值字符串前面有一个”.”表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。</p>\n<h3 id=\"三、安装Android-Studio\"><a href=\"#三、安装Android-Studio\" class=\"headerlink\" title=\"三、安装Android Studio\"></a>三、安装Android Studio</h3><p>Android Studio 下载地址：<a href=\"https://developer.android.google.cn/studio\">https://developer.android.google.cn/studio</a></p>\n<h3 id=\"四、安装Android-SDK\"><a href=\"#四、安装Android-SDK\" class=\"headerlink\" title=\"四、安装Android SDK\"></a>四、安装Android SDK</h3><p>Android Studio中下载Android SDK，翻墙除外</p>\n<p>参考方法：<a href=\"https://blog.csdn.net/qq_23599965/article/details/80910202\">https://blog.csdn.net/qq_23599965/article/details/80910202</a></p>\n<p>方式一、设置HTTP Proxy，反正我没成功过</p>\n<p>设置 Host name 为：mirrors.neusoft.edu.cn<br>设置 Port number 为：80</p>\n<p>方式二、 更改hosts文件</p>\n<p>得取消设置HTTP Proxy，为了方便Hosts文件下载地址：<a href=\"https://github.com/googlehosts/hosts\">https://github.com/googlehosts/hosts</a> 可直接替换掉hosts文件</p>\n<p>hosts系统文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts</p>\n<p>后面就轻松多了。。。。。。</p>\n<p>注明：Android相关下载工具地址：<a href=\"https://www.androiddevtools.cn/\">https://www.androiddevtools.cn/</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Android（美国谷歌公司开发的移动操作系统）</p>\n</blockquote>\n<p><code>Android</code>（安卓）是一种基于<code>Linux</code>内核（不包含<code>GNU</code>组件）的自由及开放源代码的<code>操作系统</code>。主要使用于<code>移动设备</code>，如<code>智能手机</code>和<code>平板电脑</code>，由美国<code>Google</code>公司和<code>开放手机联盟</code>领导及开发。上线时间:<code>2008年9月23日</code></p>","more":"<h2 id=\"Android开发环境搭建（Windows）\"><a href=\"#Android开发环境搭建（Windows）\" class=\"headerlink\" title=\"Android开发环境搭建（Windows）\"></a>Android开发环境搭建（Windows）</h2><ul>\n<li>四步骤完成Android开发环境的搭建</li>\n</ul>\n<blockquote>\n<p>1、下载安装JDK<br>2、配置Windows上JDK的变量环境<br>3、下载安装Android Studio<br>4、下载安装Android SDK</p>\n</blockquote>\n<h3 id=\"一、JDK安装\"><a href=\"#一、JDK安装\" class=\"headerlink\" title=\"一、JDK安装\"></a>一、JDK安装</h3><p>JDK的全称是Java SE Development Kit，也就是Java 开发工具箱。SE表示标准版。JDK是Java的核心，包含了Java的运行环境（Java Runtime Environment），一堆Java工具和给开发者开发应用程序时调用的Java类库。</p>\n<p>JDK下载地址：<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>\n<h3 id=\"二、JDK环境变量\"><a href=\"#二、JDK环境变量\" class=\"headerlink\" title=\"二、JDK环境变量\"></a>二、JDK环境变量</h3><blockquote>\n<p>详细步骤配置参考：<a href=\"https://www.runoob.com/java/java-environment-setup.html\">https://www.runoob.com/java/java-environment-setup.html</a></p>\n</blockquote>\n<p>为了配置JDK的系统环境变量，我们需要设置三个系统变量，分别是JAVA_HOME，Path和CLASSPATH。下面是这三个变量的设置范例：</p>\n<p><code>JAVA_HOME</code><br>先设置这个系统变量名称，变量值为JDK在你电脑上的安装路径：<code>C:\\Program Files\\Java\\jdk1.8.0_20</code>。创建好后则可以利用%JAVA_HOME%作为JDK安装目录的统一引用路径。</p>\n<p><code>Path</code><br>PATH属性已存在，可直接编辑，在原来变量后追加：<code>;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin</code>。</p>\n<p><code>CLASSPATH</code><br>设置系统变量名为：CLASSPATH  变量值为：<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code> 。<br>注意变量值字符串前面有一个”.”表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。</p>\n<h3 id=\"三、安装Android-Studio\"><a href=\"#三、安装Android-Studio\" class=\"headerlink\" title=\"三、安装Android Studio\"></a>三、安装Android Studio</h3><p>Android Studio 下载地址：<a href=\"https://developer.android.google.cn/studio\">https://developer.android.google.cn/studio</a></p>\n<h3 id=\"四、安装Android-SDK\"><a href=\"#四、安装Android-SDK\" class=\"headerlink\" title=\"四、安装Android SDK\"></a>四、安装Android SDK</h3><p>Android Studio中下载Android SDK，翻墙除外</p>\n<p>参考方法：<a href=\"https://blog.csdn.net/qq_23599965/article/details/80910202\">https://blog.csdn.net/qq_23599965/article/details/80910202</a></p>\n<p>方式一、设置HTTP Proxy，反正我没成功过</p>\n<p>设置 Host name 为：mirrors.neusoft.edu.cn<br>设置 Port number 为：80</p>\n<p>方式二、 更改hosts文件</p>\n<p>得取消设置HTTP Proxy，为了方便Hosts文件下载地址：<a href=\"https://github.com/googlehosts/hosts\">https://github.com/googlehosts/hosts</a> 可直接替换掉hosts文件</p>\n<p>hosts系统文件地址：C:\\WINDOWS\\System32\\drivers\\etc\\hosts</p>\n<p>后面就轻松多了。。。。。。</p>\n<p>注明：Android相关下载工具地址：<a href=\"https://www.androiddevtools.cn/\">https://www.androiddevtools.cn/</a></p>"},{"title":"Android问题","date":"2022-10-17T06:32:40.000Z","_content":"\n## 1. Android9，http适配，解决不能使用http协议\n\n<!-- more -->\n\nAndroid9开始原生不支持http协议需要适配  \n\n`res`目录下创建xml目录，xml目录里面新建xml文件，名字叫 `network_security_config.xml`\n  \n文件内容如下\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <base-config cleartextTrafficPermitted=\"true\" />\n</network-security-config>\n```\n\n修改清单文件`application`头标签加入属性\n\n```xml\nandroid:networkSecurityConfig=\"@xml/network_security_config\"\n```\n","source":"_posts/Android/Android问题.md","raw":"---\ntitle: Android问题\ndate: 2022-10-17 14:32:40\ntags: Android\n---\n\n## 1. Android9，http适配，解决不能使用http协议\n\n<!-- more -->\n\nAndroid9开始原生不支持http协议需要适配  \n\n`res`目录下创建xml目录，xml目录里面新建xml文件，名字叫 `network_security_config.xml`\n  \n文件内容如下\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <base-config cleartextTrafficPermitted=\"true\" />\n</network-security-config>\n```\n\n修改清单文件`application`头标签加入属性\n\n```xml\nandroid:networkSecurityConfig=\"@xml/network_security_config\"\n```\n","slug":"Android/Android问题","published":1,"updated":"2023-06-28T17:50:09.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3z70007j0363uu0dyll","content":"<h2 id=\"1-Android9，http适配，解决不能使用http协议\"><a href=\"#1-Android9，http适配，解决不能使用http协议\" class=\"headerlink\" title=\"1. Android9，http适配，解决不能使用http协议\"></a>1. Android9，http适配，解决不能使用http协议</h2><span id=\"more\"></span>\n\n<p>Android9开始原生不支持http协议需要适配  </p>\n<p><code>res</code>目录下创建xml目录，xml目录里面新建xml文件，名字叫 <code>network_security_config.xml</code></p>\n<p>文件内容如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">network-security-config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base-config</span> <span class=\"attr\">cleartextTrafficPermitted</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改清单文件<code>application</code>头标签加入属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-Android9，http适配，解决不能使用http协议\"><a href=\"#1-Android9，http适配，解决不能使用http协议\" class=\"headerlink\" title=\"1. Android9，http适配，解决不能使用http协议\"></a>1. Android9，http适配，解决不能使用http协议</h2>","more":"<p>Android9开始原生不支持http协议需要适配  </p>\n<p><code>res</code>目录下创建xml目录，xml目录里面新建xml文件，名字叫 <code>network_security_config.xml</code></p>\n<p>文件内容如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">network-security-config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base-config</span> <span class=\"attr\">cleartextTrafficPermitted</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改清单文件<code>application</code>头标签加入属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</span><br></pre></td></tr></table></figure>"},{"title":"CMake","date":"2022-12-09T03:54:07.000Z","_content":"\n> CMake是一个跨平台的安装（编译）工具，支持静态库与动态库的建构，生成可执行文件\n> CMake通过CMakeLists.txt配置项目的构建系统，配合使用cmake命令行工具生成构建系统并执行编译、测试，相比于手动编写构建系统（如Makefile）要高效许多\n\n<!-- more -->\n\n### 简单的例子`hello`\n\n1.创建项目\n\n```s\nmkdir hello\ntouch HelloWorld.cpp\ntouch CMakeLists.txt\n```\n\n2.编写`CMakeLists.txt`\n\n```s\nproject(hello) # 项目名称\nadd_executable(hello HelloWorld.cpp) # 可执行文件的文件名 指定源文件\n```\n\n3.用cmake生成构建系统，Makefile文件\n\n```s\ncmake .\n```\n\n4.make编译可执行程序`hello`\n\n```s\nmake\n```\n\n### `CMake`命令\n\n`cmake --help`查看`cmake`命令支持的详细参数\n\n常用参数\n\n参数 | 含义\n--- | :---\n-S | 指定源文件根目录，必须包含一个`CMakeList.txt`文件\n-B | 指定构建目录，构建生成的文件的生成路径\n-D | 指定变量，-D后面的空格可以省略\n\n比如，指明使用当前目录作为源文件目录，其中包含CMakeLists.txt文件；使用build目录作为构建目录；设定变量CMAKE_BUILD_TYPE的值为Debug，变量AUTHOR的值为Henry\n\n> cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DAUTHOR=Henry\n\n1.生成构建系统\n\n```c\ncmake -B build\n```\n\n2.执行构建\n\n```c\ncmake --build build\n```\n\n### CMakeLists.txt\n\n参考：<https://gitee.com/RealCoolEngineer/cmake-template>\n","source":"_posts/Mac/CMake.md","raw":"---\ntitle: CMake\ndate: 2022-12-09 11:54:07\ntags:\n---\n\n> CMake是一个跨平台的安装（编译）工具，支持静态库与动态库的建构，生成可执行文件\n> CMake通过CMakeLists.txt配置项目的构建系统，配合使用cmake命令行工具生成构建系统并执行编译、测试，相比于手动编写构建系统（如Makefile）要高效许多\n\n<!-- more -->\n\n### 简单的例子`hello`\n\n1.创建项目\n\n```s\nmkdir hello\ntouch HelloWorld.cpp\ntouch CMakeLists.txt\n```\n\n2.编写`CMakeLists.txt`\n\n```s\nproject(hello) # 项目名称\nadd_executable(hello HelloWorld.cpp) # 可执行文件的文件名 指定源文件\n```\n\n3.用cmake生成构建系统，Makefile文件\n\n```s\ncmake .\n```\n\n4.make编译可执行程序`hello`\n\n```s\nmake\n```\n\n### `CMake`命令\n\n`cmake --help`查看`cmake`命令支持的详细参数\n\n常用参数\n\n参数 | 含义\n--- | :---\n-S | 指定源文件根目录，必须包含一个`CMakeList.txt`文件\n-B | 指定构建目录，构建生成的文件的生成路径\n-D | 指定变量，-D后面的空格可以省略\n\n比如，指明使用当前目录作为源文件目录，其中包含CMakeLists.txt文件；使用build目录作为构建目录；设定变量CMAKE_BUILD_TYPE的值为Debug，变量AUTHOR的值为Henry\n\n> cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DAUTHOR=Henry\n\n1.生成构建系统\n\n```c\ncmake -B build\n```\n\n2.执行构建\n\n```c\ncmake --build build\n```\n\n### CMakeLists.txt\n\n参考：<https://gitee.com/RealCoolEngineer/cmake-template>\n","slug":"Mac/CMake","published":1,"updated":"2023-06-28T17:46:25.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3z80009j0366uqj5dkk","content":"<blockquote>\n<p>CMake是一个跨平台的安装（编译）工具，支持静态库与动态库的建构，生成可执行文件<br>CMake通过CMakeLists.txt配置项目的构建系统，配合使用cmake命令行工具生成构建系统并执行编译、测试，相比于手动编写构建系统（如Makefile）要高效许多</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"简单的例子hello\"><a href=\"#简单的例子hello\" class=\"headerlink\" title=\"简单的例子hello\"></a>简单的例子<code>hello</code></h3><p>1.创建项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir hello</span><br><span class=\"line\">touch HelloWorld.cpp</span><br><span class=\"line\">touch CMakeLists.txt</span><br></pre></td></tr></table></figure>\n\n<p>2.编写<code>CMakeLists.txt</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project(hello) # 项目名称</span><br><span class=\"line\">add_executable(hello HelloWorld.cpp) # 可执行文件的文件名 指定源文件</span><br></pre></td></tr></table></figure>\n\n<p>3.用cmake生成构建系统，Makefile文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake .</span><br></pre></td></tr></table></figure>\n\n<p>4.make编译可执行程序<code>hello</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMake命令\"><a href=\"#CMake命令\" class=\"headerlink\" title=\"CMake命令\"></a><code>CMake</code>命令</h3><p><code>cmake --help</code>查看<code>cmake</code>命令支持的详细参数</p>\n<p>常用参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-S</td>\n<td align=\"left\">指定源文件根目录，必须包含一个<code>CMakeList.txt</code>文件</td>\n</tr>\n<tr>\n<td>-B</td>\n<td align=\"left\">指定构建目录，构建生成的文件的生成路径</td>\n</tr>\n<tr>\n<td>-D</td>\n<td align=\"left\">指定变量，-D后面的空格可以省略</td>\n</tr>\n</tbody></table>\n<p>比如，指明使用当前目录作为源文件目录，其中包含CMakeLists.txt文件；使用build目录作为构建目录；设定变量CMAKE_BUILD_TYPE的值为Debug，变量AUTHOR的值为Henry</p>\n<blockquote>\n<p>cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DAUTHOR=Henry</p>\n</blockquote>\n<p>1.生成构建系统</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -B build</span><br></pre></td></tr></table></figure>\n\n<p>2.执行构建</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --build build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMakeLists-txt\"><a href=\"#CMakeLists-txt\" class=\"headerlink\" title=\"CMakeLists.txt\"></a>CMakeLists.txt</h3><p>参考：<a href=\"https://gitee.com/RealCoolEngineer/cmake-template\">https://gitee.com/RealCoolEngineer/cmake-template</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>CMake是一个跨平台的安装（编译）工具，支持静态库与动态库的建构，生成可执行文件<br>CMake通过CMakeLists.txt配置项目的构建系统，配合使用cmake命令行工具生成构建系统并执行编译、测试，相比于手动编写构建系统（如Makefile）要高效许多</p>\n</blockquote>","more":"<h3 id=\"简单的例子hello\"><a href=\"#简单的例子hello\" class=\"headerlink\" title=\"简单的例子hello\"></a>简单的例子<code>hello</code></h3><p>1.创建项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir hello</span><br><span class=\"line\">touch HelloWorld.cpp</span><br><span class=\"line\">touch CMakeLists.txt</span><br></pre></td></tr></table></figure>\n\n<p>2.编写<code>CMakeLists.txt</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project(hello) # 项目名称</span><br><span class=\"line\">add_executable(hello HelloWorld.cpp) # 可执行文件的文件名 指定源文件</span><br></pre></td></tr></table></figure>\n\n<p>3.用cmake生成构建系统，Makefile文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake .</span><br></pre></td></tr></table></figure>\n\n<p>4.make编译可执行程序<code>hello</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMake命令\"><a href=\"#CMake命令\" class=\"headerlink\" title=\"CMake命令\"></a><code>CMake</code>命令</h3><p><code>cmake --help</code>查看<code>cmake</code>命令支持的详细参数</p>\n<p>常用参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-S</td>\n<td align=\"left\">指定源文件根目录，必须包含一个<code>CMakeList.txt</code>文件</td>\n</tr>\n<tr>\n<td>-B</td>\n<td align=\"left\">指定构建目录，构建生成的文件的生成路径</td>\n</tr>\n<tr>\n<td>-D</td>\n<td align=\"left\">指定变量，-D后面的空格可以省略</td>\n</tr>\n</tbody></table>\n<p>比如，指明使用当前目录作为源文件目录，其中包含CMakeLists.txt文件；使用build目录作为构建目录；设定变量CMAKE_BUILD_TYPE的值为Debug，变量AUTHOR的值为Henry</p>\n<blockquote>\n<p>cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DAUTHOR=Henry</p>\n</blockquote>\n<p>1.生成构建系统</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -B build</span><br></pre></td></tr></table></figure>\n\n<p>2.执行构建</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --build build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMakeLists-txt\"><a href=\"#CMakeLists-txt\" class=\"headerlink\" title=\"CMakeLists.txt\"></a>CMakeLists.txt</h3><p>参考：<a href=\"https://gitee.com/RealCoolEngineer/cmake-template\">https://gitee.com/RealCoolEngineer/cmake-template</a></p>"},{"title":"Mac命令","date":"2018-12-15T14:29:10.000Z","_content":"\n> Mac命令\n\n<!-- more -->\n\n## 目录和文件操作\n\n| 命令名 | 功能描述 | 举例或备注 |\n| :---: | :---    | :---     |\n| cd    | 进入指定文件夹路径 | `cd ~/Desktop` |\n| pwd   | 显示当前的目录路径 | /Users/xz/Desktop |\n| ls    | 显示当前目录下的内容 |\n| ls -la | 显示当前目录下的详细内容 |\n| ls -a | 显示当前目录下的内容 | 含点(.)开头的文件 |\n| mkdir | 创建目录 | `mkdir dir_name` |\n| touch | 创建指定格式的文件 | `touch file.format` |\n| mvdir | 移动目录 | `mvdir dir1 dir2` |\n| mv    | 移动/重命名---文件/文件夹 | `mv dir1 dir2`MAC没有重命名的命令 |\n| rm    | 删除文件或空目录| `rm file` |\n| rm -rf dir | 删除一个非空目录 | `rm -rf dir` |\n| rmdir | 删除空目录 | 平时用得少 |\n| cp    | 复制文件或目录 | `cp file1 file2` |\n| file  | 显示文件类型 | `file file_name` |\n| find  | 使用匹配表达式查找文件 | `find *.file_format` |\n| open  | 使用默认的程序打开文件 | `open file_name` |\n| open . | 打开Finder目录 | `open .` |\n| cat   | 显示或连接文件内容| `cat file` |\n| ln    | 为文件创建联接 | `ln -s file1 file2` s 表示软联接 |\n| head  | 显示文件的最初几行 | `head -20 file_name` |\n| tail  | 显示文件的最后几行 | `tail -10 file_name` |\n| paste | 横向拼接文件内容 | `paste file1 file2` |\n| diff  | 比较并显示两个文件的内容差异 | `diff file1 file2` |\n| wc    | 统计文件的字符数、词数和行数 | `wc file_name` |\n| uniq  | 去掉文件中的重复行 | `uniq file_name` |\n| grep  | 通过简单正则表达式搜索文件 |\n\n## 文件属性 `ls -l`\n\n```shell\nls -l\ntotal 82488\n-rw-r--r--@ 1 xz  staff  42233727  7 19 16:30 PowerBi.pbix\n```\n\n| 语法 | 属性 | 含义说明 |\n| :---: | :--- | :--- |\n| - | 文件类型 | 横杠表示普通文件，若为d表示文件目录 |\n| rw-r--r-- | 访问权限 | 分3组：用户、群组和其他用户的文件访问权限|\n| 1 | 文件数量 | 本例中仅1个文件\n| xz | 所在用户 | 本例中用户名为xz\n| staff | 所在群组 | 本例中用户群组为staff\n| 42233727 | 文件大小 | 本例中文件的字节数\n| 7 19 16:30 | 修改日期 | 本例中为7-19 16:30\n| PowerBi.pbix | 文件名称 | 本例中为PowerBi.pbix\n\n### 修改访问权限 `chmod`\n\n语法：chmod 用户 操作 权限 文件  \n用户：u表示用户(user)、g表示群组(group)、o表示其他用户(other)、a表示全部用户。缺失的情况下默认为所有用户；  \n操作：+表示增加权限、-表示取消权限、=表示赋值权限；  \n权限：r表示可读(read)、w表示可写(write)、x表示可执行(execute)；  \n文件：不指定文件名时，操作对象为当前目录下的所有文件。  \n\n## 常用操作\n\n| 命令名 | 功能描述 | 举例或备注 |\n| :---: | :--- | :--- |\n| sudo  | 获取root权限 | sudo -s |\n| Control + D / exit |退出root权限 |\n| clear | 清除屏幕或窗口内容 |\n| ping  | 给网络主机发送回应请求| ping www.baidu.com |\n| man   | 查看命令说明 | man ls |\n| q     | 退出查看的命令说明 |\n| which | 查看指定程序的路径 | which python |\n| history | 列出最近执行过的命令及编号 |\n| hostname | 电脑在网络中的名称 |\n| env   | 显示当前所有设置过的环境变量 |\n| passwd | 修改用户密码 |\n| date  | 显示系统的当前日期和时间 | date |\n| cal   | 显示日历 | cal |\n| time  | 统计程序的执行时间 | time |\n\n## 快捷键\n\nCTRL+A：移动光标至行首  \nCTRL+E：移动光标至行尾  \nCTRL+X：按住CTRL，双击 X 可以进行当前位置与行首位置，进行切换  \nESC+B：光标向左移动一个单词  \nESC+F：光标向右移动一个单词  \nCTRL+U：删除光标前所有字符  \nCTRL+K：删除光标后所有字符  \nCTRL+W：删除光标前一个单词（根据空格识别单词分隔）  \nCTRL+Y：粘贴之前（CTRL+U/K/W）删除的内容  \nCTRL+C：中断操作\n","source":"_posts/Mac/Mac命令.md","raw":"---\ntitle: Mac命令\ndate: 2018-12-15 22:29:10\ntags: Mac\ncategories: Mac\n---\n\n> Mac命令\n\n<!-- more -->\n\n## 目录和文件操作\n\n| 命令名 | 功能描述 | 举例或备注 |\n| :---: | :---    | :---     |\n| cd    | 进入指定文件夹路径 | `cd ~/Desktop` |\n| pwd   | 显示当前的目录路径 | /Users/xz/Desktop |\n| ls    | 显示当前目录下的内容 |\n| ls -la | 显示当前目录下的详细内容 |\n| ls -a | 显示当前目录下的内容 | 含点(.)开头的文件 |\n| mkdir | 创建目录 | `mkdir dir_name` |\n| touch | 创建指定格式的文件 | `touch file.format` |\n| mvdir | 移动目录 | `mvdir dir1 dir2` |\n| mv    | 移动/重命名---文件/文件夹 | `mv dir1 dir2`MAC没有重命名的命令 |\n| rm    | 删除文件或空目录| `rm file` |\n| rm -rf dir | 删除一个非空目录 | `rm -rf dir` |\n| rmdir | 删除空目录 | 平时用得少 |\n| cp    | 复制文件或目录 | `cp file1 file2` |\n| file  | 显示文件类型 | `file file_name` |\n| find  | 使用匹配表达式查找文件 | `find *.file_format` |\n| open  | 使用默认的程序打开文件 | `open file_name` |\n| open . | 打开Finder目录 | `open .` |\n| cat   | 显示或连接文件内容| `cat file` |\n| ln    | 为文件创建联接 | `ln -s file1 file2` s 表示软联接 |\n| head  | 显示文件的最初几行 | `head -20 file_name` |\n| tail  | 显示文件的最后几行 | `tail -10 file_name` |\n| paste | 横向拼接文件内容 | `paste file1 file2` |\n| diff  | 比较并显示两个文件的内容差异 | `diff file1 file2` |\n| wc    | 统计文件的字符数、词数和行数 | `wc file_name` |\n| uniq  | 去掉文件中的重复行 | `uniq file_name` |\n| grep  | 通过简单正则表达式搜索文件 |\n\n## 文件属性 `ls -l`\n\n```shell\nls -l\ntotal 82488\n-rw-r--r--@ 1 xz  staff  42233727  7 19 16:30 PowerBi.pbix\n```\n\n| 语法 | 属性 | 含义说明 |\n| :---: | :--- | :--- |\n| - | 文件类型 | 横杠表示普通文件，若为d表示文件目录 |\n| rw-r--r-- | 访问权限 | 分3组：用户、群组和其他用户的文件访问权限|\n| 1 | 文件数量 | 本例中仅1个文件\n| xz | 所在用户 | 本例中用户名为xz\n| staff | 所在群组 | 本例中用户群组为staff\n| 42233727 | 文件大小 | 本例中文件的字节数\n| 7 19 16:30 | 修改日期 | 本例中为7-19 16:30\n| PowerBi.pbix | 文件名称 | 本例中为PowerBi.pbix\n\n### 修改访问权限 `chmod`\n\n语法：chmod 用户 操作 权限 文件  \n用户：u表示用户(user)、g表示群组(group)、o表示其他用户(other)、a表示全部用户。缺失的情况下默认为所有用户；  \n操作：+表示增加权限、-表示取消权限、=表示赋值权限；  \n权限：r表示可读(read)、w表示可写(write)、x表示可执行(execute)；  \n文件：不指定文件名时，操作对象为当前目录下的所有文件。  \n\n## 常用操作\n\n| 命令名 | 功能描述 | 举例或备注 |\n| :---: | :--- | :--- |\n| sudo  | 获取root权限 | sudo -s |\n| Control + D / exit |退出root权限 |\n| clear | 清除屏幕或窗口内容 |\n| ping  | 给网络主机发送回应请求| ping www.baidu.com |\n| man   | 查看命令说明 | man ls |\n| q     | 退出查看的命令说明 |\n| which | 查看指定程序的路径 | which python |\n| history | 列出最近执行过的命令及编号 |\n| hostname | 电脑在网络中的名称 |\n| env   | 显示当前所有设置过的环境变量 |\n| passwd | 修改用户密码 |\n| date  | 显示系统的当前日期和时间 | date |\n| cal   | 显示日历 | cal |\n| time  | 统计程序的执行时间 | time |\n\n## 快捷键\n\nCTRL+A：移动光标至行首  \nCTRL+E：移动光标至行尾  \nCTRL+X：按住CTRL，双击 X 可以进行当前位置与行首位置，进行切换  \nESC+B：光标向左移动一个单词  \nESC+F：光标向右移动一个单词  \nCTRL+U：删除光标前所有字符  \nCTRL+K：删除光标后所有字符  \nCTRL+W：删除光标前一个单词（根据空格识别单词分隔）  \nCTRL+Y：粘贴之前（CTRL+U/K/W）删除的内容  \nCTRL+C：中断操作\n","slug":"Mac/Mac命令","published":1,"updated":"2021-08-16T02:15:39.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3za000cj036hoju4df1","content":"<blockquote>\n<p>Mac命令</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"目录和文件操作\"><a href=\"#目录和文件操作\" class=\"headerlink\" title=\"目录和文件操作\"></a>目录和文件操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令名</th>\n<th align=\"left\">功能描述</th>\n<th align=\"left\">举例或备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cd</td>\n<td align=\"left\">进入指定文件夹路径</td>\n<td align=\"left\"><code>cd ~/Desktop</code></td>\n</tr>\n<tr>\n<td align=\"center\">pwd</td>\n<td align=\"left\">显示当前的目录路径</td>\n<td align=\"left\">/Users/xz/Desktop</td>\n</tr>\n<tr>\n<td align=\"center\">ls</td>\n<td align=\"left\">显示当前目录下的内容</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">ls -la</td>\n<td align=\"left\">显示当前目录下的详细内容</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">ls -a</td>\n<td align=\"left\">显示当前目录下的内容</td>\n<td align=\"left\">含点(.)开头的文件</td>\n</tr>\n<tr>\n<td align=\"center\">mkdir</td>\n<td align=\"left\">创建目录</td>\n<td align=\"left\"><code>mkdir dir_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">touch</td>\n<td align=\"left\">创建指定格式的文件</td>\n<td align=\"left\"><code>touch file.format</code></td>\n</tr>\n<tr>\n<td align=\"center\">mvdir</td>\n<td align=\"left\">移动目录</td>\n<td align=\"left\"><code>mvdir dir1 dir2</code></td>\n</tr>\n<tr>\n<td align=\"center\">mv</td>\n<td align=\"left\">移动/重命名—文件/文件夹</td>\n<td align=\"left\"><code>mv dir1 dir2</code>MAC没有重命名的命令</td>\n</tr>\n<tr>\n<td align=\"center\">rm</td>\n<td align=\"left\">删除文件或空目录</td>\n<td align=\"left\"><code>rm file</code></td>\n</tr>\n<tr>\n<td align=\"center\">rm -rf dir</td>\n<td align=\"left\">删除一个非空目录</td>\n<td align=\"left\"><code>rm -rf dir</code></td>\n</tr>\n<tr>\n<td align=\"center\">rmdir</td>\n<td align=\"left\">删除空目录</td>\n<td align=\"left\">平时用得少</td>\n</tr>\n<tr>\n<td align=\"center\">cp</td>\n<td align=\"left\">复制文件或目录</td>\n<td align=\"left\"><code>cp file1 file2</code></td>\n</tr>\n<tr>\n<td align=\"center\">file</td>\n<td align=\"left\">显示文件类型</td>\n<td align=\"left\"><code>file file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">find</td>\n<td align=\"left\">使用匹配表达式查找文件</td>\n<td align=\"left\"><code>find *.file_format</code></td>\n</tr>\n<tr>\n<td align=\"center\">open</td>\n<td align=\"left\">使用默认的程序打开文件</td>\n<td align=\"left\"><code>open file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">open .</td>\n<td align=\"left\">打开Finder目录</td>\n<td align=\"left\"><code>open .</code></td>\n</tr>\n<tr>\n<td align=\"center\">cat</td>\n<td align=\"left\">显示或连接文件内容</td>\n<td align=\"left\"><code>cat file</code></td>\n</tr>\n<tr>\n<td align=\"center\">ln</td>\n<td align=\"left\">为文件创建联接</td>\n<td align=\"left\"><code>ln -s file1 file2</code> s 表示软联接</td>\n</tr>\n<tr>\n<td align=\"center\">head</td>\n<td align=\"left\">显示文件的最初几行</td>\n<td align=\"left\"><code>head -20 file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">tail</td>\n<td align=\"left\">显示文件的最后几行</td>\n<td align=\"left\"><code>tail -10 file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">paste</td>\n<td align=\"left\">横向拼接文件内容</td>\n<td align=\"left\"><code>paste file1 file2</code></td>\n</tr>\n<tr>\n<td align=\"center\">diff</td>\n<td align=\"left\">比较并显示两个文件的内容差异</td>\n<td align=\"left\"><code>diff file1 file2</code></td>\n</tr>\n<tr>\n<td align=\"center\">wc</td>\n<td align=\"left\">统计文件的字符数、词数和行数</td>\n<td align=\"left\"><code>wc file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">uniq</td>\n<td align=\"left\">去掉文件中的重复行</td>\n<td align=\"left\"><code>uniq file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">grep</td>\n<td align=\"left\">通过简单正则表达式搜索文件</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"文件属性-ls-l\"><a href=\"#文件属性-ls-l\" class=\"headerlink\" title=\"文件属性 ls -l\"></a>文件属性 <code>ls -l</code></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l</span><br><span class=\"line\">total 82488</span><br><span class=\"line\">-rw-r--r--@ 1 xz  staff  42233727  7 19 16:30 PowerBi.pbix</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">语法</th>\n<th align=\"left\">属性</th>\n<th align=\"left\">含义说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-</td>\n<td align=\"left\">文件类型</td>\n<td align=\"left\">横杠表示普通文件，若为d表示文件目录</td>\n</tr>\n<tr>\n<td align=\"center\">rw-r–r–</td>\n<td align=\"left\">访问权限</td>\n<td align=\"left\">分3组：用户、群组和其他用户的文件访问权限</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"left\">文件数量</td>\n<td align=\"left\">本例中仅1个文件</td>\n</tr>\n<tr>\n<td align=\"center\">xz</td>\n<td align=\"left\">所在用户</td>\n<td align=\"left\">本例中用户名为xz</td>\n</tr>\n<tr>\n<td align=\"center\">staff</td>\n<td align=\"left\">所在群组</td>\n<td align=\"left\">本例中用户群组为staff</td>\n</tr>\n<tr>\n<td align=\"center\">42233727</td>\n<td align=\"left\">文件大小</td>\n<td align=\"left\">本例中文件的字节数</td>\n</tr>\n<tr>\n<td align=\"center\">7 19 16:30</td>\n<td align=\"left\">修改日期</td>\n<td align=\"left\">本例中为7-19 16:30</td>\n</tr>\n<tr>\n<td align=\"center\">PowerBi.pbix</td>\n<td align=\"left\">文件名称</td>\n<td align=\"left\">本例中为PowerBi.pbix</td>\n</tr>\n</tbody></table>\n<h3 id=\"修改访问权限-chmod\"><a href=\"#修改访问权限-chmod\" class=\"headerlink\" title=\"修改访问权限 chmod\"></a>修改访问权限 <code>chmod</code></h3><p>语法：chmod 用户 操作 权限 文件<br>用户：u表示用户(user)、g表示群组(group)、o表示其他用户(other)、a表示全部用户。缺失的情况下默认为所有用户；<br>操作：+表示增加权限、-表示取消权限、=表示赋值权限；<br>权限：r表示可读(read)、w表示可写(write)、x表示可执行(execute)；<br>文件：不指定文件名时，操作对象为当前目录下的所有文件。  </p>\n<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令名</th>\n<th align=\"left\">功能描述</th>\n<th align=\"left\">举例或备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">sudo</td>\n<td align=\"left\">获取root权限</td>\n<td align=\"left\">sudo -s</td>\n</tr>\n<tr>\n<td align=\"center\">Control + D / exit</td>\n<td align=\"left\">退出root权限</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">clear</td>\n<td align=\"left\">清除屏幕或窗口内容</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">ping</td>\n<td align=\"left\">给网络主机发送回应请求</td>\n<td align=\"left\">ping <a href=\"http://www.baidu.com/\">www.baidu.com</a></td>\n</tr>\n<tr>\n<td align=\"center\">man</td>\n<td align=\"left\">查看命令说明</td>\n<td align=\"left\">man ls</td>\n</tr>\n<tr>\n<td align=\"center\">q</td>\n<td align=\"left\">退出查看的命令说明</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">which</td>\n<td align=\"left\">查看指定程序的路径</td>\n<td align=\"left\">which python</td>\n</tr>\n<tr>\n<td align=\"center\">history</td>\n<td align=\"left\">列出最近执行过的命令及编号</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">hostname</td>\n<td align=\"left\">电脑在网络中的名称</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">env</td>\n<td align=\"left\">显示当前所有设置过的环境变量</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">passwd</td>\n<td align=\"left\">修改用户密码</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">date</td>\n<td align=\"left\">显示系统的当前日期和时间</td>\n<td align=\"left\">date</td>\n</tr>\n<tr>\n<td align=\"center\">cal</td>\n<td align=\"left\">显示日历</td>\n<td align=\"left\">cal</td>\n</tr>\n<tr>\n<td align=\"center\">time</td>\n<td align=\"left\">统计程序的执行时间</td>\n<td align=\"left\">time</td>\n</tr>\n</tbody></table>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>CTRL+A：移动光标至行首<br>CTRL+E：移动光标至行尾<br>CTRL+X：按住CTRL，双击 X 可以进行当前位置与行首位置，进行切换<br>ESC+B：光标向左移动一个单词<br>ESC+F：光标向右移动一个单词<br>CTRL+U：删除光标前所有字符<br>CTRL+K：删除光标后所有字符<br>CTRL+W：删除光标前一个单词（根据空格识别单词分隔）<br>CTRL+Y：粘贴之前（CTRL+U/K/W）删除的内容<br>CTRL+C：中断操作</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Mac命令</p>\n</blockquote>","more":"<h2 id=\"目录和文件操作\"><a href=\"#目录和文件操作\" class=\"headerlink\" title=\"目录和文件操作\"></a>目录和文件操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令名</th>\n<th align=\"left\">功能描述</th>\n<th align=\"left\">举例或备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cd</td>\n<td align=\"left\">进入指定文件夹路径</td>\n<td align=\"left\"><code>cd ~/Desktop</code></td>\n</tr>\n<tr>\n<td align=\"center\">pwd</td>\n<td align=\"left\">显示当前的目录路径</td>\n<td align=\"left\">/Users/xz/Desktop</td>\n</tr>\n<tr>\n<td align=\"center\">ls</td>\n<td align=\"left\">显示当前目录下的内容</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">ls -la</td>\n<td align=\"left\">显示当前目录下的详细内容</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">ls -a</td>\n<td align=\"left\">显示当前目录下的内容</td>\n<td align=\"left\">含点(.)开头的文件</td>\n</tr>\n<tr>\n<td align=\"center\">mkdir</td>\n<td align=\"left\">创建目录</td>\n<td align=\"left\"><code>mkdir dir_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">touch</td>\n<td align=\"left\">创建指定格式的文件</td>\n<td align=\"left\"><code>touch file.format</code></td>\n</tr>\n<tr>\n<td align=\"center\">mvdir</td>\n<td align=\"left\">移动目录</td>\n<td align=\"left\"><code>mvdir dir1 dir2</code></td>\n</tr>\n<tr>\n<td align=\"center\">mv</td>\n<td align=\"left\">移动/重命名—文件/文件夹</td>\n<td align=\"left\"><code>mv dir1 dir2</code>MAC没有重命名的命令</td>\n</tr>\n<tr>\n<td align=\"center\">rm</td>\n<td align=\"left\">删除文件或空目录</td>\n<td align=\"left\"><code>rm file</code></td>\n</tr>\n<tr>\n<td align=\"center\">rm -rf dir</td>\n<td align=\"left\">删除一个非空目录</td>\n<td align=\"left\"><code>rm -rf dir</code></td>\n</tr>\n<tr>\n<td align=\"center\">rmdir</td>\n<td align=\"left\">删除空目录</td>\n<td align=\"left\">平时用得少</td>\n</tr>\n<tr>\n<td align=\"center\">cp</td>\n<td align=\"left\">复制文件或目录</td>\n<td align=\"left\"><code>cp file1 file2</code></td>\n</tr>\n<tr>\n<td align=\"center\">file</td>\n<td align=\"left\">显示文件类型</td>\n<td align=\"left\"><code>file file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">find</td>\n<td align=\"left\">使用匹配表达式查找文件</td>\n<td align=\"left\"><code>find *.file_format</code></td>\n</tr>\n<tr>\n<td align=\"center\">open</td>\n<td align=\"left\">使用默认的程序打开文件</td>\n<td align=\"left\"><code>open file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">open .</td>\n<td align=\"left\">打开Finder目录</td>\n<td align=\"left\"><code>open .</code></td>\n</tr>\n<tr>\n<td align=\"center\">cat</td>\n<td align=\"left\">显示或连接文件内容</td>\n<td align=\"left\"><code>cat file</code></td>\n</tr>\n<tr>\n<td align=\"center\">ln</td>\n<td align=\"left\">为文件创建联接</td>\n<td align=\"left\"><code>ln -s file1 file2</code> s 表示软联接</td>\n</tr>\n<tr>\n<td align=\"center\">head</td>\n<td align=\"left\">显示文件的最初几行</td>\n<td align=\"left\"><code>head -20 file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">tail</td>\n<td align=\"left\">显示文件的最后几行</td>\n<td align=\"left\"><code>tail -10 file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">paste</td>\n<td align=\"left\">横向拼接文件内容</td>\n<td align=\"left\"><code>paste file1 file2</code></td>\n</tr>\n<tr>\n<td align=\"center\">diff</td>\n<td align=\"left\">比较并显示两个文件的内容差异</td>\n<td align=\"left\"><code>diff file1 file2</code></td>\n</tr>\n<tr>\n<td align=\"center\">wc</td>\n<td align=\"left\">统计文件的字符数、词数和行数</td>\n<td align=\"left\"><code>wc file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">uniq</td>\n<td align=\"left\">去掉文件中的重复行</td>\n<td align=\"left\"><code>uniq file_name</code></td>\n</tr>\n<tr>\n<td align=\"center\">grep</td>\n<td align=\"left\">通过简单正则表达式搜索文件</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"文件属性-ls-l\"><a href=\"#文件属性-ls-l\" class=\"headerlink\" title=\"文件属性 ls -l\"></a>文件属性 <code>ls -l</code></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l</span><br><span class=\"line\">total 82488</span><br><span class=\"line\">-rw-r--r--@ 1 xz  staff  42233727  7 19 16:30 PowerBi.pbix</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">语法</th>\n<th align=\"left\">属性</th>\n<th align=\"left\">含义说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-</td>\n<td align=\"left\">文件类型</td>\n<td align=\"left\">横杠表示普通文件，若为d表示文件目录</td>\n</tr>\n<tr>\n<td align=\"center\">rw-r–r–</td>\n<td align=\"left\">访问权限</td>\n<td align=\"left\">分3组：用户、群组和其他用户的文件访问权限</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"left\">文件数量</td>\n<td align=\"left\">本例中仅1个文件</td>\n</tr>\n<tr>\n<td align=\"center\">xz</td>\n<td align=\"left\">所在用户</td>\n<td align=\"left\">本例中用户名为xz</td>\n</tr>\n<tr>\n<td align=\"center\">staff</td>\n<td align=\"left\">所在群组</td>\n<td align=\"left\">本例中用户群组为staff</td>\n</tr>\n<tr>\n<td align=\"center\">42233727</td>\n<td align=\"left\">文件大小</td>\n<td align=\"left\">本例中文件的字节数</td>\n</tr>\n<tr>\n<td align=\"center\">7 19 16:30</td>\n<td align=\"left\">修改日期</td>\n<td align=\"left\">本例中为7-19 16:30</td>\n</tr>\n<tr>\n<td align=\"center\">PowerBi.pbix</td>\n<td align=\"left\">文件名称</td>\n<td align=\"left\">本例中为PowerBi.pbix</td>\n</tr>\n</tbody></table>\n<h3 id=\"修改访问权限-chmod\"><a href=\"#修改访问权限-chmod\" class=\"headerlink\" title=\"修改访问权限 chmod\"></a>修改访问权限 <code>chmod</code></h3><p>语法：chmod 用户 操作 权限 文件<br>用户：u表示用户(user)、g表示群组(group)、o表示其他用户(other)、a表示全部用户。缺失的情况下默认为所有用户；<br>操作：+表示增加权限、-表示取消权限、=表示赋值权限；<br>权限：r表示可读(read)、w表示可写(write)、x表示可执行(execute)；<br>文件：不指定文件名时，操作对象为当前目录下的所有文件。  </p>\n<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令名</th>\n<th align=\"left\">功能描述</th>\n<th align=\"left\">举例或备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">sudo</td>\n<td align=\"left\">获取root权限</td>\n<td align=\"left\">sudo -s</td>\n</tr>\n<tr>\n<td align=\"center\">Control + D / exit</td>\n<td align=\"left\">退出root权限</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">clear</td>\n<td align=\"left\">清除屏幕或窗口内容</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">ping</td>\n<td align=\"left\">给网络主机发送回应请求</td>\n<td align=\"left\">ping <a href=\"http://www.baidu.com/\">www.baidu.com</a></td>\n</tr>\n<tr>\n<td align=\"center\">man</td>\n<td align=\"left\">查看命令说明</td>\n<td align=\"left\">man ls</td>\n</tr>\n<tr>\n<td align=\"center\">q</td>\n<td align=\"left\">退出查看的命令说明</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">which</td>\n<td align=\"left\">查看指定程序的路径</td>\n<td align=\"left\">which python</td>\n</tr>\n<tr>\n<td align=\"center\">history</td>\n<td align=\"left\">列出最近执行过的命令及编号</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">hostname</td>\n<td align=\"left\">电脑在网络中的名称</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">env</td>\n<td align=\"left\">显示当前所有设置过的环境变量</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">passwd</td>\n<td align=\"left\">修改用户密码</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">date</td>\n<td align=\"left\">显示系统的当前日期和时间</td>\n<td align=\"left\">date</td>\n</tr>\n<tr>\n<td align=\"center\">cal</td>\n<td align=\"left\">显示日历</td>\n<td align=\"left\">cal</td>\n</tr>\n<tr>\n<td align=\"center\">time</td>\n<td align=\"left\">统计程序的执行时间</td>\n<td align=\"left\">time</td>\n</tr>\n</tbody></table>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>CTRL+A：移动光标至行首<br>CTRL+E：移动光标至行尾<br>CTRL+X：按住CTRL，双击 X 可以进行当前位置与行首位置，进行切换<br>ESC+B：光标向左移动一个单词<br>ESC+F：光标向右移动一个单词<br>CTRL+U：删除光标前所有字符<br>CTRL+K：删除光标后所有字符<br>CTRL+W：删除光标前一个单词（根据空格识别单词分隔）<br>CTRL+Y：粘贴之前（CTRL+U/K/W）删除的内容<br>CTRL+C：中断操作</p>"},{"title":"Mac工具","date":"2023-03-03T02:00:00.000Z","_content":"\n> **Homebrew** 包管理工具\n\n安装/卸载/更新各种软件包，如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，快速搭建各种本地环境，程序员必备工具\n\n<!-- more -->\n\n## 安装brew\n\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n## 基本用法\n\n以 nodejs 为例，安装目录在 /usr/local/Cellar\n\n```shell\n// 安装 nodejs\nbrew install nodejs\n\n// 更新\nbrew upgrade nodejs\n\n// 卸载\nbrew remove nodejs\n\n// 列出当前安装的软件\nbrew list\n\n// 查询与 nodejs 相关的可用软件\nbrew search nodejs\n\n// 查询 nodejs 的安装信息\nbrew info nodejs\n```\n\n**注：** 如果需要指定版本，可以在`brew search`查看有没有需要的版本，在`@`后面指定版本号，例如`brew install thrift@0.9`\n\n## Homebrew更换国内镜像源\n\n参考：https://blog.csdn.net/xiewanchen0708/article/details/128232697\n\n查看 brew.git 当前源\n\n`cd \"$(brew --repo)\" && git remote -v`\n\n查看 homebrew-core.git 当前源\n\n`cd \"$(brew --repo homebrew/core)\" && git remote -v`\n\n\n切换 Homebrew 镜像源为中科大镜像源\n\n替换brew.git:\n\n`cd \"$(brew --repo)\" && git remote set-url origin https://mirrors.ustc.edu.cn/brew.git`\n\n替换homebrew-core.git:\n\n`cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" && git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git`\n\n替换homebrew-cask.git:\n\n`cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-cask\" && git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git`\n\nzsh 替换homebrew-bottles镜像，Mac OS在10.15系统开始，默认的shell都换成了zsh\n\n`echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc`\n\n修改使其立即生效\n\n`source ~/.zshrc`\n\nbash 替换homebrew-bottles镜像\n\n`echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile`\n\n修改使其立即生效\n\n`source ~/.bash_profile`\n\n刷新源\n\n`brew update`\n\n## brew 关闭自动更新\n\n参考：https://www.jianshu.com/p/3e413524c79a\n\n```shell\nexport HOMEBREW_NO_AUTO_UPDATE=true\n```","source":"_posts/Mac/Mac工具.md","raw":"---\ntitle: Mac工具\ndate: 2023-03-03 10:00:00\ntags: Mac\ncategories: Mac\n---\n\n> **Homebrew** 包管理工具\n\n安装/卸载/更新各种软件包，如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，快速搭建各种本地环境，程序员必备工具\n\n<!-- more -->\n\n## 安装brew\n\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n## 基本用法\n\n以 nodejs 为例，安装目录在 /usr/local/Cellar\n\n```shell\n// 安装 nodejs\nbrew install nodejs\n\n// 更新\nbrew upgrade nodejs\n\n// 卸载\nbrew remove nodejs\n\n// 列出当前安装的软件\nbrew list\n\n// 查询与 nodejs 相关的可用软件\nbrew search nodejs\n\n// 查询 nodejs 的安装信息\nbrew info nodejs\n```\n\n**注：** 如果需要指定版本，可以在`brew search`查看有没有需要的版本，在`@`后面指定版本号，例如`brew install thrift@0.9`\n\n## Homebrew更换国内镜像源\n\n参考：https://blog.csdn.net/xiewanchen0708/article/details/128232697\n\n查看 brew.git 当前源\n\n`cd \"$(brew --repo)\" && git remote -v`\n\n查看 homebrew-core.git 当前源\n\n`cd \"$(brew --repo homebrew/core)\" && git remote -v`\n\n\n切换 Homebrew 镜像源为中科大镜像源\n\n替换brew.git:\n\n`cd \"$(brew --repo)\" && git remote set-url origin https://mirrors.ustc.edu.cn/brew.git`\n\n替换homebrew-core.git:\n\n`cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\" && git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git`\n\n替换homebrew-cask.git:\n\n`cd \"$(brew --repo)/Library/Taps/homebrew/homebrew-cask\" && git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git`\n\nzsh 替换homebrew-bottles镜像，Mac OS在10.15系统开始，默认的shell都换成了zsh\n\n`echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc`\n\n修改使其立即生效\n\n`source ~/.zshrc`\n\nbash 替换homebrew-bottles镜像\n\n`echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile`\n\n修改使其立即生效\n\n`source ~/.bash_profile`\n\n刷新源\n\n`brew update`\n\n## brew 关闭自动更新\n\n参考：https://www.jianshu.com/p/3e413524c79a\n\n```shell\nexport HOMEBREW_NO_AUTO_UPDATE=true\n```","slug":"Mac/Mac工具","published":1,"updated":"2023-06-03T14:23:51.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3za000ej0364xdwhds8","content":"<blockquote>\n<p><strong>Homebrew</strong> 包管理工具</p>\n</blockquote>\n<p>安装/卸载/更新各种软件包，如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，快速搭建各种本地环境，程序员必备工具</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装brew\"><a href=\"#安装brew\" class=\"headerlink\" title=\"安装brew\"></a>安装brew</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>以 nodejs 为例，安装目录在 /usr/local/Cellar</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装 nodejs</span><br><span class=\"line\">brew install nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新</span><br><span class=\"line\">brew upgrade nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 卸载</span><br><span class=\"line\">brew remove nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出当前安装的软件</span><br><span class=\"line\">brew list</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询与 nodejs 相关的可用软件</span><br><span class=\"line\">brew search nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询 nodejs 的安装信息</span><br><span class=\"line\">brew info nodejs</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：</strong> 如果需要指定版本，可以在<code>brew search</code>查看有没有需要的版本，在<code>@</code>后面指定版本号，例如<code>brew install thrift@0.9</code></p>\n<h2 id=\"Homebrew更换国内镜像源\"><a href=\"#Homebrew更换国内镜像源\" class=\"headerlink\" title=\"Homebrew更换国内镜像源\"></a>Homebrew更换国内镜像源</h2><p>参考：<a href=\"https://blog.csdn.net/xiewanchen0708/article/details/128232697\">https://blog.csdn.net/xiewanchen0708/article/details/128232697</a></p>\n<p>查看 brew.git 当前源</p>\n<p><code>cd &quot;$(brew --repo)&quot; &amp;&amp; git remote -v</code></p>\n<p>查看 homebrew-core.git 当前源</p>\n<p><code>cd &quot;$(brew --repo homebrew/core)&quot; &amp;&amp; git remote -v</code></p>\n<p>切换 Homebrew 镜像源为中科大镜像源</p>\n<p>替换brew.git:</p>\n<p><code>cd &quot;$(brew --repo)&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</code></p>\n<p>替换homebrew-core.git:</p>\n<p><code>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</code></p>\n<p>替换homebrew-cask.git:</p>\n<p><code>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</code></p>\n<p>zsh 替换homebrew-bottles镜像，Mac OS在10.15系统开始，默认的shell都换成了zsh</p>\n<p><code>echo &#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#39; &gt;&gt; ~/.zshrc</code></p>\n<p>修改使其立即生效</p>\n<p><code>source ~/.zshrc</code></p>\n<p>bash 替换homebrew-bottles镜像</p>\n<p><code>echo &#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#39; &gt;&gt; ~/.bash_profile</code></p>\n<p>修改使其立即生效</p>\n<p><code>source ~/.bash_profile</code></p>\n<p>刷新源</p>\n<p><code>brew update</code></p>\n<h2 id=\"brew-关闭自动更新\"><a href=\"#brew-关闭自动更新\" class=\"headerlink\" title=\"brew 关闭自动更新\"></a>brew 关闭自动更新</h2><p>参考：<a href=\"https://www.jianshu.com/p/3e413524c79a\">https://www.jianshu.com/p/3e413524c79a</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HOMEBREW_NO_AUTO_UPDATE=true</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p><strong>Homebrew</strong> 包管理工具</p>\n</blockquote>\n<p>安装/卸载/更新各种软件包，如：nodejs, elasticsearch, kibana, mysql, mongodb 等等，快速搭建各种本地环境，程序员必备工具</p>","more":"<h2 id=\"安装brew\"><a href=\"#安装brew\" class=\"headerlink\" title=\"安装brew\"></a>安装brew</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>以 nodejs 为例，安装目录在 /usr/local/Cellar</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装 nodejs</span><br><span class=\"line\">brew install nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新</span><br><span class=\"line\">brew upgrade nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 卸载</span><br><span class=\"line\">brew remove nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 列出当前安装的软件</span><br><span class=\"line\">brew list</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询与 nodejs 相关的可用软件</span><br><span class=\"line\">brew search nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询 nodejs 的安装信息</span><br><span class=\"line\">brew info nodejs</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：</strong> 如果需要指定版本，可以在<code>brew search</code>查看有没有需要的版本，在<code>@</code>后面指定版本号，例如<code>brew install thrift@0.9</code></p>\n<h2 id=\"Homebrew更换国内镜像源\"><a href=\"#Homebrew更换国内镜像源\" class=\"headerlink\" title=\"Homebrew更换国内镜像源\"></a>Homebrew更换国内镜像源</h2><p>参考：<a href=\"https://blog.csdn.net/xiewanchen0708/article/details/128232697\">https://blog.csdn.net/xiewanchen0708/article/details/128232697</a></p>\n<p>查看 brew.git 当前源</p>\n<p><code>cd &quot;$(brew --repo)&quot; &amp;&amp; git remote -v</code></p>\n<p>查看 homebrew-core.git 当前源</p>\n<p><code>cd &quot;$(brew --repo homebrew/core)&quot; &amp;&amp; git remote -v</code></p>\n<p>切换 Homebrew 镜像源为中科大镜像源</p>\n<p>替换brew.git:</p>\n<p><code>cd &quot;$(brew --repo)&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</code></p>\n<p>替换homebrew-core.git:</p>\n<p><code>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</code></p>\n<p>替换homebrew-cask.git:</p>\n<p><code>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-cask&quot; &amp;&amp; git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</code></p>\n<p>zsh 替换homebrew-bottles镜像，Mac OS在10.15系统开始，默认的shell都换成了zsh</p>\n<p><code>echo &#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#39; &gt;&gt; ~/.zshrc</code></p>\n<p>修改使其立即生效</p>\n<p><code>source ~/.zshrc</code></p>\n<p>bash 替换homebrew-bottles镜像</p>\n<p><code>echo &#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#39; &gt;&gt; ~/.bash_profile</code></p>\n<p>修改使其立即生效</p>\n<p><code>source ~/.bash_profile</code></p>\n<p>刷新源</p>\n<p><code>brew update</code></p>\n<h2 id=\"brew-关闭自动更新\"><a href=\"#brew-关闭自动更新\" class=\"headerlink\" title=\"brew 关闭自动更新\"></a>brew 关闭自动更新</h2><p>参考：<a href=\"https://www.jianshu.com/p/3e413524c79a\">https://www.jianshu.com/p/3e413524c79a</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export HOMEBREW_NO_AUTO_UPDATE=true</span><br></pre></td></tr></table></figure>"},{"title":"CocoaPods使用","date":"2023-06-28T17:02:55.000Z","_content":"\n> CocoaPods（Xcode依赖库管理）\n\n<!-- more -->\n\n## 安装\n\n## 使用\n\ninstall时查看进度\n\n```shell\npod install --verbose --no-repo-update\n```\n\n复制\n![参考](https://upload-images.jianshu.io/upload_images/2699846-98c29969b73d0e73.png)\n\n新开终端窗口cd到复制的路径\n输入命令：du -sh\n\n## 创建公有Pod库\n\n### 1.注册CocoaPods账号信息\n\n> pod trunk register 邮箱地址 用户名 --verbose\n\n在邮箱中收到确认邮箱，在浏览器中点击链接确认即注册成功\n\n查看注册信息及自己开源pod库\n\n> pod trunk me\n\n### 2.Github创建仓库（略）\n\n### 3.创建共享库文件并上传到公有仓库\n\n> pod lib create 库名\n\n配置*.podspec文件\n\n### 4.推送到远程仓库\n\n### 5.打tag, 发布一个release版本\n\n> git tag -m 'first release' '1.0.1'\n> git push --tags #推送tag到远端仓库\n\n### 6.trunk push pod\n\n> pod trunk push TestPod.podspec --allow-warnings\n\n### 7.search pod\n\n> pod search TestPod #检验是否可用\n\n* 问题\n\n> [!] Unable to find a pod with name, author, summary, or description matching `TestPod`\n\n* 解决办法\n\n> rm ~/Library/Caches/CocoaPods/search_index.json","source":"_posts/iOS/CocoaPods使用.md","raw":"---\ntitle: CocoaPods使用\ndate: 2023-06-29 01:02:55\ntags: iOS\n---\n\n> CocoaPods（Xcode依赖库管理）\n\n<!-- more -->\n\n## 安装\n\n## 使用\n\ninstall时查看进度\n\n```shell\npod install --verbose --no-repo-update\n```\n\n复制\n![参考](https://upload-images.jianshu.io/upload_images/2699846-98c29969b73d0e73.png)\n\n新开终端窗口cd到复制的路径\n输入命令：du -sh\n\n## 创建公有Pod库\n\n### 1.注册CocoaPods账号信息\n\n> pod trunk register 邮箱地址 用户名 --verbose\n\n在邮箱中收到确认邮箱，在浏览器中点击链接确认即注册成功\n\n查看注册信息及自己开源pod库\n\n> pod trunk me\n\n### 2.Github创建仓库（略）\n\n### 3.创建共享库文件并上传到公有仓库\n\n> pod lib create 库名\n\n配置*.podspec文件\n\n### 4.推送到远程仓库\n\n### 5.打tag, 发布一个release版本\n\n> git tag -m 'first release' '1.0.1'\n> git push --tags #推送tag到远端仓库\n\n### 6.trunk push pod\n\n> pod trunk push TestPod.podspec --allow-warnings\n\n### 7.search pod\n\n> pod search TestPod #检验是否可用\n\n* 问题\n\n> [!] Unable to find a pod with name, author, summary, or description matching `TestPod`\n\n* 解决办法\n\n> rm ~/Library/Caches/CocoaPods/search_index.json","slug":"iOS/CocoaPods使用","published":1,"updated":"2023-06-28T17:22:28.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zc000ij036bfsu827h","content":"<blockquote>\n<p>CocoaPods（Xcode依赖库管理）</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>install时查看进度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install --verbose --no-repo-update</span><br></pre></td></tr></table></figure>\n\n<p>复制<br><img src=\"https://upload-images.jianshu.io/upload_images/2699846-98c29969b73d0e73.png\" alt=\"参考\"></p>\n<p>新开终端窗口cd到复制的路径<br>输入命令：du -sh</p>\n<h2 id=\"创建公有Pod库\"><a href=\"#创建公有Pod库\" class=\"headerlink\" title=\"创建公有Pod库\"></a>创建公有Pod库</h2><h3 id=\"1-注册CocoaPods账号信息\"><a href=\"#1-注册CocoaPods账号信息\" class=\"headerlink\" title=\"1.注册CocoaPods账号信息\"></a>1.注册CocoaPods账号信息</h3><blockquote>\n<p>pod trunk register 邮箱地址 用户名 –verbose</p>\n</blockquote>\n<p>在邮箱中收到确认邮箱，在浏览器中点击链接确认即注册成功</p>\n<p>查看注册信息及自己开源pod库</p>\n<blockquote>\n<p>pod trunk me</p>\n</blockquote>\n<h3 id=\"2-Github创建仓库（略）\"><a href=\"#2-Github创建仓库（略）\" class=\"headerlink\" title=\"2.Github创建仓库（略）\"></a>2.Github创建仓库（略）</h3><h3 id=\"3-创建共享库文件并上传到公有仓库\"><a href=\"#3-创建共享库文件并上传到公有仓库\" class=\"headerlink\" title=\"3.创建共享库文件并上传到公有仓库\"></a>3.创建共享库文件并上传到公有仓库</h3><blockquote>\n<p>pod lib create 库名</p>\n</blockquote>\n<p>配置*.podspec文件</p>\n<h3 id=\"4-推送到远程仓库\"><a href=\"#4-推送到远程仓库\" class=\"headerlink\" title=\"4.推送到远程仓库\"></a>4.推送到远程仓库</h3><h3 id=\"5-打tag-发布一个release版本\"><a href=\"#5-打tag-发布一个release版本\" class=\"headerlink\" title=\"5.打tag, 发布一个release版本\"></a>5.打tag, 发布一个release版本</h3><blockquote>\n<p>git tag -m ‘first release’ ‘1.0.1’<br>git push –tags #推送tag到远端仓库</p>\n</blockquote>\n<h3 id=\"6-trunk-push-pod\"><a href=\"#6-trunk-push-pod\" class=\"headerlink\" title=\"6.trunk push pod\"></a>6.trunk push pod</h3><blockquote>\n<p>pod trunk push TestPod.podspec –allow-warnings</p>\n</blockquote>\n<h3 id=\"7-search-pod\"><a href=\"#7-search-pod\" class=\"headerlink\" title=\"7.search pod\"></a>7.search pod</h3><blockquote>\n<p>pod search TestPod #检验是否可用</p>\n</blockquote>\n<ul>\n<li>问题</li>\n</ul>\n<blockquote>\n<p>[!] Unable to find a pod with name, author, summary, or description matching <code>TestPod</code></p>\n</blockquote>\n<ul>\n<li>解决办法</li>\n</ul>\n<blockquote>\n<p>rm ~/Library/Caches/CocoaPods/search_index.json</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>CocoaPods（Xcode依赖库管理）</p>\n</blockquote>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>install时查看进度</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install --verbose --no-repo-update</span><br></pre></td></tr></table></figure>\n\n<p>复制<br><img src=\"https://upload-images.jianshu.io/upload_images/2699846-98c29969b73d0e73.png\" alt=\"参考\"></p>\n<p>新开终端窗口cd到复制的路径<br>输入命令：du -sh</p>\n<h2 id=\"创建公有Pod库\"><a href=\"#创建公有Pod库\" class=\"headerlink\" title=\"创建公有Pod库\"></a>创建公有Pod库</h2><h3 id=\"1-注册CocoaPods账号信息\"><a href=\"#1-注册CocoaPods账号信息\" class=\"headerlink\" title=\"1.注册CocoaPods账号信息\"></a>1.注册CocoaPods账号信息</h3><blockquote>\n<p>pod trunk register 邮箱地址 用户名 –verbose</p>\n</blockquote>\n<p>在邮箱中收到确认邮箱，在浏览器中点击链接确认即注册成功</p>\n<p>查看注册信息及自己开源pod库</p>\n<blockquote>\n<p>pod trunk me</p>\n</blockquote>\n<h3 id=\"2-Github创建仓库（略）\"><a href=\"#2-Github创建仓库（略）\" class=\"headerlink\" title=\"2.Github创建仓库（略）\"></a>2.Github创建仓库（略）</h3><h3 id=\"3-创建共享库文件并上传到公有仓库\"><a href=\"#3-创建共享库文件并上传到公有仓库\" class=\"headerlink\" title=\"3.创建共享库文件并上传到公有仓库\"></a>3.创建共享库文件并上传到公有仓库</h3><blockquote>\n<p>pod lib create 库名</p>\n</blockquote>\n<p>配置*.podspec文件</p>\n<h3 id=\"4-推送到远程仓库\"><a href=\"#4-推送到远程仓库\" class=\"headerlink\" title=\"4.推送到远程仓库\"></a>4.推送到远程仓库</h3><h3 id=\"5-打tag-发布一个release版本\"><a href=\"#5-打tag-发布一个release版本\" class=\"headerlink\" title=\"5.打tag, 发布一个release版本\"></a>5.打tag, 发布一个release版本</h3><blockquote>\n<p>git tag -m ‘first release’ ‘1.0.1’<br>git push –tags #推送tag到远端仓库</p>\n</blockquote>\n<h3 id=\"6-trunk-push-pod\"><a href=\"#6-trunk-push-pod\" class=\"headerlink\" title=\"6.trunk push pod\"></a>6.trunk push pod</h3><blockquote>\n<p>pod trunk push TestPod.podspec –allow-warnings</p>\n</blockquote>\n<h3 id=\"7-search-pod\"><a href=\"#7-search-pod\" class=\"headerlink\" title=\"7.search pod\"></a>7.search pod</h3><blockquote>\n<p>pod search TestPod #检验是否可用</p>\n</blockquote>\n<ul>\n<li>问题</li>\n</ul>\n<blockquote>\n<p>[!] Unable to find a pod with name, author, summary, or description matching <code>TestPod</code></p>\n</blockquote>\n<ul>\n<li>解决办法</li>\n</ul>\n<blockquote>\n<p>rm ~/Library/Caches/CocoaPods/search_index.json</p>\n</blockquote>"},{"title":"OC-Keywords","date":"2018-11-09T04:53:32.000Z","_content":"\n> 关键字 `nullable` `nonnull` 【未完】\n\n<!-- more -->\n\n## 关键字\n\n## `nullable`和`nonnull`\n\niOS9新出的关键字：用来修饰属性 方法的参数和返回值\n\n### 在属性中使用`nullable`和`nonnull`\n\n`nullable`: 表示修饰的属性或参数可以为空\n\n`nonnull`:非空，表示修饰的属性或参数不能为空\n\n**注意：`nonnull`，`nullable`只能修饰对象，不能修饰基本数据类型**\n\n3\b种写法：\n\n```OC\n@property (nonatomic, strong, nullable) NSString * name;\n@property (nonatomic, strong) NSString *_Nullable name;\n@property (nonatomic, strong) NSString *__nullable name;\n//\n@property (nonatomic, strong, nonnull) NSString * price;\n@property (nonatomic, strong) NSString *_Nullable name;\n@property (nonatomic, strong) NSString *__nullable name;\n```\n\n### 在方法中使用`nullable`和`nonnull`\n\n```OC\n- (nullable NSString *)buyBook:(nullable NSString *)book;\n- (NSString *__nullable)buyBook:( NSString *__nullable)book;\n- (NSString *_Nullable)buyBook:( NSString *_Nullable)book;\n```\n\n### `Nonnull`区域设置(Audited Regions)\n\n宏定义\n\n```OC\nNS_ASSUME_NONNULL_BEGIN\n@property (nonatomic, strong) NSString * name;\n...\nNS_ASSUME_NONNULL_END\n```\n\n之间定义的所有属性和方法参数和返回值默认加上`nonnull`修饰\n\n为了**安全**起见，苹果还制定了几条**规则**：\n\n> 1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。  \n> 2.复杂的指针类型(如id)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用`__nullable id * __nonnull`。  \n> 3.我们经常使用的`NSError` 通常是被假定为一个指向nullable NSError对象的nullable指针。\n\n### null_resettable\n\n**`null_resettable`: get方法:不能返回为空，set方法可以为空**\n\n```OC\n @property (nonatomic, strong, null_resettable) NSNumber * number;\n```\n\n当属性策略中使用了`null_resettable`修饰，就必须保证该属性的get方法返回不为空，否则编译器会如上图那样报警告⚠️。可以在set方法或get方法中做非空处理，以下是在get方法中做处理：\n\n```OC\n- (NSNumber *)number {\n    if (_number == nil) {\n        _number = @11;\n    }\n    return _number;\n}\n```\n\n### null_unspecified\n\n**`null_unspecified`:不确定是否为空,使用方式有三种：**\n\n```OC\n// 方法一\n@property(nonatomic,strong) NSNumber *_Null_unspecified height;\n// 方法二\n@property(nonatomic,strong) NSNumber *__null_unspecified height;\n// 方法三\n@property(nonatomic,strong,null_unspecified) NSNumber * height;\n```\n","source":"_posts/iOS/OC-Keywords.md","raw":"---\ntitle: OC-Keywords\ndate: 2018-11-09 12:53:32\ntags: OC\ncategories: Objective-C\n---\n\n> 关键字 `nullable` `nonnull` 【未完】\n\n<!-- more -->\n\n## 关键字\n\n## `nullable`和`nonnull`\n\niOS9新出的关键字：用来修饰属性 方法的参数和返回值\n\n### 在属性中使用`nullable`和`nonnull`\n\n`nullable`: 表示修饰的属性或参数可以为空\n\n`nonnull`:非空，表示修饰的属性或参数不能为空\n\n**注意：`nonnull`，`nullable`只能修饰对象，不能修饰基本数据类型**\n\n3\b种写法：\n\n```OC\n@property (nonatomic, strong, nullable) NSString * name;\n@property (nonatomic, strong) NSString *_Nullable name;\n@property (nonatomic, strong) NSString *__nullable name;\n//\n@property (nonatomic, strong, nonnull) NSString * price;\n@property (nonatomic, strong) NSString *_Nullable name;\n@property (nonatomic, strong) NSString *__nullable name;\n```\n\n### 在方法中使用`nullable`和`nonnull`\n\n```OC\n- (nullable NSString *)buyBook:(nullable NSString *)book;\n- (NSString *__nullable)buyBook:( NSString *__nullable)book;\n- (NSString *_Nullable)buyBook:( NSString *_Nullable)book;\n```\n\n### `Nonnull`区域设置(Audited Regions)\n\n宏定义\n\n```OC\nNS_ASSUME_NONNULL_BEGIN\n@property (nonatomic, strong) NSString * name;\n...\nNS_ASSUME_NONNULL_END\n```\n\n之间定义的所有属性和方法参数和返回值默认加上`nonnull`修饰\n\n为了**安全**起见，苹果还制定了几条**规则**：\n\n> 1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。  \n> 2.复杂的指针类型(如id)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用`__nullable id * __nonnull`。  \n> 3.我们经常使用的`NSError` 通常是被假定为一个指向nullable NSError对象的nullable指针。\n\n### null_resettable\n\n**`null_resettable`: get方法:不能返回为空，set方法可以为空**\n\n```OC\n @property (nonatomic, strong, null_resettable) NSNumber * number;\n```\n\n当属性策略中使用了`null_resettable`修饰，就必须保证该属性的get方法返回不为空，否则编译器会如上图那样报警告⚠️。可以在set方法或get方法中做非空处理，以下是在get方法中做处理：\n\n```OC\n- (NSNumber *)number {\n    if (_number == nil) {\n        _number = @11;\n    }\n    return _number;\n}\n```\n\n### null_unspecified\n\n**`null_unspecified`:不确定是否为空,使用方式有三种：**\n\n```OC\n// 方法一\n@property(nonatomic,strong) NSNumber *_Null_unspecified height;\n// 方法二\n@property(nonatomic,strong) NSNumber *__null_unspecified height;\n// 方法三\n@property(nonatomic,strong,null_unspecified) NSNumber * height;\n```\n","slug":"iOS/OC-Keywords","published":1,"updated":"2021-06-22T07:14:19.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zc000jj036aw59ejr0","content":"<blockquote>\n<p>关键字 <code>nullable</code> <code>nonnull</code> 【未完】</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><h2 id=\"nullable和nonnull\"><a href=\"#nullable和nonnull\" class=\"headerlink\" title=\"nullable和nonnull\"></a><code>nullable</code>和<code>nonnull</code></h2><p>iOS9新出的关键字：用来修饰属性 方法的参数和返回值</p>\n<h3 id=\"在属性中使用nullable和nonnull\"><a href=\"#在属性中使用nullable和nonnull\" class=\"headerlink\" title=\"在属性中使用nullable和nonnull\"></a>在属性中使用<code>nullable</code>和<code>nonnull</code></h3><p><code>nullable</code>: 表示修饰的属性或参数可以为空</p>\n<p><code>nonnull</code>:非空，表示修饰的属性或参数不能为空</p>\n<p><strong>注意：<code>nonnull</code>，<code>nullable</code>只能修饰对象，不能修饰基本数据类型</strong></p>\n<p>3\b种写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, nullable) NSString * name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *_Nullable name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *__nullable name;</span><br><span class=\"line\">//</span><br><span class=\"line\">@property (nonatomic, strong, nonnull) NSString * price;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *_Nullable name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *__nullable name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在方法中使用nullable和nonnull\"><a href=\"#在方法中使用nullable和nonnull\" class=\"headerlink\" title=\"在方法中使用nullable和nonnull\"></a>在方法中使用<code>nullable</code>和<code>nonnull</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (nullable NSString *)buyBook:(nullable NSString *)book;</span><br><span class=\"line\">- (NSString *__nullable)buyBook:( NSString *__nullable)book;</span><br><span class=\"line\">- (NSString *_Nullable)buyBook:( NSString *_Nullable)book;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nonnull区域设置-Audited-Regions\"><a href=\"#Nonnull区域设置-Audited-Regions\" class=\"headerlink\" title=\"Nonnull区域设置(Audited Regions)\"></a><code>Nonnull</code>区域设置(Audited Regions)</h3><p>宏定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NS_ASSUME_NONNULL_BEGIN</span><br><span class=\"line\">@property (nonatomic, strong) NSString * name;</span><br><span class=\"line\">...</span><br><span class=\"line\">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure>\n\n<p>之间定义的所有属性和方法参数和返回值默认加上<code>nonnull</code>修饰</p>\n<p>为了<strong>安全</strong>起见，苹果还制定了几条<strong>规则</strong>：</p>\n<blockquote>\n<p>1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。<br>2.复杂的指针类型(如id)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用<code>__nullable id * __nonnull</code>。<br>3.我们经常使用的<code>NSError</code> 通常是被假定为一个指向nullable NSError对象的nullable指针。</p>\n</blockquote>\n<h3 id=\"null-resettable\"><a href=\"#null-resettable\" class=\"headerlink\" title=\"null_resettable\"></a>null_resettable</h3><p><strong><code>null_resettable</code>: get方法:不能返回为空，set方法可以为空</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, null_resettable) NSNumber * number;</span><br></pre></td></tr></table></figure>\n\n<p>当属性策略中使用了<code>null_resettable</code>修饰，就必须保证该属性的get方法返回不为空，否则编译器会如上图那样报警告⚠️。可以在set方法或get方法中做非空处理，以下是在get方法中做处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSNumber *)number &#123;</span><br><span class=\"line\">    if (_number == nil) &#123;</span><br><span class=\"line\">        _number = @11;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"null-unspecified\"><a href=\"#null-unspecified\" class=\"headerlink\" title=\"null_unspecified\"></a>null_unspecified</h3><p><strong><code>null_unspecified</code>:不确定是否为空,使用方式有三种：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法一</span><br><span class=\"line\">@property(nonatomic,strong) NSNumber *_Null_unspecified height;</span><br><span class=\"line\">// 方法二</span><br><span class=\"line\">@property(nonatomic,strong) NSNumber *__null_unspecified height;</span><br><span class=\"line\">// 方法三</span><br><span class=\"line\">@property(nonatomic,strong,null_unspecified) NSNumber * height;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>关键字 <code>nullable</code> <code>nonnull</code> 【未完】</p>\n</blockquote>","more":"<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><h2 id=\"nullable和nonnull\"><a href=\"#nullable和nonnull\" class=\"headerlink\" title=\"nullable和nonnull\"></a><code>nullable</code>和<code>nonnull</code></h2><p>iOS9新出的关键字：用来修饰属性 方法的参数和返回值</p>\n<h3 id=\"在属性中使用nullable和nonnull\"><a href=\"#在属性中使用nullable和nonnull\" class=\"headerlink\" title=\"在属性中使用nullable和nonnull\"></a>在属性中使用<code>nullable</code>和<code>nonnull</code></h3><p><code>nullable</code>: 表示修饰的属性或参数可以为空</p>\n<p><code>nonnull</code>:非空，表示修饰的属性或参数不能为空</p>\n<p><strong>注意：<code>nonnull</code>，<code>nullable</code>只能修饰对象，不能修饰基本数据类型</strong></p>\n<p>3\b种写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, nullable) NSString * name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *_Nullable name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *__nullable name;</span><br><span class=\"line\">//</span><br><span class=\"line\">@property (nonatomic, strong, nonnull) NSString * price;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *_Nullable name;</span><br><span class=\"line\">@property (nonatomic, strong) NSString *__nullable name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在方法中使用nullable和nonnull\"><a href=\"#在方法中使用nullable和nonnull\" class=\"headerlink\" title=\"在方法中使用nullable和nonnull\"></a>在方法中使用<code>nullable</code>和<code>nonnull</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (nullable NSString *)buyBook:(nullable NSString *)book;</span><br><span class=\"line\">- (NSString *__nullable)buyBook:( NSString *__nullable)book;</span><br><span class=\"line\">- (NSString *_Nullable)buyBook:( NSString *_Nullable)book;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nonnull区域设置-Audited-Regions\"><a href=\"#Nonnull区域设置-Audited-Regions\" class=\"headerlink\" title=\"Nonnull区域设置(Audited Regions)\"></a><code>Nonnull</code>区域设置(Audited Regions)</h3><p>宏定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NS_ASSUME_NONNULL_BEGIN</span><br><span class=\"line\">@property (nonatomic, strong) NSString * name;</span><br><span class=\"line\">...</span><br><span class=\"line\">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure>\n\n<p>之间定义的所有属性和方法参数和返回值默认加上<code>nonnull</code>修饰</p>\n<p>为了<strong>安全</strong>起见，苹果还制定了几条<strong>规则</strong>：</p>\n<blockquote>\n<p>1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。<br>2.复杂的指针类型(如id)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用<code>__nullable id * __nonnull</code>。<br>3.我们经常使用的<code>NSError</code> 通常是被假定为一个指向nullable NSError对象的nullable指针。</p>\n</blockquote>\n<h3 id=\"null-resettable\"><a href=\"#null-resettable\" class=\"headerlink\" title=\"null_resettable\"></a>null_resettable</h3><p><strong><code>null_resettable</code>: get方法:不能返回为空，set方法可以为空</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, strong, null_resettable) NSNumber * number;</span><br></pre></td></tr></table></figure>\n\n<p>当属性策略中使用了<code>null_resettable</code>修饰，就必须保证该属性的get方法返回不为空，否则编译器会如上图那样报警告⚠️。可以在set方法或get方法中做非空处理，以下是在get方法中做处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSNumber *)number &#123;</span><br><span class=\"line\">    if (_number == nil) &#123;</span><br><span class=\"line\">        _number = @11;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"null-unspecified\"><a href=\"#null-unspecified\" class=\"headerlink\" title=\"null_unspecified\"></a>null_unspecified</h3><p><strong><code>null_unspecified</code>:不确定是否为空,使用方式有三种：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法一</span><br><span class=\"line\">@property(nonatomic,strong) NSNumber *_Null_unspecified height;</span><br><span class=\"line\">// 方法二</span><br><span class=\"line\">@property(nonatomic,strong) NSNumber *__null_unspecified height;</span><br><span class=\"line\">// 方法三</span><br><span class=\"line\">@property(nonatomic,strong,null_unspecified) NSNumber * height;</span><br></pre></td></tr></table></figure>"},{"title":"Xcode工具","date":"2018-12-16T14:12:51.000Z","_content":"\n1.查找未使用的Objective-C导入。\n\n### [fui](https://github.com/dblock/fui)\n\n```shell\ngem install fui  // 安装\n\nfui help  // 帮助\n\nfui find  // 在当前目录中查找未使用的类\n```\n\n2.一键查找Xcode中所有中文\n\n![图片](https://upload-images.jianshu.io/upload_images/1282916-2d99682ee717dc66.png)\n\n按如图所示，点击，然后输入：\n\n`@\"[\"]*[\\u4E00-\\u9FA5]+[\"\\n]*?\"`\n\n进行搜索\n\n3.自定义代码块\n\n创建代码块\n\n> 代码编辑区右击 -> Create Code Snippet\n\n删除代码块\n\n> 选中要删除的代码块，按键delete，确定Delete\n\n参数规则\n\n```oc\n<#param#>\n```\n\n**`Xcode`自定义代码块位置**\n\n>~/Library/Developer/Xcode/UserData/CodeSnippets\n\n定义过的代码块，可拷贝到该目录下使用，或者在这个文件夹下建一个Git仓库，到哪都可以用。\n\n<https://github.com/hutaol/XcodeCodeSnippet>","source":"_posts/iOS/Xcode工具.md","raw":"---\ntitle: Xcode工具\ndate: 2018-12-16 22:12:51\ntags:\ncategories: Xcode\n---\n\n1.查找未使用的Objective-C导入。\n\n### [fui](https://github.com/dblock/fui)\n\n```shell\ngem install fui  // 安装\n\nfui help  // 帮助\n\nfui find  // 在当前目录中查找未使用的类\n```\n\n2.一键查找Xcode中所有中文\n\n![图片](https://upload-images.jianshu.io/upload_images/1282916-2d99682ee717dc66.png)\n\n按如图所示，点击，然后输入：\n\n`@\"[\"]*[\\u4E00-\\u9FA5]+[\"\\n]*?\"`\n\n进行搜索\n\n3.自定义代码块\n\n创建代码块\n\n> 代码编辑区右击 -> Create Code Snippet\n\n删除代码块\n\n> 选中要删除的代码块，按键delete，确定Delete\n\n参数规则\n\n```oc\n<#param#>\n```\n\n**`Xcode`自定义代码块位置**\n\n>~/Library/Developer/Xcode/UserData/CodeSnippets\n\n定义过的代码块，可拷贝到该目录下使用，或者在这个文件夹下建一个Git仓库，到哪都可以用。\n\n<https://github.com/hutaol/XcodeCodeSnippet>","slug":"iOS/Xcode工具","published":1,"updated":"2023-06-28T17:34:02.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zd000nj036agh7br11","content":"<p>1.查找未使用的Objective-C导入。</p>\n<h3 id=\"fui\"><a href=\"#fui\" class=\"headerlink\" title=\"fui\"></a><a href=\"https://github.com/dblock/fui\">fui</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install fui  // 安装</span><br><span class=\"line\"></span><br><span class=\"line\">fui help  // 帮助</span><br><span class=\"line\"></span><br><span class=\"line\">fui find  // 在当前目录中查找未使用的类</span><br></pre></td></tr></table></figure>\n\n<p>2.一键查找Xcode中所有中文</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1282916-2d99682ee717dc66.png\" alt=\"图片\"></p>\n<p>按如图所示，点击，然后输入：</p>\n<p><code>@&quot;[&quot;]*[\\u4E00-\\u9FA5]+[&quot;\\n]*?&quot;</code></p>\n<p>进行搜索</p>\n<p>3.自定义代码块</p>\n<p>创建代码块</p>\n<blockquote>\n<p>代码编辑区右击 -&gt; Create Code Snippet</p>\n</blockquote>\n<p>删除代码块</p>\n<blockquote>\n<p>选中要删除的代码块，按键delete，确定Delete</p>\n</blockquote>\n<p>参数规则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;#param#&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>Xcode</code>自定义代码块位置</strong></p>\n<blockquote>\n<p>~/Library/Developer/Xcode/UserData/CodeSnippets</p>\n</blockquote>\n<p>定义过的代码块，可拷贝到该目录下使用，或者在这个文件夹下建一个Git仓库，到哪都可以用。</p>\n<p><a href=\"https://github.com/hutaol/XcodeCodeSnippet\">https://github.com/hutaol/XcodeCodeSnippet</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.查找未使用的Objective-C导入。</p>\n<h3 id=\"fui\"><a href=\"#fui\" class=\"headerlink\" title=\"fui\"></a><a href=\"https://github.com/dblock/fui\">fui</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install fui  // 安装</span><br><span class=\"line\"></span><br><span class=\"line\">fui help  // 帮助</span><br><span class=\"line\"></span><br><span class=\"line\">fui find  // 在当前目录中查找未使用的类</span><br></pre></td></tr></table></figure>\n\n<p>2.一键查找Xcode中所有中文</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1282916-2d99682ee717dc66.png\" alt=\"图片\"></p>\n<p>按如图所示，点击，然后输入：</p>\n<p><code>@&quot;[&quot;]*[\\u4E00-\\u9FA5]+[&quot;\\n]*?&quot;</code></p>\n<p>进行搜索</p>\n<p>3.自定义代码块</p>\n<p>创建代码块</p>\n<blockquote>\n<p>代码编辑区右击 -&gt; Create Code Snippet</p>\n</blockquote>\n<p>删除代码块</p>\n<blockquote>\n<p>选中要删除的代码块，按键delete，确定Delete</p>\n</blockquote>\n<p>参数规则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;#param#&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>Xcode</code>自定义代码块位置</strong></p>\n<blockquote>\n<p>~/Library/Developer/Xcode/UserData/CodeSnippets</p>\n</blockquote>\n<p>定义过的代码块，可拷贝到该目录下使用，或者在这个文件夹下建一个Git仓库，到哪都可以用。</p>\n<p><a href=\"https://github.com/hutaol/XcodeCodeSnippet\">https://github.com/hutaol/XcodeCodeSnippet</a></p>\n"},{"title":"OC-Property","date":"2018-12-19T05:19:32.000Z","_content":"\n## 属性 @property\n\n@property = 实例变量 + get方法 + set方法\n\n<!-- more -->\n\nExample\n\n```OC\n@property (nonatomic, copy) NSString *name;\n```\n\n属性name生成的setter方法\n\n```OC\n- (void)setName:(NSString *)name;\n\n// rewrite setter\n- (void)setName:(NSString *)name {\n    _name = name;\n}\n```\n\n属性name生成的getter方法\n\n```OC\n- (NSString *)name;\n\n// rewrite getter\n- (NSString *)name {\n    return _name;\n}\n```\n\n### 自动合成\n\n> 定义一个@property，在*编译*期间，编译器会*自动*生成*\b实例变量*、*getter方法*、*setter方法*，这些方法、变量是通过*自动合成*（`autosynthesize`）的方式生成并添加到类中。\n实际上，一个类经过编译后，会生成变量列表`ivar_list`和\b方法列表`method_list`，每添加\b一个属性，在\b变量列表`ivar_list`会添加对应的*\b变量*，方法列表`method_list\b`会添加对应的*setter*方法和*getter*方法。\n\n\b对应的代码：\n\n```OC\n@synthesize name = _name;\n```\n\n编译器自动生成，无需手动添加\n\n### 动态合成\n\n```OC\n@dynamic sex;\n```\n\n这样代码告诉编译器，sex属性的变量名、getter方法、setter方法由开发者自己来添加，编译器无需处理。\n\n\b**特别注明：**\n> `getter方法中不能用self.,会造成死循环`\n\n```OC\n- (NSString *)name {\n    return self.name;  // 错误的写法，会造成死循环\n}\n```\n\n`self.name`实际上就是执行了属性name的getter方法，getter方法中又调用了`self.name`，会一直递归调用，直到程序崩溃\n\n```OC\nself.name = @\"aaa\";\n```\n\n这样的方式，setter方法会被调用。\n\n### @property修饰符\n\n修饰符有四种：\n\n> 1. 原子性：`nonatomic`、`atomic`：不能绝对保证线程安全，会耗费一些性能，默认`nonatomic`\n> 2. 读写权限：`readwrite`、`readonly` 默认`readwrite`\n> 3. 内存管理：`assign`、`strong`、`weak`、`copy`、`unsafe_unretained`\n> 4. set、get方法名\n> 5. 可为空 nullable、nonnull\n\n### nonatomic非原子性 atomic原子性\n\n不写默认是`atomic`原子性\n\n*区别*：系统自动生成的getter/setter方法不一样。\n\n`atomic`的属性，系统生成的getter/setter会保证get、set操作的完整性，不受其他线程的影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。\n\n`nonatomic`的属性，没有这个保证，`nonatomic`的速度要比`atomic`快\n\n`atomic`并不能保证线程安全。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。\n\n保证数据完整性——这个多线程编程的最大挑战之一\n\n### assign\n\n`assion`用于非指针变量。基础数据类型（例如NSInteger）和C数据类型（int、float、double、char等），以及id类型。\n\n用于对基本数据类型进行复制操作，不更改引用计数。也可以用来修饰对象，但是\b，被`assign`修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为nil，成为野指针。如果后续在分配到堆上的\b某块内存时，正好分到这块内存，程序就会crash。之说以可以修饰基本数据类型，因为基本数据类型一般分配到栈上，栈的内存会由系统自动处理，不会造成野指针。\n\n### weak\n\n`weak`修饰Object类型，ARC下修饰delegate属性\n\n在ARC环境下，所有指向这个对象的weak指针都将被置为nil。\n修饰Object类型，修饰的对象在释放后，指针\b地址会被置为nil，是\b\b一种弱\b\n","source":"_posts/iOS/OC-Property.md","raw":"---\ntitle: OC-Property\ndate: 2018-12-19 13:19:32\ntags: OC\ncategories: Objective-C\n---\n\n## 属性 @property\n\n@property = 实例变量 + get方法 + set方法\n\n<!-- more -->\n\nExample\n\n```OC\n@property (nonatomic, copy) NSString *name;\n```\n\n属性name生成的setter方法\n\n```OC\n- (void)setName:(NSString *)name;\n\n// rewrite setter\n- (void)setName:(NSString *)name {\n    _name = name;\n}\n```\n\n属性name生成的getter方法\n\n```OC\n- (NSString *)name;\n\n// rewrite getter\n- (NSString *)name {\n    return _name;\n}\n```\n\n### 自动合成\n\n> 定义一个@property，在*编译*期间，编译器会*自动*生成*\b实例变量*、*getter方法*、*setter方法*，这些方法、变量是通过*自动合成*（`autosynthesize`）的方式生成并添加到类中。\n实际上，一个类经过编译后，会生成变量列表`ivar_list`和\b方法列表`method_list`，每添加\b一个属性，在\b变量列表`ivar_list`会添加对应的*\b变量*，方法列表`method_list\b`会添加对应的*setter*方法和*getter*方法。\n\n\b对应的代码：\n\n```OC\n@synthesize name = _name;\n```\n\n编译器自动生成，无需手动添加\n\n### 动态合成\n\n```OC\n@dynamic sex;\n```\n\n这样代码告诉编译器，sex属性的变量名、getter方法、setter方法由开发者自己来添加，编译器无需处理。\n\n\b**特别注明：**\n> `getter方法中不能用self.,会造成死循环`\n\n```OC\n- (NSString *)name {\n    return self.name;  // 错误的写法，会造成死循环\n}\n```\n\n`self.name`实际上就是执行了属性name的getter方法，getter方法中又调用了`self.name`，会一直递归调用，直到程序崩溃\n\n```OC\nself.name = @\"aaa\";\n```\n\n这样的方式，setter方法会被调用。\n\n### @property修饰符\n\n修饰符有四种：\n\n> 1. 原子性：`nonatomic`、`atomic`：不能绝对保证线程安全，会耗费一些性能，默认`nonatomic`\n> 2. 读写权限：`readwrite`、`readonly` 默认`readwrite`\n> 3. 内存管理：`assign`、`strong`、`weak`、`copy`、`unsafe_unretained`\n> 4. set、get方法名\n> 5. 可为空 nullable、nonnull\n\n### nonatomic非原子性 atomic原子性\n\n不写默认是`atomic`原子性\n\n*区别*：系统自动生成的getter/setter方法不一样。\n\n`atomic`的属性，系统生成的getter/setter会保证get、set操作的完整性，不受其他线程的影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。\n\n`nonatomic`的属性，没有这个保证，`nonatomic`的速度要比`atomic`快\n\n`atomic`并不能保证线程安全。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。\n\n保证数据完整性——这个多线程编程的最大挑战之一\n\n### assign\n\n`assion`用于非指针变量。基础数据类型（例如NSInteger）和C数据类型（int、float、double、char等），以及id类型。\n\n用于对基本数据类型进行复制操作，不更改引用计数。也可以用来修饰对象，但是\b，被`assign`修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为nil，成为野指针。如果后续在分配到堆上的\b某块内存时，正好分到这块内存，程序就会crash。之说以可以修饰基本数据类型，因为基本数据类型一般分配到栈上，栈的内存会由系统自动处理，不会造成野指针。\n\n### weak\n\n`weak`修饰Object类型，ARC下修饰delegate属性\n\n在ARC环境下，所有指向这个对象的weak指针都将被置为nil。\n修饰Object类型，修饰的对象在释放后，指针\b地址会被置为nil，是\b\b一种弱\b\n","slug":"iOS/OC-Property","published":1,"updated":"2021-06-22T07:14:19.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3ze000pj0361m3m05wf","content":"<h2 id=\"属性-property\"><a href=\"#属性-property\" class=\"headerlink\" title=\"属性 @property\"></a>属性 @property</h2><p>@property = 实例变量 + get方法 + set方法</p>\n<span id=\"more\"></span>\n\n<p>Example</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *name;</span><br></pre></td></tr></table></figure>\n\n<p>属性name生成的setter方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setName:(NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">// rewrite setter</span><br><span class=\"line\">- (void)setName:(NSString *)name &#123;</span><br><span class=\"line\">    _name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>属性name生成的getter方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">// rewrite getter</span><br><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return _name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动合成\"><a href=\"#自动合成\" class=\"headerlink\" title=\"自动合成\"></a>自动合成</h3><blockquote>\n<p>定义一个@property，在<em>编译</em>期间，编译器会<em>自动</em>生成<em>\b实例变量</em>、<em>getter方法</em>、<em>setter方法</em>，这些方法、变量是通过<em>自动合成</em>（<code>autosynthesize</code>）的方式生成并添加到类中。<br>实际上，一个类经过编译后，会生成变量列表<code>ivar_list</code>和\b方法列表<code>method_list</code>，每添加\b一个属性，在\b变量列表<code>ivar_list</code>会添加对应的<em>\b变量</em>，方法列表<code>method_list\b</code>会添加对应的<em>setter</em>方法和<em>getter</em>方法。</p>\n</blockquote>\n<p>\b对应的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@synthesize name = _name;</span><br></pre></td></tr></table></figure>\n\n<p>编译器自动生成，无需手动添加</p>\n<h3 id=\"动态合成\"><a href=\"#动态合成\" class=\"headerlink\" title=\"动态合成\"></a>动态合成</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@dynamic sex;</span><br></pre></td></tr></table></figure>\n\n<p>这样代码告诉编译器，sex属性的变量名、getter方法、setter方法由开发者自己来添加，编译器无需处理。</p>\n<p>\b<strong>特别注明：</strong></p>\n<blockquote>\n<p><code>getter方法中不能用self.,会造成死循环</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return self.name;  // 错误的写法，会造成死循环</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>self.name</code>实际上就是执行了属性name的getter方法，getter方法中又调用了<code>self.name</code>，会一直递归调用，直到程序崩溃</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.name = @&quot;aaa&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>这样的方式，setter方法会被调用。</p>\n<h3 id=\"property修饰符\"><a href=\"#property修饰符\" class=\"headerlink\" title=\"@property修饰符\"></a>@property修饰符</h3><p>修饰符有四种：</p>\n<blockquote>\n<ol>\n<li>原子性：<code>nonatomic</code>、<code>atomic</code>：不能绝对保证线程安全，会耗费一些性能，默认<code>nonatomic</code></li>\n<li>读写权限：<code>readwrite</code>、<code>readonly</code> 默认<code>readwrite</code></li>\n<li>内存管理：<code>assign</code>、<code>strong</code>、<code>weak</code>、<code>copy</code>、<code>unsafe_unretained</code></li>\n<li>set、get方法名</li>\n<li>可为空 nullable、nonnull</li>\n</ol>\n</blockquote>\n<h3 id=\"nonatomic非原子性-atomic原子性\"><a href=\"#nonatomic非原子性-atomic原子性\" class=\"headerlink\" title=\"nonatomic非原子性 atomic原子性\"></a>nonatomic非原子性 atomic原子性</h3><p>不写默认是<code>atomic</code>原子性</p>\n<p><em>区别</em>：系统自动生成的getter/setter方法不一样。</p>\n<p><code>atomic</code>的属性，系统生成的getter/setter会保证get、set操作的完整性，不受其他线程的影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。</p>\n<p><code>nonatomic</code>的属性，没有这个保证，<code>nonatomic</code>的速度要比<code>atomic</code>快</p>\n<p><code>atomic</code>并不能保证线程安全。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。</p>\n<p>保证数据完整性——这个多线程编程的最大挑战之一</p>\n<h3 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"assign\"></a>assign</h3><p><code>assion</code>用于非指针变量。基础数据类型（例如NSInteger）和C数据类型（int、float、double、char等），以及id类型。</p>\n<p>用于对基本数据类型进行复制操作，不更改引用计数。也可以用来修饰对象，但是\b，被<code>assign</code>修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为nil，成为野指针。如果后续在分配到堆上的\b某块内存时，正好分到这块内存，程序就会crash。之说以可以修饰基本数据类型，因为基本数据类型一般分配到栈上，栈的内存会由系统自动处理，不会造成野指针。</p>\n<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p><code>weak</code>修饰Object类型，ARC下修饰delegate属性</p>\n<p>在ARC环境下，所有指向这个对象的weak指针都将被置为nil。<br>修饰Object类型，修饰的对象在释放后，指针\b地址会被置为nil，是\b\b一种弱\b</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"属性-property\"><a href=\"#属性-property\" class=\"headerlink\" title=\"属性 @property\"></a>属性 @property</h2><p>@property = 实例变量 + get方法 + set方法</p>","more":"<p>Example</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, copy) NSString *name;</span><br></pre></td></tr></table></figure>\n\n<p>属性name生成的setter方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setName:(NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">// rewrite setter</span><br><span class=\"line\">- (void)setName:(NSString *)name &#123;</span><br><span class=\"line\">    _name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>属性name生成的getter方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name;</span><br><span class=\"line\"></span><br><span class=\"line\">// rewrite getter</span><br><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return _name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动合成\"><a href=\"#自动合成\" class=\"headerlink\" title=\"自动合成\"></a>自动合成</h3><blockquote>\n<p>定义一个@property，在<em>编译</em>期间，编译器会<em>自动</em>生成<em>\b实例变量</em>、<em>getter方法</em>、<em>setter方法</em>，这些方法、变量是通过<em>自动合成</em>（<code>autosynthesize</code>）的方式生成并添加到类中。<br>实际上，一个类经过编译后，会生成变量列表<code>ivar_list</code>和\b方法列表<code>method_list</code>，每添加\b一个属性，在\b变量列表<code>ivar_list</code>会添加对应的<em>\b变量</em>，方法列表<code>method_list\b</code>会添加对应的<em>setter</em>方法和<em>getter</em>方法。</p>\n</blockquote>\n<p>\b对应的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@synthesize name = _name;</span><br></pre></td></tr></table></figure>\n\n<p>编译器自动生成，无需手动添加</p>\n<h3 id=\"动态合成\"><a href=\"#动态合成\" class=\"headerlink\" title=\"动态合成\"></a>动态合成</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@dynamic sex;</span><br></pre></td></tr></table></figure>\n\n<p>这样代码告诉编译器，sex属性的变量名、getter方法、setter方法由开发者自己来添加，编译器无需处理。</p>\n<p>\b<strong>特别注明：</strong></p>\n<blockquote>\n<p><code>getter方法中不能用self.,会造成死循环</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (NSString *)name &#123;</span><br><span class=\"line\">    return self.name;  // 错误的写法，会造成死循环</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>self.name</code>实际上就是执行了属性name的getter方法，getter方法中又调用了<code>self.name</code>，会一直递归调用，直到程序崩溃</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.name = @&quot;aaa&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>这样的方式，setter方法会被调用。</p>\n<h3 id=\"property修饰符\"><a href=\"#property修饰符\" class=\"headerlink\" title=\"@property修饰符\"></a>@property修饰符</h3><p>修饰符有四种：</p>\n<blockquote>\n<ol>\n<li>原子性：<code>nonatomic</code>、<code>atomic</code>：不能绝对保证线程安全，会耗费一些性能，默认<code>nonatomic</code></li>\n<li>读写权限：<code>readwrite</code>、<code>readonly</code> 默认<code>readwrite</code></li>\n<li>内存管理：<code>assign</code>、<code>strong</code>、<code>weak</code>、<code>copy</code>、<code>unsafe_unretained</code></li>\n<li>set、get方法名</li>\n<li>可为空 nullable、nonnull</li>\n</ol>\n</blockquote>\n<h3 id=\"nonatomic非原子性-atomic原子性\"><a href=\"#nonatomic非原子性-atomic原子性\" class=\"headerlink\" title=\"nonatomic非原子性 atomic原子性\"></a>nonatomic非原子性 atomic原子性</h3><p>不写默认是<code>atomic</code>原子性</p>\n<p><em>区别</em>：系统自动生成的getter/setter方法不一样。</p>\n<p><code>atomic</code>的属性，系统生成的getter/setter会保证get、set操作的完整性，不受其他线程的影响。比如，线程 A 的 getter 方法运行到一半，线程 B 调用了 setter：那么线程 A 的 getter 还是能得到一个完好无损的对象。</p>\n<p><code>nonatomic</code>的属性，没有这个保证，<code>nonatomic</code>的速度要比<code>atomic</code>快</p>\n<p><code>atomic</code>并不能保证线程安全。如果线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能：可能是 B、C set 之前原始的值，也可能是 B set 的值，也可能是 C set 的值。同时，最终这个属性的值，可能是 B set 的值，也有可能是 C set 的值。</p>\n<p>保证数据完整性——这个多线程编程的最大挑战之一</p>\n<h3 id=\"assign\"><a href=\"#assign\" class=\"headerlink\" title=\"assign\"></a>assign</h3><p><code>assion</code>用于非指针变量。基础数据类型（例如NSInteger）和C数据类型（int、float、double、char等），以及id类型。</p>\n<p>用于对基本数据类型进行复制操作，不更改引用计数。也可以用来修饰对象，但是\b，被<code>assign</code>修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为nil，成为野指针。如果后续在分配到堆上的\b某块内存时，正好分到这块内存，程序就会crash。之说以可以修饰基本数据类型，因为基本数据类型一般分配到栈上，栈的内存会由系统自动处理，不会造成野指针。</p>\n<h3 id=\"weak\"><a href=\"#weak\" class=\"headerlink\" title=\"weak\"></a>weak</h3><p><code>weak</code>修饰Object类型，ARC下修饰delegate属性</p>\n<p>在ARC环境下，所有指向这个对象的weak指针都将被置为nil。<br>修饰Object类型，修饰的对象在释放后，指针\b地址会被置为nil，是\b\b一种弱\b</p>"},{"title":"iOS-Runtime","date":"2022-11-08T08:48:00.000Z","_content":"\n## 1.动态添加属性","source":"_posts/iOS/iOS-Runtime.md","raw":"---\ntitle: iOS-Runtime\ndate: 2022-11-08 16:48:00\ntags: iOS\n---\n\n## 1.动态添加属性","slug":"iOS/iOS-Runtime","published":1,"updated":"2022-11-11T06:54:45.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zf000rj0365tlocfj9","content":"<h2 id=\"1-动态添加属性\"><a href=\"#1-动态添加属性\" class=\"headerlink\" title=\"1.动态添加属性\"></a>1.动态添加属性</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-动态添加属性\"><a href=\"#1-动态添加属性\" class=\"headerlink\" title=\"1.动态添加属性\"></a>1.动态添加属性</h2>"},{"title":"iOS三方库","date":"2022-10-14T06:16:19.000Z","_content":"\n## iOS三方库\n\n<!-- more -->\n\n网络请求\n\n[AFNetworking](https://github.com/AFNetworking/AFNetworking) OC\n[Alamofire](https://github.com/Alamofire/Alamofire) Swift\n\n图片加载\n\n[SDWebImage](https://github.com/SDWebImage/SDWebImage) oc\n[Kingfisher](https://github.com/onevcat/Kingfisher) swift\n\n自动布局约束\n\n[Masonry](https://github.com/SnapKit/Masonry) OC\n[SnapKit](https://github.com/SnapKit/SnapKit) Swift\n\n下拉刷新上拉加载\n\n[MJRefresh](https://github.com/CoderMJLee/MJRefresh)\n\n模型转换\n\n[MJExtension](https://github.com/CoderMJLee/MJExtension) oc\n[JSONModel](https://github.com/jsonmodel/jsonmodel) oc\n\nJSON解析\n\n[SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) swift\n\n扩展\n\n[SwifterSwift](https://github.com/SwifterSwift/SwifterSwift)\n\nSVG加载库\n\n[SVGKit](https://github.com/SVGKit/SVGKit)  (v3.0.0某些svg图会有显示不出来问题)\n\n例如：`SVGKit`v3.0.0, 图片![背景](../../assets/svg/bg.svg)\n\n```oc\nSVGKImage *image = [SVGKImage imageNamed:@\"bg.svg\"];\nself.imageView.image = image.UIImage;\n```\n\n展示出来如下：\n![显示的背景](../../assets/svg/bg.png)\n\n基于GPU的图片或视频的处理框架\n\n[GPUImage](https://github.com/BradLarson/GPUImage)\n\n引导页：  \n\n[EAIntroView](https://github.com/ealeksandrov/EAIntroView)\n\n导航栏\n\n[HBDNavigationBar](https://github.com/listenzz/HBDNavigationBar)\n\n[WRNavigationBar](https://github.com/wangrui460/WRNavigationBar)\n\n选项卡\n\n[XLPagerTabStrip](https://github.com/xmartlabs/XLPagerTabStrip) (Swift)\n\n滑动切换滚动视图\n\n[JXCategoryView](https://github.com/pujiaxin33/JXCategoryView) (左右滑动切换)\n[JXPagingView](https://github.com/pujiaxin33/JXPagingView) (多页面嵌套，既可以上下滑动，也可以左右滑动切换页面)\n\n图片选择：  \n\n[HXPhotoPicker](https://github.com/SilenceLove/HXPhotoPicker)\n\n[ZLPhotoBrowser](https://github.com/longitachi/ZLPhotoBrowser) （4.0以下OC 4.0以上Swift）\n\n[YBImageBrowser](https://github.com/indulgeIn/YBImageBrowser)\n\n[TZImagePickerController](https://github.com/banchichen/TZImagePickerController)\n\n图片浏览器\n\n[KNPhotoBrowser](https://github.com/LuKane/KNPhotoBrowser)\n\n徽章\n\n[PPBadgeView](https://github.com/jkpang/PPBadgeView)\n\n浮窗\n\n[WMDragView](https://github.com/zhengwenming/WMDragView)\n\n弹出窗\n\n[LSTPopView](https://github.com/LoSenTrad/LSTPopView)\n\n[YBPopupMenu](https://github.com/lyb5834/YBPopupMenu)\n\n[KLCPopup](https://github.com/jmascia/KLCPopup) (横屏时有缺陷)\n\n[LNPopupController](https://github.com/LeoNatan/LNPopupController)\n\n分类集合\n\n[JXCategoryView](https://github.com/pujiaxin33/JXCategoryView)\n\n网页封装\n\n[JXBWKWebView](https://github.com/xiubojin/JXBWKWebView)\n\n表单列表\n\n[XLForm](https://github.com/xmartlabs/XLForm) (OC)  \n\n[Eureka](https://github.com/xmartlabs/Eureka)（Swift）\n\nTextField\n\n[JVFloatLabeledTextField](https://github.com/jverdi/JVFloatLabeledTextField) 输入框浮动标签提示\n\n录播图\n\n[FSPagerView](https://github.com/WenchaoD/FSPagerView) (Swift)\n\nUICollectionView\n\n[IGListKit](https://github.com/Instagram/IGListKit)\n\n搜索历史记录\n\n[PYSearch](https://github.com/ko1o/PYSearch)\n\n内购\n\n[SwiftyStoreKit](https://github.com/bizz84/SwiftyStoreKit) (Swift)\n\n[RMStore](https://github.com/robotmedia/RMStore) (OC)\n\nSwipeCell\n\n[SwipeCellKit](https://github.com/SwipeCellKit/SwipeCellKit) (Swift)\n\n权限\n\n[PermissionsKit](https://github.com/sparrowcode/PermissionsKit) (Swift)\n\nGIF图\n\n[FLAnimatedImage](https://github.com/Flipboard/FLAnimatedImage)\n\nJSON\n\n[ObjectMapper](https://github.com/tristanhimmelman/ObjectMapper) (Swift)\n\n扫描\n\n[SGQRCode](https://github.com/kingsic/SGQRCode)\n\n[LBXScan](https://github.com/MxABC/LBXScan)\n\n文本\n\n[TTTAttributedLabel](https://github.com/TTTAttributedLabel/TTTAttributedLabel)\n\n[YYText](https://github.com/ibireme/YYText)\n\n日历\n\n[FSCalendar](https://github.com/search?q=FSCalendar)\n\n本地存储\n\n[YYCache](https://github.com/ibireme/YYCache)\n\n数据库\n\n[FMDB](https://github.com/ccgus/fmdb)\n\n应用程序和扩展程序之间的消息传递(进程通讯)\n\n[MMWormhole](https://github.com/mutualmobile/MMWormhole)\n\n打印\n\n[PrintBeautifulLog](https://github.com/shixueqian/PrintBeautifulLog)\n\n图标库\n\n[图片](https://badgen.net/badge/icon/ios%209.0+?icon=apple&label)\n\n可调节大小，移动的视图\n\n[SPUserResizableView](https://github.com/spoletto/SPUserResizableView)\n\n绘图视图\n\n[ACEDrawingView](https://github.com/acerbetti/ACEDrawingView)\n\n在状态栏上显示FPS状态 检测fps滑动帧\n\n[JPFPSStatus](https://github.com/joggerplus/JPFPSStatus)\n\n视频播放器\n\n[ZFPlayer](https://github.com/renzifeng/ZFPlayer)\n\nWebView桥接\n\n[WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\nUITableViewCell自动高度计算\n\n[FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell)\n\nUICollectionView的布局，将单元格向左对齐\n\n[UICollectionViewLeftAlignedLayout](https://github.com/mokagio/UICollectionViewLeftAlignedLayout)\n\n加载框\n\n[MBProgressHUD](https://github.com/jdg/MBProgressHUD)\n\nKVO\n\n[KVOController](https://github.com/facebookarchive/KVOController)\n\n键盘\n\n[IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)\n\n列表空数据显示\n\n[DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet)\n\n崩溃记录\nBugly\n\n双滑块范围选择器\n\n[SDRangeSlider](https://github.com/Meterwhite/SDRangeSlider)\n\n无限循环图片、文字轮播器\n\n[SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView)\n","source":"_posts/iOS/iOS三方库.md","raw":"---\ntitle: iOS三方库\ndate: 2022-10-14 14:16:19\ntags: iOS\n---\n\n## iOS三方库\n\n<!-- more -->\n\n网络请求\n\n[AFNetworking](https://github.com/AFNetworking/AFNetworking) OC\n[Alamofire](https://github.com/Alamofire/Alamofire) Swift\n\n图片加载\n\n[SDWebImage](https://github.com/SDWebImage/SDWebImage) oc\n[Kingfisher](https://github.com/onevcat/Kingfisher) swift\n\n自动布局约束\n\n[Masonry](https://github.com/SnapKit/Masonry) OC\n[SnapKit](https://github.com/SnapKit/SnapKit) Swift\n\n下拉刷新上拉加载\n\n[MJRefresh](https://github.com/CoderMJLee/MJRefresh)\n\n模型转换\n\n[MJExtension](https://github.com/CoderMJLee/MJExtension) oc\n[JSONModel](https://github.com/jsonmodel/jsonmodel) oc\n\nJSON解析\n\n[SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) swift\n\n扩展\n\n[SwifterSwift](https://github.com/SwifterSwift/SwifterSwift)\n\nSVG加载库\n\n[SVGKit](https://github.com/SVGKit/SVGKit)  (v3.0.0某些svg图会有显示不出来问题)\n\n例如：`SVGKit`v3.0.0, 图片![背景](../../assets/svg/bg.svg)\n\n```oc\nSVGKImage *image = [SVGKImage imageNamed:@\"bg.svg\"];\nself.imageView.image = image.UIImage;\n```\n\n展示出来如下：\n![显示的背景](../../assets/svg/bg.png)\n\n基于GPU的图片或视频的处理框架\n\n[GPUImage](https://github.com/BradLarson/GPUImage)\n\n引导页：  \n\n[EAIntroView](https://github.com/ealeksandrov/EAIntroView)\n\n导航栏\n\n[HBDNavigationBar](https://github.com/listenzz/HBDNavigationBar)\n\n[WRNavigationBar](https://github.com/wangrui460/WRNavigationBar)\n\n选项卡\n\n[XLPagerTabStrip](https://github.com/xmartlabs/XLPagerTabStrip) (Swift)\n\n滑动切换滚动视图\n\n[JXCategoryView](https://github.com/pujiaxin33/JXCategoryView) (左右滑动切换)\n[JXPagingView](https://github.com/pujiaxin33/JXPagingView) (多页面嵌套，既可以上下滑动，也可以左右滑动切换页面)\n\n图片选择：  \n\n[HXPhotoPicker](https://github.com/SilenceLove/HXPhotoPicker)\n\n[ZLPhotoBrowser](https://github.com/longitachi/ZLPhotoBrowser) （4.0以下OC 4.0以上Swift）\n\n[YBImageBrowser](https://github.com/indulgeIn/YBImageBrowser)\n\n[TZImagePickerController](https://github.com/banchichen/TZImagePickerController)\n\n图片浏览器\n\n[KNPhotoBrowser](https://github.com/LuKane/KNPhotoBrowser)\n\n徽章\n\n[PPBadgeView](https://github.com/jkpang/PPBadgeView)\n\n浮窗\n\n[WMDragView](https://github.com/zhengwenming/WMDragView)\n\n弹出窗\n\n[LSTPopView](https://github.com/LoSenTrad/LSTPopView)\n\n[YBPopupMenu](https://github.com/lyb5834/YBPopupMenu)\n\n[KLCPopup](https://github.com/jmascia/KLCPopup) (横屏时有缺陷)\n\n[LNPopupController](https://github.com/LeoNatan/LNPopupController)\n\n分类集合\n\n[JXCategoryView](https://github.com/pujiaxin33/JXCategoryView)\n\n网页封装\n\n[JXBWKWebView](https://github.com/xiubojin/JXBWKWebView)\n\n表单列表\n\n[XLForm](https://github.com/xmartlabs/XLForm) (OC)  \n\n[Eureka](https://github.com/xmartlabs/Eureka)（Swift）\n\nTextField\n\n[JVFloatLabeledTextField](https://github.com/jverdi/JVFloatLabeledTextField) 输入框浮动标签提示\n\n录播图\n\n[FSPagerView](https://github.com/WenchaoD/FSPagerView) (Swift)\n\nUICollectionView\n\n[IGListKit](https://github.com/Instagram/IGListKit)\n\n搜索历史记录\n\n[PYSearch](https://github.com/ko1o/PYSearch)\n\n内购\n\n[SwiftyStoreKit](https://github.com/bizz84/SwiftyStoreKit) (Swift)\n\n[RMStore](https://github.com/robotmedia/RMStore) (OC)\n\nSwipeCell\n\n[SwipeCellKit](https://github.com/SwipeCellKit/SwipeCellKit) (Swift)\n\n权限\n\n[PermissionsKit](https://github.com/sparrowcode/PermissionsKit) (Swift)\n\nGIF图\n\n[FLAnimatedImage](https://github.com/Flipboard/FLAnimatedImage)\n\nJSON\n\n[ObjectMapper](https://github.com/tristanhimmelman/ObjectMapper) (Swift)\n\n扫描\n\n[SGQRCode](https://github.com/kingsic/SGQRCode)\n\n[LBXScan](https://github.com/MxABC/LBXScan)\n\n文本\n\n[TTTAttributedLabel](https://github.com/TTTAttributedLabel/TTTAttributedLabel)\n\n[YYText](https://github.com/ibireme/YYText)\n\n日历\n\n[FSCalendar](https://github.com/search?q=FSCalendar)\n\n本地存储\n\n[YYCache](https://github.com/ibireme/YYCache)\n\n数据库\n\n[FMDB](https://github.com/ccgus/fmdb)\n\n应用程序和扩展程序之间的消息传递(进程通讯)\n\n[MMWormhole](https://github.com/mutualmobile/MMWormhole)\n\n打印\n\n[PrintBeautifulLog](https://github.com/shixueqian/PrintBeautifulLog)\n\n图标库\n\n[图片](https://badgen.net/badge/icon/ios%209.0+?icon=apple&label)\n\n可调节大小，移动的视图\n\n[SPUserResizableView](https://github.com/spoletto/SPUserResizableView)\n\n绘图视图\n\n[ACEDrawingView](https://github.com/acerbetti/ACEDrawingView)\n\n在状态栏上显示FPS状态 检测fps滑动帧\n\n[JPFPSStatus](https://github.com/joggerplus/JPFPSStatus)\n\n视频播放器\n\n[ZFPlayer](https://github.com/renzifeng/ZFPlayer)\n\nWebView桥接\n\n[WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\nUITableViewCell自动高度计算\n\n[FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell)\n\nUICollectionView的布局，将单元格向左对齐\n\n[UICollectionViewLeftAlignedLayout](https://github.com/mokagio/UICollectionViewLeftAlignedLayout)\n\n加载框\n\n[MBProgressHUD](https://github.com/jdg/MBProgressHUD)\n\nKVO\n\n[KVOController](https://github.com/facebookarchive/KVOController)\n\n键盘\n\n[IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager)\n\n列表空数据显示\n\n[DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet)\n\n崩溃记录\nBugly\n\n双滑块范围选择器\n\n[SDRangeSlider](https://github.com/Meterwhite/SDRangeSlider)\n\n无限循环图片、文字轮播器\n\n[SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView)\n","slug":"iOS/iOS三方库","published":1,"updated":"2023-06-28T17:45:21.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zh000vj0368etw3xsw","content":"<h2 id=\"iOS三方库\"><a href=\"#iOS三方库\" class=\"headerlink\" title=\"iOS三方库\"></a>iOS三方库</h2><span id=\"more\"></span>\n\n<p>网络请求</p>\n<p><a href=\"https://github.com/AFNetworking/AFNetworking\">AFNetworking</a> OC<br><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a> Swift</p>\n<p>图片加载</p>\n<p><a href=\"https://github.com/SDWebImage/SDWebImage\">SDWebImage</a> oc<br><a href=\"https://github.com/onevcat/Kingfisher\">Kingfisher</a> swift</p>\n<p>自动布局约束</p>\n<p><a href=\"https://github.com/SnapKit/Masonry\">Masonry</a> OC<br><a href=\"https://github.com/SnapKit/SnapKit\">SnapKit</a> Swift</p>\n<p>下拉刷新上拉加载</p>\n<p><a href=\"https://github.com/CoderMJLee/MJRefresh\">MJRefresh</a></p>\n<p>模型转换</p>\n<p><a href=\"https://github.com/CoderMJLee/MJExtension\">MJExtension</a> oc<br><a href=\"https://github.com/jsonmodel/jsonmodel\">JSONModel</a> oc</p>\n<p>JSON解析</p>\n<p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\">SwiftyJSON</a> swift</p>\n<p>扩展</p>\n<p><a href=\"https://github.com/SwifterSwift/SwifterSwift\">SwifterSwift</a></p>\n<p>SVG加载库</p>\n<p><a href=\"https://github.com/SVGKit/SVGKit\">SVGKit</a>  (v3.0.0某些svg图会有显示不出来问题)</p>\n<p>例如：<code>SVGKit</code>v3.0.0, 图片<img src=\"../../assets/svg/bg.svg\" alt=\"背景\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SVGKImage *image = [SVGKImage imageNamed:@&quot;bg.svg&quot;];</span><br><span class=\"line\">self.imageView.image = image.UIImage;</span><br></pre></td></tr></table></figure>\n\n<p>展示出来如下：<br><img src=\"../../assets/svg/bg.png\" alt=\"显示的背景\"></p>\n<p>基于GPU的图片或视频的处理框架</p>\n<p><a href=\"https://github.com/BradLarson/GPUImage\">GPUImage</a></p>\n<p>引导页：  </p>\n<p><a href=\"https://github.com/ealeksandrov/EAIntroView\">EAIntroView</a></p>\n<p>导航栏</p>\n<p><a href=\"https://github.com/listenzz/HBDNavigationBar\">HBDNavigationBar</a></p>\n<p><a href=\"https://github.com/wangrui460/WRNavigationBar\">WRNavigationBar</a></p>\n<p>选项卡</p>\n<p><a href=\"https://github.com/xmartlabs/XLPagerTabStrip\">XLPagerTabStrip</a> (Swift)</p>\n<p>滑动切换滚动视图</p>\n<p><a href=\"https://github.com/pujiaxin33/JXCategoryView\">JXCategoryView</a> (左右滑动切换)<br><a href=\"https://github.com/pujiaxin33/JXPagingView\">JXPagingView</a> (多页面嵌套，既可以上下滑动，也可以左右滑动切换页面)</p>\n<p>图片选择：  </p>\n<p><a href=\"https://github.com/SilenceLove/HXPhotoPicker\">HXPhotoPicker</a></p>\n<p><a href=\"https://github.com/longitachi/ZLPhotoBrowser\">ZLPhotoBrowser</a> （4.0以下OC 4.0以上Swift）</p>\n<p><a href=\"https://github.com/indulgeIn/YBImageBrowser\">YBImageBrowser</a></p>\n<p><a href=\"https://github.com/banchichen/TZImagePickerController\">TZImagePickerController</a></p>\n<p>图片浏览器</p>\n<p><a href=\"https://github.com/LuKane/KNPhotoBrowser\">KNPhotoBrowser</a></p>\n<p>徽章</p>\n<p><a href=\"https://github.com/jkpang/PPBadgeView\">PPBadgeView</a></p>\n<p>浮窗</p>\n<p><a href=\"https://github.com/zhengwenming/WMDragView\">WMDragView</a></p>\n<p>弹出窗</p>\n<p><a href=\"https://github.com/LoSenTrad/LSTPopView\">LSTPopView</a></p>\n<p><a href=\"https://github.com/lyb5834/YBPopupMenu\">YBPopupMenu</a></p>\n<p><a href=\"https://github.com/jmascia/KLCPopup\">KLCPopup</a> (横屏时有缺陷)</p>\n<p><a href=\"https://github.com/LeoNatan/LNPopupController\">LNPopupController</a></p>\n<p>分类集合</p>\n<p><a href=\"https://github.com/pujiaxin33/JXCategoryView\">JXCategoryView</a></p>\n<p>网页封装</p>\n<p><a href=\"https://github.com/xiubojin/JXBWKWebView\">JXBWKWebView</a></p>\n<p>表单列表</p>\n<p><a href=\"https://github.com/xmartlabs/XLForm\">XLForm</a> (OC)  </p>\n<p><a href=\"https://github.com/xmartlabs/Eureka\">Eureka</a>（Swift）</p>\n<p>TextField</p>\n<p><a href=\"https://github.com/jverdi/JVFloatLabeledTextField\">JVFloatLabeledTextField</a> 输入框浮动标签提示</p>\n<p>录播图</p>\n<p><a href=\"https://github.com/WenchaoD/FSPagerView\">FSPagerView</a> (Swift)</p>\n<p>UICollectionView</p>\n<p><a href=\"https://github.com/Instagram/IGListKit\">IGListKit</a></p>\n<p>搜索历史记录</p>\n<p><a href=\"https://github.com/ko1o/PYSearch\">PYSearch</a></p>\n<p>内购</p>\n<p><a href=\"https://github.com/bizz84/SwiftyStoreKit\">SwiftyStoreKit</a> (Swift)</p>\n<p><a href=\"https://github.com/robotmedia/RMStore\">RMStore</a> (OC)</p>\n<p>SwipeCell</p>\n<p><a href=\"https://github.com/SwipeCellKit/SwipeCellKit\">SwipeCellKit</a> (Swift)</p>\n<p>权限</p>\n<p><a href=\"https://github.com/sparrowcode/PermissionsKit\">PermissionsKit</a> (Swift)</p>\n<p>GIF图</p>\n<p><a href=\"https://github.com/Flipboard/FLAnimatedImage\">FLAnimatedImage</a></p>\n<p>JSON</p>\n<p><a href=\"https://github.com/tristanhimmelman/ObjectMapper\">ObjectMapper</a> (Swift)</p>\n<p>扫描</p>\n<p><a href=\"https://github.com/kingsic/SGQRCode\">SGQRCode</a></p>\n<p><a href=\"https://github.com/MxABC/LBXScan\">LBXScan</a></p>\n<p>文本</p>\n<p><a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\">TTTAttributedLabel</a></p>\n<p><a href=\"https://github.com/ibireme/YYText\">YYText</a></p>\n<p>日历</p>\n<p><a href=\"https://github.com/search?q=FSCalendar\">FSCalendar</a></p>\n<p>本地存储</p>\n<p><a href=\"https://github.com/ibireme/YYCache\">YYCache</a></p>\n<p>数据库</p>\n<p><a href=\"https://github.com/ccgus/fmdb\">FMDB</a></p>\n<p>应用程序和扩展程序之间的消息传递(进程通讯)</p>\n<p><a href=\"https://github.com/mutualmobile/MMWormhole\">MMWormhole</a></p>\n<p>打印</p>\n<p><a href=\"https://github.com/shixueqian/PrintBeautifulLog\">PrintBeautifulLog</a></p>\n<p>图标库</p>\n<p><a href=\"https://badgen.net/badge/icon/ios%209.0+?icon=apple&label\">图片</a></p>\n<p>可调节大小，移动的视图</p>\n<p><a href=\"https://github.com/spoletto/SPUserResizableView\">SPUserResizableView</a></p>\n<p>绘图视图</p>\n<p><a href=\"https://github.com/acerbetti/ACEDrawingView\">ACEDrawingView</a></p>\n<p>在状态栏上显示FPS状态 检测fps滑动帧</p>\n<p><a href=\"https://github.com/joggerplus/JPFPSStatus\">JPFPSStatus</a></p>\n<p>视频播放器</p>\n<p><a href=\"https://github.com/renzifeng/ZFPlayer\">ZFPlayer</a></p>\n<p>WebView桥接</p>\n<p><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">WebViewJavascriptBridge</a></p>\n<p>UITableViewCell自动高度计算</p>\n<p><a href=\"https://github.com/forkingdog/UITableView-FDTemplateLayoutCell\">FDTemplateLayoutCell</a></p>\n<p>UICollectionView的布局，将单元格向左对齐</p>\n<p><a href=\"https://github.com/mokagio/UICollectionViewLeftAlignedLayout\">UICollectionViewLeftAlignedLayout</a></p>\n<p>加载框</p>\n<p><a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a></p>\n<p>KVO</p>\n<p><a href=\"https://github.com/facebookarchive/KVOController\">KVOController</a></p>\n<p>键盘</p>\n<p><a href=\"https://github.com/hackiftekhar/IQKeyboardManager\">IQKeyboardManager</a></p>\n<p>列表空数据显示</p>\n<p><a href=\"https://github.com/dzenbot/DZNEmptyDataSet\">DZNEmptyDataSet</a></p>\n<p>崩溃记录<br>Bugly</p>\n<p>双滑块范围选择器</p>\n<p><a href=\"https://github.com/Meterwhite/SDRangeSlider\">SDRangeSlider</a></p>\n<p>无限循环图片、文字轮播器</p>\n<p><a href=\"https://github.com/gsdios/SDCycleScrollView\">SDCycleScrollView</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"iOS三方库\"><a href=\"#iOS三方库\" class=\"headerlink\" title=\"iOS三方库\"></a>iOS三方库</h2>","more":"<p>网络请求</p>\n<p><a href=\"https://github.com/AFNetworking/AFNetworking\">AFNetworking</a> OC<br><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a> Swift</p>\n<p>图片加载</p>\n<p><a href=\"https://github.com/SDWebImage/SDWebImage\">SDWebImage</a> oc<br><a href=\"https://github.com/onevcat/Kingfisher\">Kingfisher</a> swift</p>\n<p>自动布局约束</p>\n<p><a href=\"https://github.com/SnapKit/Masonry\">Masonry</a> OC<br><a href=\"https://github.com/SnapKit/SnapKit\">SnapKit</a> Swift</p>\n<p>下拉刷新上拉加载</p>\n<p><a href=\"https://github.com/CoderMJLee/MJRefresh\">MJRefresh</a></p>\n<p>模型转换</p>\n<p><a href=\"https://github.com/CoderMJLee/MJExtension\">MJExtension</a> oc<br><a href=\"https://github.com/jsonmodel/jsonmodel\">JSONModel</a> oc</p>\n<p>JSON解析</p>\n<p><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\">SwiftyJSON</a> swift</p>\n<p>扩展</p>\n<p><a href=\"https://github.com/SwifterSwift/SwifterSwift\">SwifterSwift</a></p>\n<p>SVG加载库</p>\n<p><a href=\"https://github.com/SVGKit/SVGKit\">SVGKit</a>  (v3.0.0某些svg图会有显示不出来问题)</p>\n<p>例如：<code>SVGKit</code>v3.0.0, 图片<img src=\"../../assets/svg/bg.svg\" alt=\"背景\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SVGKImage *image = [SVGKImage imageNamed:@&quot;bg.svg&quot;];</span><br><span class=\"line\">self.imageView.image = image.UIImage;</span><br></pre></td></tr></table></figure>\n\n<p>展示出来如下：<br><img src=\"../../assets/svg/bg.png\" alt=\"显示的背景\"></p>\n<p>基于GPU的图片或视频的处理框架</p>\n<p><a href=\"https://github.com/BradLarson/GPUImage\">GPUImage</a></p>\n<p>引导页：  </p>\n<p><a href=\"https://github.com/ealeksandrov/EAIntroView\">EAIntroView</a></p>\n<p>导航栏</p>\n<p><a href=\"https://github.com/listenzz/HBDNavigationBar\">HBDNavigationBar</a></p>\n<p><a href=\"https://github.com/wangrui460/WRNavigationBar\">WRNavigationBar</a></p>\n<p>选项卡</p>\n<p><a href=\"https://github.com/xmartlabs/XLPagerTabStrip\">XLPagerTabStrip</a> (Swift)</p>\n<p>滑动切换滚动视图</p>\n<p><a href=\"https://github.com/pujiaxin33/JXCategoryView\">JXCategoryView</a> (左右滑动切换)<br><a href=\"https://github.com/pujiaxin33/JXPagingView\">JXPagingView</a> (多页面嵌套，既可以上下滑动，也可以左右滑动切换页面)</p>\n<p>图片选择：  </p>\n<p><a href=\"https://github.com/SilenceLove/HXPhotoPicker\">HXPhotoPicker</a></p>\n<p><a href=\"https://github.com/longitachi/ZLPhotoBrowser\">ZLPhotoBrowser</a> （4.0以下OC 4.0以上Swift）</p>\n<p><a href=\"https://github.com/indulgeIn/YBImageBrowser\">YBImageBrowser</a></p>\n<p><a href=\"https://github.com/banchichen/TZImagePickerController\">TZImagePickerController</a></p>\n<p>图片浏览器</p>\n<p><a href=\"https://github.com/LuKane/KNPhotoBrowser\">KNPhotoBrowser</a></p>\n<p>徽章</p>\n<p><a href=\"https://github.com/jkpang/PPBadgeView\">PPBadgeView</a></p>\n<p>浮窗</p>\n<p><a href=\"https://github.com/zhengwenming/WMDragView\">WMDragView</a></p>\n<p>弹出窗</p>\n<p><a href=\"https://github.com/LoSenTrad/LSTPopView\">LSTPopView</a></p>\n<p><a href=\"https://github.com/lyb5834/YBPopupMenu\">YBPopupMenu</a></p>\n<p><a href=\"https://github.com/jmascia/KLCPopup\">KLCPopup</a> (横屏时有缺陷)</p>\n<p><a href=\"https://github.com/LeoNatan/LNPopupController\">LNPopupController</a></p>\n<p>分类集合</p>\n<p><a href=\"https://github.com/pujiaxin33/JXCategoryView\">JXCategoryView</a></p>\n<p>网页封装</p>\n<p><a href=\"https://github.com/xiubojin/JXBWKWebView\">JXBWKWebView</a></p>\n<p>表单列表</p>\n<p><a href=\"https://github.com/xmartlabs/XLForm\">XLForm</a> (OC)  </p>\n<p><a href=\"https://github.com/xmartlabs/Eureka\">Eureka</a>（Swift）</p>\n<p>TextField</p>\n<p><a href=\"https://github.com/jverdi/JVFloatLabeledTextField\">JVFloatLabeledTextField</a> 输入框浮动标签提示</p>\n<p>录播图</p>\n<p><a href=\"https://github.com/WenchaoD/FSPagerView\">FSPagerView</a> (Swift)</p>\n<p>UICollectionView</p>\n<p><a href=\"https://github.com/Instagram/IGListKit\">IGListKit</a></p>\n<p>搜索历史记录</p>\n<p><a href=\"https://github.com/ko1o/PYSearch\">PYSearch</a></p>\n<p>内购</p>\n<p><a href=\"https://github.com/bizz84/SwiftyStoreKit\">SwiftyStoreKit</a> (Swift)</p>\n<p><a href=\"https://github.com/robotmedia/RMStore\">RMStore</a> (OC)</p>\n<p>SwipeCell</p>\n<p><a href=\"https://github.com/SwipeCellKit/SwipeCellKit\">SwipeCellKit</a> (Swift)</p>\n<p>权限</p>\n<p><a href=\"https://github.com/sparrowcode/PermissionsKit\">PermissionsKit</a> (Swift)</p>\n<p>GIF图</p>\n<p><a href=\"https://github.com/Flipboard/FLAnimatedImage\">FLAnimatedImage</a></p>\n<p>JSON</p>\n<p><a href=\"https://github.com/tristanhimmelman/ObjectMapper\">ObjectMapper</a> (Swift)</p>\n<p>扫描</p>\n<p><a href=\"https://github.com/kingsic/SGQRCode\">SGQRCode</a></p>\n<p><a href=\"https://github.com/MxABC/LBXScan\">LBXScan</a></p>\n<p>文本</p>\n<p><a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\">TTTAttributedLabel</a></p>\n<p><a href=\"https://github.com/ibireme/YYText\">YYText</a></p>\n<p>日历</p>\n<p><a href=\"https://github.com/search?q=FSCalendar\">FSCalendar</a></p>\n<p>本地存储</p>\n<p><a href=\"https://github.com/ibireme/YYCache\">YYCache</a></p>\n<p>数据库</p>\n<p><a href=\"https://github.com/ccgus/fmdb\">FMDB</a></p>\n<p>应用程序和扩展程序之间的消息传递(进程通讯)</p>\n<p><a href=\"https://github.com/mutualmobile/MMWormhole\">MMWormhole</a></p>\n<p>打印</p>\n<p><a href=\"https://github.com/shixueqian/PrintBeautifulLog\">PrintBeautifulLog</a></p>\n<p>图标库</p>\n<p><a href=\"https://badgen.net/badge/icon/ios%209.0+?icon=apple&label\">图片</a></p>\n<p>可调节大小，移动的视图</p>\n<p><a href=\"https://github.com/spoletto/SPUserResizableView\">SPUserResizableView</a></p>\n<p>绘图视图</p>\n<p><a href=\"https://github.com/acerbetti/ACEDrawingView\">ACEDrawingView</a></p>\n<p>在状态栏上显示FPS状态 检测fps滑动帧</p>\n<p><a href=\"https://github.com/joggerplus/JPFPSStatus\">JPFPSStatus</a></p>\n<p>视频播放器</p>\n<p><a href=\"https://github.com/renzifeng/ZFPlayer\">ZFPlayer</a></p>\n<p>WebView桥接</p>\n<p><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">WebViewJavascriptBridge</a></p>\n<p>UITableViewCell自动高度计算</p>\n<p><a href=\"https://github.com/forkingdog/UITableView-FDTemplateLayoutCell\">FDTemplateLayoutCell</a></p>\n<p>UICollectionView的布局，将单元格向左对齐</p>\n<p><a href=\"https://github.com/mokagio/UICollectionViewLeftAlignedLayout\">UICollectionViewLeftAlignedLayout</a></p>\n<p>加载框</p>\n<p><a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a></p>\n<p>KVO</p>\n<p><a href=\"https://github.com/facebookarchive/KVOController\">KVOController</a></p>\n<p>键盘</p>\n<p><a href=\"https://github.com/hackiftekhar/IQKeyboardManager\">IQKeyboardManager</a></p>\n<p>列表空数据显示</p>\n<p><a href=\"https://github.com/dzenbot/DZNEmptyDataSet\">DZNEmptyDataSet</a></p>\n<p>崩溃记录<br>Bugly</p>\n<p>双滑块范围选择器</p>\n<p><a href=\"https://github.com/Meterwhite/SDRangeSlider\">SDRangeSlider</a></p>\n<p>无限循环图片、文字轮播器</p>\n<p><a href=\"https://github.com/gsdios/SDCycleScrollView\">SDCycleScrollView</a></p>"},{"title":"iOS三方库管理工具","date":"2022-12-22T08:22:22.000Z","_content":"\n## CocoaPods, Carthage, Swift Package Manager\n\n<!-- more -->\n\nOC开发的话推荐使用`cocoapods`\n用swift开发的话推荐使用`carthage`\n\n### CocoaPods\n\nCocoaPods是OSX和iOS下的一个第三方开源类库管理工具\n\n安装\n\nRuby镜像，更换源\n\n```sh\nsudo gem update --system\ngem sources --remove https://rubygems.org/\ngem sources --add https://gems.ruby-china.com/\n\ngem sources -l\n```\n\n```sh\nsudo gem install -n /usr/local/bin cocoapods\n\npod setup\n```\n\n使用\n\n创建文件`Podfile`\n\n```sh\npod init\n```\n\n编辑文件 `vim Podfile`，在相应的位置添加以下内容保存\n\n```sh\npod 'AFNetworking'\n```\n\n加载\n\n```sh\npod install\n```\n\n需使用`project.xcworkspace`打开项目\n\n参考：<https://www.jianshu.com/p/ab6411a05bc2>\n参考：<https://www.jianshu.com/p/d40ac1f18f92>\n\n### Carthage\n\nCarthage使用Swift语言编写，只支持动态框架，iOS8以上，是一个去中心化的Cocoa依赖管理工具。\n\n安装\n\n```sh\nbrew install carthage\n```\n\n使用\n\n创建文件`Cartfile`\n\n```sh\ntouch Cartfile\n```\n\n编辑文件 `vim Cartfile`，添加以下内容保存\n\n```sh\ngithub \"Alamofire/Alamofire\"\n```\n\n更新\n\n```sh\n# 平台ios，框架xcframeworks\ncarthage update --platform iOS --use-xcframeworks\n```\n\n添加\n\n项目 -> General -> Frameworks 导入XCFramework即可，选择Embed & sign\n\n参考：<https://www.codetd.com/article/13755148>\n","source":"_posts/iOS/iOS三方库管理工具.md","raw":"---\ntitle: iOS三方库管理工具\ndate: 2022-12-22 16:22:22\ntags: iOS\n---\n\n## CocoaPods, Carthage, Swift Package Manager\n\n<!-- more -->\n\nOC开发的话推荐使用`cocoapods`\n用swift开发的话推荐使用`carthage`\n\n### CocoaPods\n\nCocoaPods是OSX和iOS下的一个第三方开源类库管理工具\n\n安装\n\nRuby镜像，更换源\n\n```sh\nsudo gem update --system\ngem sources --remove https://rubygems.org/\ngem sources --add https://gems.ruby-china.com/\n\ngem sources -l\n```\n\n```sh\nsudo gem install -n /usr/local/bin cocoapods\n\npod setup\n```\n\n使用\n\n创建文件`Podfile`\n\n```sh\npod init\n```\n\n编辑文件 `vim Podfile`，在相应的位置添加以下内容保存\n\n```sh\npod 'AFNetworking'\n```\n\n加载\n\n```sh\npod install\n```\n\n需使用`project.xcworkspace`打开项目\n\n参考：<https://www.jianshu.com/p/ab6411a05bc2>\n参考：<https://www.jianshu.com/p/d40ac1f18f92>\n\n### Carthage\n\nCarthage使用Swift语言编写，只支持动态框架，iOS8以上，是一个去中心化的Cocoa依赖管理工具。\n\n安装\n\n```sh\nbrew install carthage\n```\n\n使用\n\n创建文件`Cartfile`\n\n```sh\ntouch Cartfile\n```\n\n编辑文件 `vim Cartfile`，添加以下内容保存\n\n```sh\ngithub \"Alamofire/Alamofire\"\n```\n\n更新\n\n```sh\n# 平台ios，框架xcframeworks\ncarthage update --platform iOS --use-xcframeworks\n```\n\n添加\n\n项目 -> General -> Frameworks 导入XCFramework即可，选择Embed & sign\n\n参考：<https://www.codetd.com/article/13755148>\n","slug":"iOS/iOS三方库管理工具","published":1,"updated":"2023-06-28T17:48:45.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zh000xj0361xt025nx","content":"<h2 id=\"CocoaPods-Carthage-Swift-Package-Manager\"><a href=\"#CocoaPods-Carthage-Swift-Package-Manager\" class=\"headerlink\" title=\"CocoaPods, Carthage, Swift Package Manager\"></a>CocoaPods, Carthage, Swift Package Manager</h2><span id=\"more\"></span>\n\n<p>OC开发的话推荐使用<code>cocoapods</code><br>用swift开发的话推荐使用<code>carthage</code></p>\n<h3 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><p>CocoaPods是OSX和iOS下的一个第三方开源类库管理工具</p>\n<p>安装</p>\n<p>Ruby镜像，更换源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem update --system</span><br><span class=\"line\">gem sources --remove https://rubygems.org/</span><br><span class=\"line\">gem sources --add https://gems.ruby-china.com/</span><br><span class=\"line\"></span><br><span class=\"line\">gem sources -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install -n /usr/<span class=\"built_in\">local</span>/bin cocoapods</span><br><span class=\"line\"></span><br><span class=\"line\">pod setup</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<p>创建文件<code>Podfile</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod init</span><br></pre></td></tr></table></figure>\n\n<p>编辑文件 <code>vim Podfile</code>，在相应的位置添加以下内容保存</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod <span class=\"string\">&#x27;AFNetworking&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>加载</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n\n<p>需使用<code>project.xcworkspace</code>打开项目</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/ab6411a05bc2\">https://www.jianshu.com/p/ab6411a05bc2</a><br>参考：<a href=\"https://www.jianshu.com/p/d40ac1f18f92\">https://www.jianshu.com/p/d40ac1f18f92</a></p>\n<h3 id=\"Carthage\"><a href=\"#Carthage\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><p>Carthage使用Swift语言编写，只支持动态框架，iOS8以上，是一个去中心化的Cocoa依赖管理工具。</p>\n<p>安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install carthage</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<p>创建文件<code>Cartfile</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch Cartfile</span><br></pre></td></tr></table></figure>\n\n<p>编辑文件 <code>vim Cartfile</code>，添加以下内容保存</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github <span class=\"string\">&quot;Alamofire/Alamofire&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>更新</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 平台ios，框架xcframeworks</span></span><br><span class=\"line\">carthage update --platform iOS --use-xcframeworks</span><br></pre></td></tr></table></figure>\n\n<p>添加</p>\n<p>项目 -&gt; General -&gt; Frameworks 导入XCFramework即可，选择Embed &amp; sign</p>\n<p>参考：<a href=\"https://www.codetd.com/article/13755148\">https://www.codetd.com/article/13755148</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"CocoaPods-Carthage-Swift-Package-Manager\"><a href=\"#CocoaPods-Carthage-Swift-Package-Manager\" class=\"headerlink\" title=\"CocoaPods, Carthage, Swift Package Manager\"></a>CocoaPods, Carthage, Swift Package Manager</h2>","more":"<p>OC开发的话推荐使用<code>cocoapods</code><br>用swift开发的话推荐使用<code>carthage</code></p>\n<h3 id=\"CocoaPods\"><a href=\"#CocoaPods\" class=\"headerlink\" title=\"CocoaPods\"></a>CocoaPods</h3><p>CocoaPods是OSX和iOS下的一个第三方开源类库管理工具</p>\n<p>安装</p>\n<p>Ruby镜像，更换源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem update --system</span><br><span class=\"line\">gem sources --remove https://rubygems.org/</span><br><span class=\"line\">gem sources --add https://gems.ruby-china.com/</span><br><span class=\"line\"></span><br><span class=\"line\">gem sources -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install -n /usr/<span class=\"built_in\">local</span>/bin cocoapods</span><br><span class=\"line\"></span><br><span class=\"line\">pod setup</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<p>创建文件<code>Podfile</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod init</span><br></pre></td></tr></table></figure>\n\n<p>编辑文件 <code>vim Podfile</code>，在相应的位置添加以下内容保存</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod <span class=\"string\">&#x27;AFNetworking&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>加载</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n\n<p>需使用<code>project.xcworkspace</code>打开项目</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/ab6411a05bc2\">https://www.jianshu.com/p/ab6411a05bc2</a><br>参考：<a href=\"https://www.jianshu.com/p/d40ac1f18f92\">https://www.jianshu.com/p/d40ac1f18f92</a></p>\n<h3 id=\"Carthage\"><a href=\"#Carthage\" class=\"headerlink\" title=\"Carthage\"></a>Carthage</h3><p>Carthage使用Swift语言编写，只支持动态框架，iOS8以上，是一个去中心化的Cocoa依赖管理工具。</p>\n<p>安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install carthage</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<p>创建文件<code>Cartfile</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch Cartfile</span><br></pre></td></tr></table></figure>\n\n<p>编辑文件 <code>vim Cartfile</code>，添加以下内容保存</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github <span class=\"string\">&quot;Alamofire/Alamofire&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>更新</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 平台ios，框架xcframeworks</span></span><br><span class=\"line\">carthage update --platform iOS --use-xcframeworks</span><br></pre></td></tr></table></figure>\n\n<p>添加</p>\n<p>项目 -&gt; General -&gt; Frameworks 导入XCFramework即可，选择Embed &amp; sign</p>\n<p>参考：<a href=\"https://www.codetd.com/article/13755148\">https://www.codetd.com/article/13755148</a></p>"},{"title":"iOS定时器","date":"2021-11-30T07:30:49.000Z","_content":"\n## iOS主要定时器\n\n* NSTimer\n\n* GCD定时器 dispatch_source_t\n\n* CADisplayLink\n\n* dispatch_after\n\n* (void)performSelector:(SEL)aSelector withObject:(nullable id)anArgument afterDelay:(NSTimeInterval)delay;\n\n\n## NSTimer\n\n## GCD定时器\n\n","source":"_posts/iOS/iOS定时器.md","raw":"---\ntitle: iOS定时器\ndate: 2021-11-30 15:30:49\ntags: iOS\ncategories: Objective-C\n---\n\n## iOS主要定时器\n\n* NSTimer\n\n* GCD定时器 dispatch_source_t\n\n* CADisplayLink\n\n* dispatch_after\n\n* (void)performSelector:(SEL)aSelector withObject:(nullable id)anArgument afterDelay:(NSTimeInterval)delay;\n\n\n## NSTimer\n\n## GCD定时器\n\n","slug":"iOS/iOS定时器","published":1,"updated":"2021-11-30T08:46:36.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zi0011j036frwm2y54","content":"<h2 id=\"iOS主要定时器\"><a href=\"#iOS主要定时器\" class=\"headerlink\" title=\"iOS主要定时器\"></a>iOS主要定时器</h2><ul>\n<li><p>NSTimer</p>\n</li>\n<li><p>GCD定时器 dispatch_source_t</p>\n</li>\n<li><p>CADisplayLink</p>\n</li>\n<li><p>dispatch_after</p>\n</li>\n<li><p>(void)performSelector:(SEL)aSelector withObject:(nullable id)anArgument afterDelay:(NSTimeInterval)delay;</p>\n</li>\n</ul>\n<h2 id=\"NSTimer\"><a href=\"#NSTimer\" class=\"headerlink\" title=\"NSTimer\"></a>NSTimer</h2><h2 id=\"GCD定时器\"><a href=\"#GCD定时器\" class=\"headerlink\" title=\"GCD定时器\"></a>GCD定时器</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"iOS主要定时器\"><a href=\"#iOS主要定时器\" class=\"headerlink\" title=\"iOS主要定时器\"></a>iOS主要定时器</h2><ul>\n<li><p>NSTimer</p>\n</li>\n<li><p>GCD定时器 dispatch_source_t</p>\n</li>\n<li><p>CADisplayLink</p>\n</li>\n<li><p>dispatch_after</p>\n</li>\n<li><p>(void)performSelector:(SEL)aSelector withObject:(nullable id)anArgument afterDelay:(NSTimeInterval)delay;</p>\n</li>\n</ul>\n<h2 id=\"NSTimer\"><a href=\"#NSTimer\" class=\"headerlink\" title=\"NSTimer\"></a>NSTimer</h2><h2 id=\"GCD定时器\"><a href=\"#GCD定时器\" class=\"headerlink\" title=\"GCD定时器\"></a>GCD定时器</h2>"},{"title":"iOS持久化方式","date":"2018-12-16T14:34:06.000Z","_content":"## iOS持久化方式\n\n> 1.NSUserDefaults  \n2.NSKeyedArchiver  \n3.沙盒Document  \n4.sqlite3  \n5.KeyChain\n\n持久化分为两类：沙盒内和沙盒外。\n\n<!-- more -->\n\n## 一、沙盒目录结构和各个目录的路径获取方法\n\n> **AppName.app**:  应用程序包目录  \n**Documents**：存储用户数据，您应该将所有的应用程序数据文件写入到这个目录下。该路径可通过配置实现iTunes共享文件。会被iTunes同步。  \n**Library**：有两个子目录Preferences和Caches，除Caches以外，都会被iTunes备份。  \n**Preferences**：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好。结果在目录下面以plist的方式存储。  \n**Caches**：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。  \n**SystemData**：系统数据  \n**tmp**：用来存放应用再次启动时不需要的临时文件，该目录下的东西随时可能被系统清理掉，不会被iTunes同步。\n\n### 沙盒主目录\n\n```OC\nNSString *homeDir = NSHomeDirectory();\n```\n\n### Documents目录\n\n```OC\nNSString *documentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];\n```\n\n### Library目录\n\n```OC\n// 获取Library的目录路径\nNSString *libraryDir = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];\n\n// 获取Caches目录路径\nNSString *cachesDir = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];\n```\n\n### tmp目录\n\n```OC\nNSString *tmpDir =  NSTemporaryDirectory();\n```\n\n### AppBundle目录路径\n\n```OC\n// 获取AppBundle目录路径\nNSLog(@\"%@\", [[NSBundle mainBundle] bundlePath]);\n\nNSString *imagePath = [[NSBundle mainBundle] pathForResource:@\"apple\" ofType:@\"png\"];\n\nUIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];\n```\n\n## 二、沙盒内的持久化方式\n\n### NSKeyedArchiver归档\n\n#### 1、什么是归档\n\n> 归档是一种很常用的文件存储方法，可以存储各种类型的对象(以文件的方式保存)。  \n官方提供了NSKeyedArchiver和NSKeyedUnarchiver两个类以供我们把对象序列化和反序列化，在存储之前使用NSKeyedArchiver进行序列化操作，并且写入本地文件，在使用之前使用NSKeyedUnarchiver进行反序列化的操作，以供提取使用\n\n#### 2、使用场景\n\n> 如果是简单的基础数据类型，我们一般使用的是NSUserDefaults 或者 plist文件存储  \n对于一些量级比较大的，有规律可循的我们一般使用sqlite3数据库、coreData等  \n但是对于对象级别，轻量级的存储，我们一般可以使用归档来完成。\n\n#### 3、归档的使用方法\n\n1、了解NSCoding 和 NSSecureCoding，NSCoding安全性不高，所以iOS6的时候，苹果引入了NSSecureCoding协议，加强安全性。\n\n2、需要序列化的类需要实现 NSCoding 或者 NSSecureCoding 协议（推荐使用NSSecureCoding），并复写方法：\n\n```OC\n- (void)encodeWithCoder:(NSCoder *)coder\n- (instancetype)initWithCoder:(NSCoder *)coder\n```\n\n3、NSKeyedArchiver 和 NSKeyedUnarchiver，NSKeyedArchiver将自定义的类转换成NSData实例，类里面每一个值对应一个Key；NSKeyedUnarchiver将NSData实例根据key值还原成自定义的类。\n\n```OC\n// NSKeyedArchiver 归档操作现在不推荐使用下面两个操作(被苹果废弃)\n\n+ (NSData *)archivedDataWithRootObject:(id)rootObject \n+ (BOOL)archiveRootObject:(id)rootObject toFile:(NSString *)path\n\n// 推荐使用\n\n+ (nullable NSData *)archivedDataWithRootObject:(id)object requiringSecureCoding:(BOOL)requiresSecureCoding error:(NSError **)error\n```\n\n4、归档、解档\n\n```OC\nNSData * data = [NSKeyedArchiver archivedDataWithRootObject:me requiringSecureCoding:YES error:&error];\n\nPerson *newPerson = (Person *)[NSKeyedUnarchiver unarchivedObjectOfClass:Person.class fromData:data error:&error];\n```\n\n5、例子：\n\n```OC\n@interface Person : NSObject\n@property (nonatomic, strong) NSString *name;\n@end\n\n-------------------------------------------\n\n@implementation Person\n- (void)encodeWithCoder:(NSCoder *)coder\n{\n    [coder encodeObject:self.name forKey:@\"name\"];\n}\n- (instancetype)initWithCoder:(NSCoder *)coder\n{\n    self = [super init];\n    if (self) {\n        self.name = [coder decodeObjectForKey:@\"name\"];\n    }\n    return self;\n}\n+ (BOOL)supportsSecureCoding {\n    return true;\n}\n@end\n\n-------------------------------------------\n\n\nPerson *me = [[Person alloc]init];\nme.name = @\"小白\";\nNSString *homeDir = NSHomeDirectory();\n\nNSError *error;\nNSData * data = [NSKeyedArchiver archivedDataWithRootObject:me requiringSecureCoding:YES error:&error];\n\nNSLog(@\"%@\",error);\nPerson *newPerson = (Person *)[NSKeyedUnarchiver unarchivedObjectOfClass:Person.class fromData:data error:&error];\nNSLog(@\"%@\",error);\nNSLog(@\"%@\",newPerson.name);\n```\n\n6、归档文件的存放\n\n> 归档操作生成的data文件，可以通过文件存储的方式，存放到沙盒中\n\n### NSUserDefaults\n\n#### 1、存取\n\n```OC\n// [NSUserDefaults standardUserDefaults]获取NSUserDefaults对象，以key-value方式进行持久化操作。\n存\n[[NSUserDefaults standardUserDefaults] setObject:array forKey:@\"array\"];\n\n取\nNSMutableArray *mutableArr = [NSMutableArray arrayWithArray:[defaults objectForKey:@\"mutableArr\"]];\n```\n\n#### 2、应用场景\n\n> 存放一些基础数据、如判断条件等，自动登录信息。\n\n#### 3、注意事项\n\n```OC\n1、可以存储的对象有NSString、NSArray、NSDictionary、NSData、NSNumber\n\n2、我们还要注意NSUserDefaults存储的对象全是不可变的，就算你存的时候是可变的，最后都会被转成不可变的\n\n比如 NSMutableArray 存储后取出时NSArray，是不可变的，需要重新构建 NSMutableArray\n\nNSMutableArray *mutableArr = [NSMutableArray arrayWithArray:[defaults objectForKey:@\"mutableArr\"]];\n\n3、对相同的key赋值等于一次覆盖，所以请保证key的唯一性\n```\n\n### Plist存储、文件存储\n\n#### 1、plist\n\n```OC\n可以存储的对象有NSString、NSArray、NSDictionary、NSData、NSNumber\n\n写入使用writeToFile，读取使用xxxWithContentsOfFile；需要指定文件路径。\n\n\n写入：\n\nNSMutableArray * array = [[NSMutableArray alloc]initWithObjects:@\"小白\", @\"蜡笔小新\", nil];\n\n//获取Document目录地址，拼接上文件名称\nNSString *path = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@\"data.plist\"];\n\n[array writeToFile:path atomically:YES];\n\n\n读取：\n\nNSMutableArray * new_array = [NSMutableArray arrayWithContentsOfFile:path];\n\nNSLog(@\"%@\",new_array);\n```\n\n#### 2、文件\n\n> 这里要和plist区分一下，plist方式是字典/数组数据格式写入文件；而这里的文件方式不限数据格式。\n\n### 数据库 sqlite3 （FMDB）\n\n数据库无疑是大量数据最好的持久化方案，数据库目前有：sqlite、CoreData和Realm等。\n\n#### 1、SQLite\n\nSQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。\n\n```OC\n1、不需要一个单独的服务器进程或操作的系统（无服务器的）\n2、SQLite 不需要配置，这意味着不需要安装或管理\n3、一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件\n4、SQLite 是非常小的，是轻量级的，完全配置时小于 400KB，省略可选功能配置时小于250KB\n5、SQLite 是自给自足的，这意味着不需要任何外部的依赖\n6、SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问\n\n1.ACID事务\n2.零配置 – 无需安装和管理配置\n3.储存在单一磁盘文件中的一个完整的数据库\n4.数据库文件可以在不同字节顺序的机器间自由的共享\n5.支持数据库大小至2TB\n6.足够小, 大致13万行C代码, 4.43M\n7.比一些流行的数据库在大部分普通数据库操作要快\n8.简单, 轻松的API\n9.包含TCL绑定, 同时通过Wrapper支持其他语言的绑定\n10.良好注释的源代码, 并且有着90%以上的测试覆盖率\n11.独立: 没有额外依赖\n12.源码完全的开源, 你可以用于任何用途, 包括出售它\n13.支持多种开发语言，C, C++, PHP, Perl, Java, C#,Python, Ruby等\n```\n\nSQLite将数据划分为以下几种存储类型：\n\n```OC\nNULL ： NULL 值\ninteger : 整型值\nreal : 浮点值\ntext : 文本字符串\nblob : 二进制数据（比如文件）\n没有 Boolean 没有用于存储日期和/或时间的类型，可用其他类型代替\n实际上SQLite是无类型的，就算声明为integer类型，还是能存储字符串文本（主键除外）\n```\n\n#### 2、FMDB使用\n\n1、什么是FMDB\n\n> iOS中使用C语言函数对原生SQLite数据库进行增删改查操作，复杂麻烦，于是，就出现了一系列将SQLite API封装的库，如FMDB  \nFMDB是针对libsqlite3框架进行封装的三方，它以OC的方式封装了SQLite的C语言的API，使用步骤与SQLite相似\n\n2、FMDB优缺点\n\n```OC\nFMDB的优点是：\n(1) 使用时面向对象，避免了复杂的C语言代码\n(2) 对比苹果自带的Core Data框架，更加轻量级和灵活\n(3) 提供多线程安全处理数据库操作方法，保证多线程安全跟数据准确性\n\nFMDB缺点：\n(1) 因为是OC语言开发，只能在iOS平台上使用，所以实现跨平台操作时存在限制性\n```\n\n3、相关类\n\n```OC\nFMDatabase：一个FMDatabase对象代表一个单独的SQLite数据库，通过SQLite语句执行数据库的增删改查操作\n\nFMResultSet：使用FMDatabase对象查询数据库后的结果集\n\nFMDatabaseQueue：用于多线程操作数据库，它保证线程安全\n```\n\n3、sqlite锁\n\n```OC\nsqlite的锁的粒度比较粗，是数据库级别的，也就是说即使只是对某个页进行读写操作，sqlite也会封锁整个数据库。这种策略降低了读-写事务和写-写事务间的并发程度，但是大大简化了程序设计，减小了整个程序的大小。所以，sqlite的适用场景为：较少次写入数据，大量、多次读出数据。这也是sqlite作为一款嵌入式数据库的设计初衷。\n\n\nsqlite读事务获取锁的过程：UNLOCKED-->SHARED->进行读取操作\n\nsqlite写事务获取锁的过程：UNLOCKED->SHARED->RESERVED->创建回滚日志，在数据库内存页中写入数据，刷新日志文件到磁盘->PENDING->EXCLUSIVE->刷新内存页中的数据到磁盘。\n\nSQLite使用锁逐步上升机制，为了写数据库，连接需要逐级地获得排它锁。\n\nSQLite有5个不同的锁状态：\n未加锁(UNLOCKED)\n共享 (SHARED)\n保留(RESERVED)\n待定(PENDING)\n排它(EXCLUSIVE)。\n\n每个数据库连接在同一时刻只能处于其中一个状态。每 种状态(未加锁状态除外)都有一种锁与之对应。\n\n最初的状态是未加锁状态，在此状态下，连接还没有存取数据库。当连接到了一个数据库，甚至已经用BEGIN开始了一个事务时，连接都还处于未加锁状态。\n\n未加锁状态的下一个状态是共享状态。为了能够从数据库中读(不写)数据，连接必须首先进入共享状态，也就是说首先要获得一个共享锁。多个连接可以 同时获得并保持共享锁，也就是说多个连接可以同时从同一个数据库中读数据。但哪怕只有一个共享锁还没有释放，也不允许任何连接写数据库。\n\n如果一个连接想要写数据库，它必须首先获得一个保留锁。一个数据库上同时只能有一个保留锁。保留锁可以与共享锁共存，保留锁是写数据库的第1阶段。保留锁即不阻止其它拥有共享锁的连接继续读数据库，也不阻止其它连接获得新的共享锁。\n\n一旦一个连接获得了保留锁，它就可以开始处理数据库修改操作了，尽管这些修改只能在缓冲区中进行，而不是实际地写到磁盘。对读出内容所做的修改保存在内存缓冲区中。\n\n当连接想要提交修改(或事务)时，需要将保留锁提升为排它锁。为了得到排它锁，还必须首先将保留锁提升为待定锁。获得待定锁之后，其它连接就不能再获得新的共享锁了，但已经拥有共享锁的连接仍然可以继续正常读数据库。此时，拥有等待锁的连接等待其它拥有共享锁的连接完成工作并释放其共享锁。\n\n一旦所有其它共享锁都被释放，拥有待定锁的连接就可以将其锁提升至排它锁，此时就可以自由地对数据库进行修改了。所有以前对缓冲区所做的修改都会被写到数据库文件。\n```\n\n4、sqlite的死锁\n\n```OC\n举例：\n\n两个连接 A 和 B 同时但完全独立地工作于同一个数据库。A执行第1条命令，B执行第2、3条，等等。 \n\nA连接                                     B连接 \nsqlite> BEGIN; \n                                    sqlite> BEGIN; \n                                    sqlite> INSERT INTO foo VALUES('x'); \nsqlite> SELECT * FROM foo; \n                                    sqlite> COMMIT; \n                                    SQL error: database is locked \nsqlite> INSERT INTO foo VALUES ('x'); \nSQL error: database is locked\n\n两个连接都在死锁中结束。B首先尝试写数据库，也就拥有了一个待定锁。A再试图写，但当其INSERT语句试图将共享锁提升为保留锁时失败。\n\n为了讨论的方便，假设连接A和B都一直等待数据库可写。那么此时，其它的连接甚至都不能够再读数据库了，因为B拥有待定锁(它能阻止其它连接获得共享锁)。那么时此，不仅A和B不能工作，其它所有进程都不能再操作此数据库了。\n\n解决死锁的办法：sqlite用锁超时的机制处理死锁\n\n如果避免此情况呢？答案是采用正确的事务类型来完成工作。 \n\n\n事务的种类\nSQLite有三种不同的事务，使用不同的锁状态。\n\n事务可以开始于：DEFERRED、MMEDIATE 或 EXCLUSIVE。\n\n事务类型在BEGIN命令中指定： \nBEGIN [ DEFERRED | IMMEDIATE | EXCLUSIVE ] TRANSACTION;\n\n一个DEFERRED事务不获取任何锁(直到它需要锁的时候)，BEGIN语句本身也不会做什么事情——它开始于UNLOCK状态。默认情况下就是这样的，如果仅仅用BEGIN开始一个事务，那么事务就是DEFERRED的，同时它不会获取任何锁；当对数据库进行第一次读操作时，它会获取 SHARED锁；同样，当进行第一次写操作时，它会获取RESERVED锁。\n\nIMMEDIATE事务会尝试获取RESERVED锁。如果成功，BEGIN IMMEDIATE保证没有别的连接可以写数据库。但是，别的连接可以对数据库进行读操作；但是，RESERVED锁会阻止其它连接的BEGIN IMMEDIATE或者BEGIN EXCLUSIVE命令，当其它连接执行上述命令时，会返回SQLITE_BUSY错误。这时你就可以对数据库进行修改操作了，但是你还不能提交，当你 COMMIT时，会返回SQLITE_BUSY错误，这意味着还有其它的读事务没有完成，得等它们执行完后才能提交事务。\n\nEXCLUSIVE事务会试着获取对数据库的EXCLUSIVE锁。这与IMMEDIATE类似，但是一旦成功，EXCLUSIVE事务保证没有其它的连接，所以就可对数据库进行读写操作了。\n\n上节那个例子的问题在于两个连接最终都想写数据库，但是它们都没有放弃各自原来的锁，最终，SHARED锁导致了问题的出现。如果两个连接都以 BEGIN IMMEDIATE开始事务，那么死锁就不会发生。在这种情况下，在同一时刻只能有一个连接进入BEGIN IMMEDIATE，其它的连接就得等待。BEGIN IMMEDIATE和BEGIN EXCLUSIVE通常被写事务使用。就像同步机制一样，它防止了死锁的产生。\n\n基本的准则是：如果你正在使用的数据库没有其它的连接，用BEGIN就足够了。但是，如果你使用的数据库有其它的连接也会对数据库进行写操作，就得使用BEGIN IMMEDIATE或BEGIN EXCLUSIVE开始你的事务。\n\n那么，如何启动，提交还有回滚事务呢？SQLite中分别是：BEGIN、COMMIT和ROLLBACK。\n```\n\n5、数据库知识\n\n1、数据库分类\n\n```OC\n关系型数据库\n\nMySQL等\n\n非关系型数据库\n\nMongoDB等\n```\n\n2、SQLite常用语句的使用\n\n```OC\n1、常用关键字\nselect、insert、update、delete、from、create、where、desc、order、by、group、table、alter、view、index等等\n2、语句种类\nDDL：数据定义语句 ： create（创建）、alter（修改）、drop(删除)\ncreate table if not exists 表名 (字段名1 字段类型1, 字段名2 字段类型2, …) ;\ncreate table t_student (id integer, name text, age integer, score real) ;\nALTER TABLE table_name RENAME TO new_table_naler ;\nDROP table if exists 表名 ;\nDROP table t_student ;\n--------------------------------------------------\nDML：数据操作语句\n包括insert、update、delete等操作\n上面的3种操作分别用于添加、修改、删除表中的数据\ninsert into 表名 (字段1, 字段2, …) values (字段1的值, 字段2的值, …) ;\ninsert into t_student (name, age) values (‘mj’, 10) ;\nupdate 表名 set 字段1 = 字段1的值, 字段2 = 字段2的值, … ;\nupdate t_student set name = ‘jack’, age = 20 ;\ndelete from 表名 ;\ndelete from t_student ;\n--------------------------------------------------\nDQL：数据库查询语句\n关键字select是DQL（也是所有SQL）用得最多的操作\n--------------------------------------------------\nlike子句\n百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。\nSELECT FROM table_name\nWHERE column LIKE 'XXXX%'\nor \nSELECT FROM table_name\nWHERE column LIKE '%XXXX%'\nor\nSELECT FROM table_name\nWHERE column LIKE 'XXXX_'\nor\nSELECT FROM table_name\nWHERE column LIKE '_XXXX'\nor\nSELECT FROM table_name\nWHERE column LIKE '_XXXX_'\n--------------------------------------------------\nGlob 子句 ：和LIKE一样是通配符匹配， 与 LIKE 不同的是，GLOB 是大小写敏感的\n星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。这些符号可以被组合使用。\n--------------------------------------------------\nLIMIT 子句用于限制由 SELECT 语句返回的数据数量。\nSELECT column1, column2, columnN \nFROM table_name\nLIMIT [no of rows] OFFSET [row num]\nSQLite 引擎将返回从OFFSET下一行开始 [no of rows] 行。\n--------------------------------------------------\nORDER BY 子句是用来基于一个或多个列按升序或降序顺序排列数据。\nSELECT column-list \nFROM table_name \n[WHERE condition] \n[ORDER BY column1, column2, .. columnN] [ASC | DESC];\n--------------------------------------------------\nGROUP BY 子句用于与 SELECT 语句一起使用，来对相同的数据进行分组。\nSELECT column-list\nFROM table_name\nWHERE [ conditions ]\nGROUP BY column1, column2....columnN\nORDER BY column1, column2....columnN\n--------------------------------------------------\nHAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。\nWHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。\nSELECT\nFROM\nWHERE\nGROUP BY\nHAVING\nORDER BY\n在一个查询中，HAVING 子句必须放在 GROUP BY 子句之后，必须放在 ORDER BY 子句之前。下面是包含 HAVING 子句的 SELECT 语句的语法：\nSELECT column1, column2\nFROM table1, table2\nWHERE [ conditions ]\nGROUP BY column1, column2\nHAVING [ conditions ]\nORDER BY column1, column2\n--------------------------------------------------\nDISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录。\nSELECT DISTINCT column1, column2,.....columnN \nFROM table_name\nWHERE [condition]\n```\n\n3、SQLite的索引\n\n```OC\n索引（Index）是一种特殊的查找表，数据库搜索引擎用来加快数据检索。简单地说，索引是一个指向表中数据的指针。一个数据库中的索引与一本书后边的索引是非常相似的。\n\n1、索引不应该使用在较小的表上。\n2、索引不应该使用在有频繁的大批量的更新或插入操作的表上。\n3、索引不应该使用在含有大量的 NULL 值的列上。\n4、索引不应该使用在频繁操作的列上。\n\nCREATE INDEX 命令\nCREATE INDEX index_name ON table_name;\n\n\n唯一索引：使用唯一索引不仅是为了性能，同时也为了数据的完整性。唯一索引不允许任何重复的值插入到表中。\n\nCREATE INDEX index_name\non table_name (column_name);\n\n组合索引：组合索引是基于一个表的两个或多个列上创建的索引。\n\nCREATE INDEX index_name\non table_name (column1, column2);\n\n隐式索引\n\n隐式索引是在创建对象时，由数据库服务器自动创建的索引。索引自动创建为主键约束和唯一约束。\n\n\nDROP INDEX 命令\n\n一个索引可以使用 SQLite 的 DROP 命令删除。当删除索引时应特别注意，因为性能可能会下降或提高。\n\nDROP INDEX index_name;\n```\n\n4、SQLite的约束\n\n```OC\n约束是在表的数据列上强制执行的规则。这些是用来限制可以插入到表中的数据类型。这确保了数据库中数据的准确性和可靠性。\n\nNOT NULL 约束：确保某列不能有 NULL 值。\nDEFAULT 约束：当某列没有指定值时，为该列提供默认值。\nUNIQUE 约束：确保某列中的所有值是不同的。\nPRIMARY Key 约束：唯一标识数据库表中的各行/记录。\nCHECK 约束：CHECK 约束确保某列中的所有值满足一定条件。\n\n\nCREATE TABLE COMPANY3(\n   ID INT PRIMARY KEY     NOT NULL,\n   NAME           TEXT    NOT NULL,\n   AGE            INT     NOT NULL UNIQUE,\n   ADDRESS        CHAR(50) DEFAULT 'home',\n   SALARY         REAL    CHECK(SALARY > 0)\n);\n```\n\n5、SQLite事务\n\n```OC\n1、事务（Transaction）是一个对数据库执行工作单元。事务（Transaction）是以逻辑顺序完成的工作单位或序列，可以是由用户手动操作完成，也可以是由某种数据库程序自动完成。\n\n2、事务（Transaction）是指一个或多个更改数据库的扩展。例如，如果您正在创建一个记录或者更新一个记录或者从表中删除一个记录，那么您正在该表上执行事务。重要的是要控制事务以确保数据的完整性和处理数据库错误。\n\n3、事务（Transaction）具有以下四个标准属性，通常根据首字母缩写为 ACID：\n\n原子性（Atomicity）：确保工作单位内的所有操作都成功完成，否则，事务会在出现故障时终止，之前的操作也会回滚到以前的状态。\n一致性（Consistency)：确保数据库在成功提交的事务上正确地改变状态。\n隔离性（Isolation）：使事务操作相互独立和透明。\n持久性（Durability）：确保已提交事务的结果或效果在系统发生故障的情况下仍然存在。\n\n4、事务控制\n\nBEGIN TRANSACTION：开始事务处理 或者BEGIN。\n\n//中间是自己需要完成的数据库操作\n\nCOMMIT：保存更改，或者可以使用 END TRANSACTION 命令。\nROLLBACK：回滚所做的更改。\n\nsqlite> BEGIN;\nsqlite> DELETE FROM COMPANY WHERE AGE = 25;\nsqlite> ROLLBACK;\n```\n\n更多语法：https://www.w3cschool.cn/sqlite/sqlite-pragma.html\n\n6、SQLite的提高查询速度方法\n\n```OC\n1、关键搜索词索引的建立\n\n索引并不是越多越好\n\n注意会增大数据库大小，可以显著提高select的速度，同时也可以提高update的速度\n\n2、查询sql的优化\n\n尽量查找id\n\n减少全表扫描 如：\n\n避免sql中 where子句后面使用表达式\n\n避免where子句中使用 or连接，可以通过联合\n\nin not in 也要慎用\n```\n\n更多sql优化：https://blog.csdn.net/wenjianzhiqin/article/details/81017468\n\n7、提高写入速度\n\n```OC\n1、事务开启可以提高查询效率，因为避免了频繁的函数调用，插入后一次性提交。\n\n2、关闭写入同步 \n\n在SQLite中，数据库配置的参数都由编译指示（pragma）来实现的，而其中synchronous选项有三种可选状态，分别是full、normal、off。full写入速度最慢，但保证数据是安全的，不受断电、系统崩溃等影响，而off可以加速数据库的一些操作，但如果系统崩溃或断电，则数据库可能会损毁。如果有定期备份的机制，而且少量数据丢失可接受\n\nsqlite3_exec(db,\"PRAGMA synchronous = OFF; \",0,0,0);  \n\n3、使用执行准备\n\n就算开起了事务，SQLite仍然要对循环中每一句SQL语句进行“词法分析”和“语法分析”，这对于同时插入大量数据的操作来说，简直就是浪费时间。使用执行准备，即先将SQL语句编译好，然后再一步一步（或一行一行）地执行。\n```\n\n四、沙盒外的持久化方式\n\n沙盒内的方式在应用被删除后数据都会丢失，如果想要不丢失则需要使用KeyChain。\n\nKeyChain本质是一个sqlite数据库，其保存的所有数据都是加密过的。\n\nKeyChain分为私有和公有，公有则需要指定group，一个group中的应用可以共享此KeyChain。\n\n使用KeyChain过程中要理解下面几个问题：\n\n```OC\n1：自己使用的KeyChain和系统自带的KeyChain数据是隔离的，内部应该是不同数据库文件；\n\n2：KeyChain数据可备份到iCloud中；\n\n3：不需要联网，也不用登陆iCloud账号；一个设备一个sqlite数据库，但是不同应用组不共享数据；\n\n4：要在另一台设备上使用当前设备存储的KeyChain信息，需要当前设备进行数据备份，\n再在另一设备上复原数据；比较常用的是iCloud备份方式；\n\n5：系统自带的KeyChain中账号密码分类数据可在系统设置->账号与密码里面看到，\n你退出iCloud账号还是存在，只是iCloud会帮你备份如果你设置了的话；这个和照片是一样的道理。\n```\n\nhttp://www.cocoachina.com/articles/25733\n","source":"_posts/iOS/iOS持久化方式.md","raw":"---\ntitle: iOS持久化方式\ndate: 2018-12-16 22:34:06\ntags: iOS\ncategories: iOS\n---\n## iOS持久化方式\n\n> 1.NSUserDefaults  \n2.NSKeyedArchiver  \n3.沙盒Document  \n4.sqlite3  \n5.KeyChain\n\n持久化分为两类：沙盒内和沙盒外。\n\n<!-- more -->\n\n## 一、沙盒目录结构和各个目录的路径获取方法\n\n> **AppName.app**:  应用程序包目录  \n**Documents**：存储用户数据，您应该将所有的应用程序数据文件写入到这个目录下。该路径可通过配置实现iTunes共享文件。会被iTunes同步。  \n**Library**：有两个子目录Preferences和Caches，除Caches以外，都会被iTunes备份。  \n**Preferences**：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好。结果在目录下面以plist的方式存储。  \n**Caches**：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。  \n**SystemData**：系统数据  \n**tmp**：用来存放应用再次启动时不需要的临时文件，该目录下的东西随时可能被系统清理掉，不会被iTunes同步。\n\n### 沙盒主目录\n\n```OC\nNSString *homeDir = NSHomeDirectory();\n```\n\n### Documents目录\n\n```OC\nNSString *documentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];\n```\n\n### Library目录\n\n```OC\n// 获取Library的目录路径\nNSString *libraryDir = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];\n\n// 获取Caches目录路径\nNSString *cachesDir = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];\n```\n\n### tmp目录\n\n```OC\nNSString *tmpDir =  NSTemporaryDirectory();\n```\n\n### AppBundle目录路径\n\n```OC\n// 获取AppBundle目录路径\nNSLog(@\"%@\", [[NSBundle mainBundle] bundlePath]);\n\nNSString *imagePath = [[NSBundle mainBundle] pathForResource:@\"apple\" ofType:@\"png\"];\n\nUIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];\n```\n\n## 二、沙盒内的持久化方式\n\n### NSKeyedArchiver归档\n\n#### 1、什么是归档\n\n> 归档是一种很常用的文件存储方法，可以存储各种类型的对象(以文件的方式保存)。  \n官方提供了NSKeyedArchiver和NSKeyedUnarchiver两个类以供我们把对象序列化和反序列化，在存储之前使用NSKeyedArchiver进行序列化操作，并且写入本地文件，在使用之前使用NSKeyedUnarchiver进行反序列化的操作，以供提取使用\n\n#### 2、使用场景\n\n> 如果是简单的基础数据类型，我们一般使用的是NSUserDefaults 或者 plist文件存储  \n对于一些量级比较大的，有规律可循的我们一般使用sqlite3数据库、coreData等  \n但是对于对象级别，轻量级的存储，我们一般可以使用归档来完成。\n\n#### 3、归档的使用方法\n\n1、了解NSCoding 和 NSSecureCoding，NSCoding安全性不高，所以iOS6的时候，苹果引入了NSSecureCoding协议，加强安全性。\n\n2、需要序列化的类需要实现 NSCoding 或者 NSSecureCoding 协议（推荐使用NSSecureCoding），并复写方法：\n\n```OC\n- (void)encodeWithCoder:(NSCoder *)coder\n- (instancetype)initWithCoder:(NSCoder *)coder\n```\n\n3、NSKeyedArchiver 和 NSKeyedUnarchiver，NSKeyedArchiver将自定义的类转换成NSData实例，类里面每一个值对应一个Key；NSKeyedUnarchiver将NSData实例根据key值还原成自定义的类。\n\n```OC\n// NSKeyedArchiver 归档操作现在不推荐使用下面两个操作(被苹果废弃)\n\n+ (NSData *)archivedDataWithRootObject:(id)rootObject \n+ (BOOL)archiveRootObject:(id)rootObject toFile:(NSString *)path\n\n// 推荐使用\n\n+ (nullable NSData *)archivedDataWithRootObject:(id)object requiringSecureCoding:(BOOL)requiresSecureCoding error:(NSError **)error\n```\n\n4、归档、解档\n\n```OC\nNSData * data = [NSKeyedArchiver archivedDataWithRootObject:me requiringSecureCoding:YES error:&error];\n\nPerson *newPerson = (Person *)[NSKeyedUnarchiver unarchivedObjectOfClass:Person.class fromData:data error:&error];\n```\n\n5、例子：\n\n```OC\n@interface Person : NSObject\n@property (nonatomic, strong) NSString *name;\n@end\n\n-------------------------------------------\n\n@implementation Person\n- (void)encodeWithCoder:(NSCoder *)coder\n{\n    [coder encodeObject:self.name forKey:@\"name\"];\n}\n- (instancetype)initWithCoder:(NSCoder *)coder\n{\n    self = [super init];\n    if (self) {\n        self.name = [coder decodeObjectForKey:@\"name\"];\n    }\n    return self;\n}\n+ (BOOL)supportsSecureCoding {\n    return true;\n}\n@end\n\n-------------------------------------------\n\n\nPerson *me = [[Person alloc]init];\nme.name = @\"小白\";\nNSString *homeDir = NSHomeDirectory();\n\nNSError *error;\nNSData * data = [NSKeyedArchiver archivedDataWithRootObject:me requiringSecureCoding:YES error:&error];\n\nNSLog(@\"%@\",error);\nPerson *newPerson = (Person *)[NSKeyedUnarchiver unarchivedObjectOfClass:Person.class fromData:data error:&error];\nNSLog(@\"%@\",error);\nNSLog(@\"%@\",newPerson.name);\n```\n\n6、归档文件的存放\n\n> 归档操作生成的data文件，可以通过文件存储的方式，存放到沙盒中\n\n### NSUserDefaults\n\n#### 1、存取\n\n```OC\n// [NSUserDefaults standardUserDefaults]获取NSUserDefaults对象，以key-value方式进行持久化操作。\n存\n[[NSUserDefaults standardUserDefaults] setObject:array forKey:@\"array\"];\n\n取\nNSMutableArray *mutableArr = [NSMutableArray arrayWithArray:[defaults objectForKey:@\"mutableArr\"]];\n```\n\n#### 2、应用场景\n\n> 存放一些基础数据、如判断条件等，自动登录信息。\n\n#### 3、注意事项\n\n```OC\n1、可以存储的对象有NSString、NSArray、NSDictionary、NSData、NSNumber\n\n2、我们还要注意NSUserDefaults存储的对象全是不可变的，就算你存的时候是可变的，最后都会被转成不可变的\n\n比如 NSMutableArray 存储后取出时NSArray，是不可变的，需要重新构建 NSMutableArray\n\nNSMutableArray *mutableArr = [NSMutableArray arrayWithArray:[defaults objectForKey:@\"mutableArr\"]];\n\n3、对相同的key赋值等于一次覆盖，所以请保证key的唯一性\n```\n\n### Plist存储、文件存储\n\n#### 1、plist\n\n```OC\n可以存储的对象有NSString、NSArray、NSDictionary、NSData、NSNumber\n\n写入使用writeToFile，读取使用xxxWithContentsOfFile；需要指定文件路径。\n\n\n写入：\n\nNSMutableArray * array = [[NSMutableArray alloc]initWithObjects:@\"小白\", @\"蜡笔小新\", nil];\n\n//获取Document目录地址，拼接上文件名称\nNSString *path = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@\"data.plist\"];\n\n[array writeToFile:path atomically:YES];\n\n\n读取：\n\nNSMutableArray * new_array = [NSMutableArray arrayWithContentsOfFile:path];\n\nNSLog(@\"%@\",new_array);\n```\n\n#### 2、文件\n\n> 这里要和plist区分一下，plist方式是字典/数组数据格式写入文件；而这里的文件方式不限数据格式。\n\n### 数据库 sqlite3 （FMDB）\n\n数据库无疑是大量数据最好的持久化方案，数据库目前有：sqlite、CoreData和Realm等。\n\n#### 1、SQLite\n\nSQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。\n\n```OC\n1、不需要一个单独的服务器进程或操作的系统（无服务器的）\n2、SQLite 不需要配置，这意味着不需要安装或管理\n3、一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件\n4、SQLite 是非常小的，是轻量级的，完全配置时小于 400KB，省略可选功能配置时小于250KB\n5、SQLite 是自给自足的，这意味着不需要任何外部的依赖\n6、SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问\n\n1.ACID事务\n2.零配置 – 无需安装和管理配置\n3.储存在单一磁盘文件中的一个完整的数据库\n4.数据库文件可以在不同字节顺序的机器间自由的共享\n5.支持数据库大小至2TB\n6.足够小, 大致13万行C代码, 4.43M\n7.比一些流行的数据库在大部分普通数据库操作要快\n8.简单, 轻松的API\n9.包含TCL绑定, 同时通过Wrapper支持其他语言的绑定\n10.良好注释的源代码, 并且有着90%以上的测试覆盖率\n11.独立: 没有额外依赖\n12.源码完全的开源, 你可以用于任何用途, 包括出售它\n13.支持多种开发语言，C, C++, PHP, Perl, Java, C#,Python, Ruby等\n```\n\nSQLite将数据划分为以下几种存储类型：\n\n```OC\nNULL ： NULL 值\ninteger : 整型值\nreal : 浮点值\ntext : 文本字符串\nblob : 二进制数据（比如文件）\n没有 Boolean 没有用于存储日期和/或时间的类型，可用其他类型代替\n实际上SQLite是无类型的，就算声明为integer类型，还是能存储字符串文本（主键除外）\n```\n\n#### 2、FMDB使用\n\n1、什么是FMDB\n\n> iOS中使用C语言函数对原生SQLite数据库进行增删改查操作，复杂麻烦，于是，就出现了一系列将SQLite API封装的库，如FMDB  \nFMDB是针对libsqlite3框架进行封装的三方，它以OC的方式封装了SQLite的C语言的API，使用步骤与SQLite相似\n\n2、FMDB优缺点\n\n```OC\nFMDB的优点是：\n(1) 使用时面向对象，避免了复杂的C语言代码\n(2) 对比苹果自带的Core Data框架，更加轻量级和灵活\n(3) 提供多线程安全处理数据库操作方法，保证多线程安全跟数据准确性\n\nFMDB缺点：\n(1) 因为是OC语言开发，只能在iOS平台上使用，所以实现跨平台操作时存在限制性\n```\n\n3、相关类\n\n```OC\nFMDatabase：一个FMDatabase对象代表一个单独的SQLite数据库，通过SQLite语句执行数据库的增删改查操作\n\nFMResultSet：使用FMDatabase对象查询数据库后的结果集\n\nFMDatabaseQueue：用于多线程操作数据库，它保证线程安全\n```\n\n3、sqlite锁\n\n```OC\nsqlite的锁的粒度比较粗，是数据库级别的，也就是说即使只是对某个页进行读写操作，sqlite也会封锁整个数据库。这种策略降低了读-写事务和写-写事务间的并发程度，但是大大简化了程序设计，减小了整个程序的大小。所以，sqlite的适用场景为：较少次写入数据，大量、多次读出数据。这也是sqlite作为一款嵌入式数据库的设计初衷。\n\n\nsqlite读事务获取锁的过程：UNLOCKED-->SHARED->进行读取操作\n\nsqlite写事务获取锁的过程：UNLOCKED->SHARED->RESERVED->创建回滚日志，在数据库内存页中写入数据，刷新日志文件到磁盘->PENDING->EXCLUSIVE->刷新内存页中的数据到磁盘。\n\nSQLite使用锁逐步上升机制，为了写数据库，连接需要逐级地获得排它锁。\n\nSQLite有5个不同的锁状态：\n未加锁(UNLOCKED)\n共享 (SHARED)\n保留(RESERVED)\n待定(PENDING)\n排它(EXCLUSIVE)。\n\n每个数据库连接在同一时刻只能处于其中一个状态。每 种状态(未加锁状态除外)都有一种锁与之对应。\n\n最初的状态是未加锁状态，在此状态下，连接还没有存取数据库。当连接到了一个数据库，甚至已经用BEGIN开始了一个事务时，连接都还处于未加锁状态。\n\n未加锁状态的下一个状态是共享状态。为了能够从数据库中读(不写)数据，连接必须首先进入共享状态，也就是说首先要获得一个共享锁。多个连接可以 同时获得并保持共享锁，也就是说多个连接可以同时从同一个数据库中读数据。但哪怕只有一个共享锁还没有释放，也不允许任何连接写数据库。\n\n如果一个连接想要写数据库，它必须首先获得一个保留锁。一个数据库上同时只能有一个保留锁。保留锁可以与共享锁共存，保留锁是写数据库的第1阶段。保留锁即不阻止其它拥有共享锁的连接继续读数据库，也不阻止其它连接获得新的共享锁。\n\n一旦一个连接获得了保留锁，它就可以开始处理数据库修改操作了，尽管这些修改只能在缓冲区中进行，而不是实际地写到磁盘。对读出内容所做的修改保存在内存缓冲区中。\n\n当连接想要提交修改(或事务)时，需要将保留锁提升为排它锁。为了得到排它锁，还必须首先将保留锁提升为待定锁。获得待定锁之后，其它连接就不能再获得新的共享锁了，但已经拥有共享锁的连接仍然可以继续正常读数据库。此时，拥有等待锁的连接等待其它拥有共享锁的连接完成工作并释放其共享锁。\n\n一旦所有其它共享锁都被释放，拥有待定锁的连接就可以将其锁提升至排它锁，此时就可以自由地对数据库进行修改了。所有以前对缓冲区所做的修改都会被写到数据库文件。\n```\n\n4、sqlite的死锁\n\n```OC\n举例：\n\n两个连接 A 和 B 同时但完全独立地工作于同一个数据库。A执行第1条命令，B执行第2、3条，等等。 \n\nA连接                                     B连接 \nsqlite> BEGIN; \n                                    sqlite> BEGIN; \n                                    sqlite> INSERT INTO foo VALUES('x'); \nsqlite> SELECT * FROM foo; \n                                    sqlite> COMMIT; \n                                    SQL error: database is locked \nsqlite> INSERT INTO foo VALUES ('x'); \nSQL error: database is locked\n\n两个连接都在死锁中结束。B首先尝试写数据库，也就拥有了一个待定锁。A再试图写，但当其INSERT语句试图将共享锁提升为保留锁时失败。\n\n为了讨论的方便，假设连接A和B都一直等待数据库可写。那么此时，其它的连接甚至都不能够再读数据库了，因为B拥有待定锁(它能阻止其它连接获得共享锁)。那么时此，不仅A和B不能工作，其它所有进程都不能再操作此数据库了。\n\n解决死锁的办法：sqlite用锁超时的机制处理死锁\n\n如果避免此情况呢？答案是采用正确的事务类型来完成工作。 \n\n\n事务的种类\nSQLite有三种不同的事务，使用不同的锁状态。\n\n事务可以开始于：DEFERRED、MMEDIATE 或 EXCLUSIVE。\n\n事务类型在BEGIN命令中指定： \nBEGIN [ DEFERRED | IMMEDIATE | EXCLUSIVE ] TRANSACTION;\n\n一个DEFERRED事务不获取任何锁(直到它需要锁的时候)，BEGIN语句本身也不会做什么事情——它开始于UNLOCK状态。默认情况下就是这样的，如果仅仅用BEGIN开始一个事务，那么事务就是DEFERRED的，同时它不会获取任何锁；当对数据库进行第一次读操作时，它会获取 SHARED锁；同样，当进行第一次写操作时，它会获取RESERVED锁。\n\nIMMEDIATE事务会尝试获取RESERVED锁。如果成功，BEGIN IMMEDIATE保证没有别的连接可以写数据库。但是，别的连接可以对数据库进行读操作；但是，RESERVED锁会阻止其它连接的BEGIN IMMEDIATE或者BEGIN EXCLUSIVE命令，当其它连接执行上述命令时，会返回SQLITE_BUSY错误。这时你就可以对数据库进行修改操作了，但是你还不能提交，当你 COMMIT时，会返回SQLITE_BUSY错误，这意味着还有其它的读事务没有完成，得等它们执行完后才能提交事务。\n\nEXCLUSIVE事务会试着获取对数据库的EXCLUSIVE锁。这与IMMEDIATE类似，但是一旦成功，EXCLUSIVE事务保证没有其它的连接，所以就可对数据库进行读写操作了。\n\n上节那个例子的问题在于两个连接最终都想写数据库，但是它们都没有放弃各自原来的锁，最终，SHARED锁导致了问题的出现。如果两个连接都以 BEGIN IMMEDIATE开始事务，那么死锁就不会发生。在这种情况下，在同一时刻只能有一个连接进入BEGIN IMMEDIATE，其它的连接就得等待。BEGIN IMMEDIATE和BEGIN EXCLUSIVE通常被写事务使用。就像同步机制一样，它防止了死锁的产生。\n\n基本的准则是：如果你正在使用的数据库没有其它的连接，用BEGIN就足够了。但是，如果你使用的数据库有其它的连接也会对数据库进行写操作，就得使用BEGIN IMMEDIATE或BEGIN EXCLUSIVE开始你的事务。\n\n那么，如何启动，提交还有回滚事务呢？SQLite中分别是：BEGIN、COMMIT和ROLLBACK。\n```\n\n5、数据库知识\n\n1、数据库分类\n\n```OC\n关系型数据库\n\nMySQL等\n\n非关系型数据库\n\nMongoDB等\n```\n\n2、SQLite常用语句的使用\n\n```OC\n1、常用关键字\nselect、insert、update、delete、from、create、where、desc、order、by、group、table、alter、view、index等等\n2、语句种类\nDDL：数据定义语句 ： create（创建）、alter（修改）、drop(删除)\ncreate table if not exists 表名 (字段名1 字段类型1, 字段名2 字段类型2, …) ;\ncreate table t_student (id integer, name text, age integer, score real) ;\nALTER TABLE table_name RENAME TO new_table_naler ;\nDROP table if exists 表名 ;\nDROP table t_student ;\n--------------------------------------------------\nDML：数据操作语句\n包括insert、update、delete等操作\n上面的3种操作分别用于添加、修改、删除表中的数据\ninsert into 表名 (字段1, 字段2, …) values (字段1的值, 字段2的值, …) ;\ninsert into t_student (name, age) values (‘mj’, 10) ;\nupdate 表名 set 字段1 = 字段1的值, 字段2 = 字段2的值, … ;\nupdate t_student set name = ‘jack’, age = 20 ;\ndelete from 表名 ;\ndelete from t_student ;\n--------------------------------------------------\nDQL：数据库查询语句\n关键字select是DQL（也是所有SQL）用得最多的操作\n--------------------------------------------------\nlike子句\n百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。\nSELECT FROM table_name\nWHERE column LIKE 'XXXX%'\nor \nSELECT FROM table_name\nWHERE column LIKE '%XXXX%'\nor\nSELECT FROM table_name\nWHERE column LIKE 'XXXX_'\nor\nSELECT FROM table_name\nWHERE column LIKE '_XXXX'\nor\nSELECT FROM table_name\nWHERE column LIKE '_XXXX_'\n--------------------------------------------------\nGlob 子句 ：和LIKE一样是通配符匹配， 与 LIKE 不同的是，GLOB 是大小写敏感的\n星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。这些符号可以被组合使用。\n--------------------------------------------------\nLIMIT 子句用于限制由 SELECT 语句返回的数据数量。\nSELECT column1, column2, columnN \nFROM table_name\nLIMIT [no of rows] OFFSET [row num]\nSQLite 引擎将返回从OFFSET下一行开始 [no of rows] 行。\n--------------------------------------------------\nORDER BY 子句是用来基于一个或多个列按升序或降序顺序排列数据。\nSELECT column-list \nFROM table_name \n[WHERE condition] \n[ORDER BY column1, column2, .. columnN] [ASC | DESC];\n--------------------------------------------------\nGROUP BY 子句用于与 SELECT 语句一起使用，来对相同的数据进行分组。\nSELECT column-list\nFROM table_name\nWHERE [ conditions ]\nGROUP BY column1, column2....columnN\nORDER BY column1, column2....columnN\n--------------------------------------------------\nHAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。\nWHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。\nSELECT\nFROM\nWHERE\nGROUP BY\nHAVING\nORDER BY\n在一个查询中，HAVING 子句必须放在 GROUP BY 子句之后，必须放在 ORDER BY 子句之前。下面是包含 HAVING 子句的 SELECT 语句的语法：\nSELECT column1, column2\nFROM table1, table2\nWHERE [ conditions ]\nGROUP BY column1, column2\nHAVING [ conditions ]\nORDER BY column1, column2\n--------------------------------------------------\nDISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录。\nSELECT DISTINCT column1, column2,.....columnN \nFROM table_name\nWHERE [condition]\n```\n\n3、SQLite的索引\n\n```OC\n索引（Index）是一种特殊的查找表，数据库搜索引擎用来加快数据检索。简单地说，索引是一个指向表中数据的指针。一个数据库中的索引与一本书后边的索引是非常相似的。\n\n1、索引不应该使用在较小的表上。\n2、索引不应该使用在有频繁的大批量的更新或插入操作的表上。\n3、索引不应该使用在含有大量的 NULL 值的列上。\n4、索引不应该使用在频繁操作的列上。\n\nCREATE INDEX 命令\nCREATE INDEX index_name ON table_name;\n\n\n唯一索引：使用唯一索引不仅是为了性能，同时也为了数据的完整性。唯一索引不允许任何重复的值插入到表中。\n\nCREATE INDEX index_name\non table_name (column_name);\n\n组合索引：组合索引是基于一个表的两个或多个列上创建的索引。\n\nCREATE INDEX index_name\non table_name (column1, column2);\n\n隐式索引\n\n隐式索引是在创建对象时，由数据库服务器自动创建的索引。索引自动创建为主键约束和唯一约束。\n\n\nDROP INDEX 命令\n\n一个索引可以使用 SQLite 的 DROP 命令删除。当删除索引时应特别注意，因为性能可能会下降或提高。\n\nDROP INDEX index_name;\n```\n\n4、SQLite的约束\n\n```OC\n约束是在表的数据列上强制执行的规则。这些是用来限制可以插入到表中的数据类型。这确保了数据库中数据的准确性和可靠性。\n\nNOT NULL 约束：确保某列不能有 NULL 值。\nDEFAULT 约束：当某列没有指定值时，为该列提供默认值。\nUNIQUE 约束：确保某列中的所有值是不同的。\nPRIMARY Key 约束：唯一标识数据库表中的各行/记录。\nCHECK 约束：CHECK 约束确保某列中的所有值满足一定条件。\n\n\nCREATE TABLE COMPANY3(\n   ID INT PRIMARY KEY     NOT NULL,\n   NAME           TEXT    NOT NULL,\n   AGE            INT     NOT NULL UNIQUE,\n   ADDRESS        CHAR(50) DEFAULT 'home',\n   SALARY         REAL    CHECK(SALARY > 0)\n);\n```\n\n5、SQLite事务\n\n```OC\n1、事务（Transaction）是一个对数据库执行工作单元。事务（Transaction）是以逻辑顺序完成的工作单位或序列，可以是由用户手动操作完成，也可以是由某种数据库程序自动完成。\n\n2、事务（Transaction）是指一个或多个更改数据库的扩展。例如，如果您正在创建一个记录或者更新一个记录或者从表中删除一个记录，那么您正在该表上执行事务。重要的是要控制事务以确保数据的完整性和处理数据库错误。\n\n3、事务（Transaction）具有以下四个标准属性，通常根据首字母缩写为 ACID：\n\n原子性（Atomicity）：确保工作单位内的所有操作都成功完成，否则，事务会在出现故障时终止，之前的操作也会回滚到以前的状态。\n一致性（Consistency)：确保数据库在成功提交的事务上正确地改变状态。\n隔离性（Isolation）：使事务操作相互独立和透明。\n持久性（Durability）：确保已提交事务的结果或效果在系统发生故障的情况下仍然存在。\n\n4、事务控制\n\nBEGIN TRANSACTION：开始事务处理 或者BEGIN。\n\n//中间是自己需要完成的数据库操作\n\nCOMMIT：保存更改，或者可以使用 END TRANSACTION 命令。\nROLLBACK：回滚所做的更改。\n\nsqlite> BEGIN;\nsqlite> DELETE FROM COMPANY WHERE AGE = 25;\nsqlite> ROLLBACK;\n```\n\n更多语法：https://www.w3cschool.cn/sqlite/sqlite-pragma.html\n\n6、SQLite的提高查询速度方法\n\n```OC\n1、关键搜索词索引的建立\n\n索引并不是越多越好\n\n注意会增大数据库大小，可以显著提高select的速度，同时也可以提高update的速度\n\n2、查询sql的优化\n\n尽量查找id\n\n减少全表扫描 如：\n\n避免sql中 where子句后面使用表达式\n\n避免where子句中使用 or连接，可以通过联合\n\nin not in 也要慎用\n```\n\n更多sql优化：https://blog.csdn.net/wenjianzhiqin/article/details/81017468\n\n7、提高写入速度\n\n```OC\n1、事务开启可以提高查询效率，因为避免了频繁的函数调用，插入后一次性提交。\n\n2、关闭写入同步 \n\n在SQLite中，数据库配置的参数都由编译指示（pragma）来实现的，而其中synchronous选项有三种可选状态，分别是full、normal、off。full写入速度最慢，但保证数据是安全的，不受断电、系统崩溃等影响，而off可以加速数据库的一些操作，但如果系统崩溃或断电，则数据库可能会损毁。如果有定期备份的机制，而且少量数据丢失可接受\n\nsqlite3_exec(db,\"PRAGMA synchronous = OFF; \",0,0,0);  \n\n3、使用执行准备\n\n就算开起了事务，SQLite仍然要对循环中每一句SQL语句进行“词法分析”和“语法分析”，这对于同时插入大量数据的操作来说，简直就是浪费时间。使用执行准备，即先将SQL语句编译好，然后再一步一步（或一行一行）地执行。\n```\n\n四、沙盒外的持久化方式\n\n沙盒内的方式在应用被删除后数据都会丢失，如果想要不丢失则需要使用KeyChain。\n\nKeyChain本质是一个sqlite数据库，其保存的所有数据都是加密过的。\n\nKeyChain分为私有和公有，公有则需要指定group，一个group中的应用可以共享此KeyChain。\n\n使用KeyChain过程中要理解下面几个问题：\n\n```OC\n1：自己使用的KeyChain和系统自带的KeyChain数据是隔离的，内部应该是不同数据库文件；\n\n2：KeyChain数据可备份到iCloud中；\n\n3：不需要联网，也不用登陆iCloud账号；一个设备一个sqlite数据库，但是不同应用组不共享数据；\n\n4：要在另一台设备上使用当前设备存储的KeyChain信息，需要当前设备进行数据备份，\n再在另一设备上复原数据；比较常用的是iCloud备份方式；\n\n5：系统自带的KeyChain中账号密码分类数据可在系统设置->账号与密码里面看到，\n你退出iCloud账号还是存在，只是iCloud会帮你备份如果你设置了的话；这个和照片是一样的道理。\n```\n\nhttp://www.cocoachina.com/articles/25733\n","slug":"iOS/iOS持久化方式","published":1,"updated":"2021-06-22T07:14:19.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zj0014j0360wrp4ex2","content":"<h2 id=\"iOS持久化方式\"><a href=\"#iOS持久化方式\" class=\"headerlink\" title=\"iOS持久化方式\"></a>iOS持久化方式</h2><blockquote>\n<p>1.NSUserDefaults<br>2.NSKeyedArchiver<br>3.沙盒Document<br>4.sqlite3<br>5.KeyChain</p>\n</blockquote>\n<p>持久化分为两类：沙盒内和沙盒外。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、沙盒目录结构和各个目录的路径获取方法\"><a href=\"#一、沙盒目录结构和各个目录的路径获取方法\" class=\"headerlink\" title=\"一、沙盒目录结构和各个目录的路径获取方法\"></a>一、沙盒目录结构和各个目录的路径获取方法</h2><blockquote>\n<p><strong>AppName.app</strong>:  应用程序包目录<br><strong>Documents</strong>：存储用户数据，您应该将所有的应用程序数据文件写入到这个目录下。该路径可通过配置实现iTunes共享文件。会被iTunes同步。<br><strong>Library</strong>：有两个子目录Preferences和Caches，除Caches以外，都会被iTunes备份。<br><strong>Preferences</strong>：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好。结果在目录下面以plist的方式存储。<br><strong>Caches</strong>：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。<br><strong>SystemData</strong>：系统数据<br><strong>tmp</strong>：用来存放应用再次启动时不需要的临时文件，该目录下的东西随时可能被系统清理掉，不会被iTunes同步。</p>\n</blockquote>\n<h3 id=\"沙盒主目录\"><a href=\"#沙盒主目录\" class=\"headerlink\" title=\"沙盒主目录\"></a>沙盒主目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *homeDir = NSHomeDirectory();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Documents目录\"><a href=\"#Documents目录\" class=\"headerlink\" title=\"Documents目录\"></a>Documents目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *documentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Library目录\"><a href=\"#Library目录\" class=\"headerlink\" title=\"Library目录\"></a>Library目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取Library的目录路径</span><br><span class=\"line\">NSString *libraryDir = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取Caches目录路径</span><br><span class=\"line\">NSString *cachesDir = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tmp目录\"><a href=\"#tmp目录\" class=\"headerlink\" title=\"tmp目录\"></a>tmp目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *tmpDir =  NSTemporaryDirectory();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AppBundle目录路径\"><a href=\"#AppBundle目录路径\" class=\"headerlink\" title=\"AppBundle目录路径\"></a>AppBundle目录路径</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取AppBundle目录路径</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, [[NSBundle mainBundle] bundlePath]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSString *imagePath = [[NSBundle mainBundle] pathForResource:@&quot;apple&quot; ofType:@&quot;png&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">UIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、沙盒内的持久化方式\"><a href=\"#二、沙盒内的持久化方式\" class=\"headerlink\" title=\"二、沙盒内的持久化方式\"></a>二、沙盒内的持久化方式</h2><h3 id=\"NSKeyedArchiver归档\"><a href=\"#NSKeyedArchiver归档\" class=\"headerlink\" title=\"NSKeyedArchiver归档\"></a>NSKeyedArchiver归档</h3><h4 id=\"1、什么是归档\"><a href=\"#1、什么是归档\" class=\"headerlink\" title=\"1、什么是归档\"></a>1、什么是归档</h4><blockquote>\n<p>归档是一种很常用的文件存储方法，可以存储各种类型的对象(以文件的方式保存)。<br>官方提供了NSKeyedArchiver和NSKeyedUnarchiver两个类以供我们把对象序列化和反序列化，在存储之前使用NSKeyedArchiver进行序列化操作，并且写入本地文件，在使用之前使用NSKeyedUnarchiver进行反序列化的操作，以供提取使用</p>\n</blockquote>\n<h4 id=\"2、使用场景\"><a href=\"#2、使用场景\" class=\"headerlink\" title=\"2、使用场景\"></a>2、使用场景</h4><blockquote>\n<p>如果是简单的基础数据类型，我们一般使用的是NSUserDefaults 或者 plist文件存储<br>对于一些量级比较大的，有规律可循的我们一般使用sqlite3数据库、coreData等<br>但是对于对象级别，轻量级的存储，我们一般可以使用归档来完成。</p>\n</blockquote>\n<h4 id=\"3、归档的使用方法\"><a href=\"#3、归档的使用方法\" class=\"headerlink\" title=\"3、归档的使用方法\"></a>3、归档的使用方法</h4><p>1、了解NSCoding 和 NSSecureCoding，NSCoding安全性不高，所以iOS6的时候，苹果引入了NSSecureCoding协议，加强安全性。</p>\n<p>2、需要序列化的类需要实现 NSCoding 或者 NSSecureCoding 协议（推荐使用NSSecureCoding），并复写方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)encodeWithCoder:(NSCoder *)coder</span><br><span class=\"line\">- (instancetype)initWithCoder:(NSCoder *)coder</span><br></pre></td></tr></table></figure>\n\n<p>3、NSKeyedArchiver 和 NSKeyedUnarchiver，NSKeyedArchiver将自定义的类转换成NSData实例，类里面每一个值对应一个Key；NSKeyedUnarchiver将NSData实例根据key值还原成自定义的类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// NSKeyedArchiver 归档操作现在不推荐使用下面两个操作(被苹果废弃)</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSData *)archivedDataWithRootObject:(id)rootObject </span><br><span class=\"line\">+ (BOOL)archiveRootObject:(id)rootObject toFile:(NSString *)path</span><br><span class=\"line\"></span><br><span class=\"line\">// 推荐使用</span><br><span class=\"line\"></span><br><span class=\"line\">+ (nullable NSData *)archivedDataWithRootObject:(id)object requiringSecureCoding:(BOOL)requiresSecureCoding error:(NSError **)error</span><br></pre></td></tr></table></figure>\n\n<p>4、归档、解档</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSData * data = [NSKeyedArchiver archivedDataWithRootObject:me requiringSecureCoding:YES error:&amp;error];</span><br><span class=\"line\"></span><br><span class=\"line\">Person *newPerson = (Person *)[NSKeyedUnarchiver unarchivedObjectOfClass:Person.class fromData:data error:&amp;error];</span><br></pre></td></tr></table></figure>\n\n<p>5、例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface Person : NSObject</span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\">- (void)encodeWithCoder:(NSCoder *)coder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [coder encodeObject:self.name forKey:@&quot;name&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (instancetype)initWithCoder:(NSCoder *)coder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        self.name = [coder decodeObjectForKey:@&quot;name&quot;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+ (BOOL)supportsSecureCoding &#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Person *me = [[Person alloc]init];</span><br><span class=\"line\">me.name = @&quot;小白&quot;;</span><br><span class=\"line\">NSString *homeDir = NSHomeDirectory();</span><br><span class=\"line\"></span><br><span class=\"line\">NSError *error;</span><br><span class=\"line\">NSData * data = [NSKeyedArchiver archivedDataWithRootObject:me requiringSecureCoding:YES error:&amp;error];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;%@&quot;,error);</span><br><span class=\"line\">Person *newPerson = (Person *)[NSKeyedUnarchiver unarchivedObjectOfClass:Person.class fromData:data error:&amp;error];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,error);</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,newPerson.name);</span><br></pre></td></tr></table></figure>\n\n<p>6、归档文件的存放</p>\n<blockquote>\n<p>归档操作生成的data文件，可以通过文件存储的方式，存放到沙盒中</p>\n</blockquote>\n<h3 id=\"NSUserDefaults\"><a href=\"#NSUserDefaults\" class=\"headerlink\" title=\"NSUserDefaults\"></a>NSUserDefaults</h3><h4 id=\"1、存取\"><a href=\"#1、存取\" class=\"headerlink\" title=\"1、存取\"></a>1、存取</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [NSUserDefaults standardUserDefaults]获取NSUserDefaults对象，以key-value方式进行持久化操作。</span><br><span class=\"line\">存</span><br><span class=\"line\">[[NSUserDefaults standardUserDefaults] setObject:array forKey:@&quot;array&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">取</span><br><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithArray:[defaults objectForKey:@&quot;mutableArr&quot;]];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、应用场景\"><a href=\"#2、应用场景\" class=\"headerlink\" title=\"2、应用场景\"></a>2、应用场景</h4><blockquote>\n<p>存放一些基础数据、如判断条件等，自动登录信息。</p>\n</blockquote>\n<h4 id=\"3、注意事项\"><a href=\"#3、注意事项\" class=\"headerlink\" title=\"3、注意事项\"></a>3、注意事项</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、可以存储的对象有NSString、NSArray、NSDictionary、NSData、NSNumber</span><br><span class=\"line\"></span><br><span class=\"line\">2、我们还要注意NSUserDefaults存储的对象全是不可变的，就算你存的时候是可变的，最后都会被转成不可变的</span><br><span class=\"line\"></span><br><span class=\"line\">比如 NSMutableArray 存储后取出时NSArray，是不可变的，需要重新构建 NSMutableArray</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithArray:[defaults objectForKey:@&quot;mutableArr&quot;]];</span><br><span class=\"line\"></span><br><span class=\"line\">3、对相同的key赋值等于一次覆盖，所以请保证key的唯一性</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Plist存储、文件存储\"><a href=\"#Plist存储、文件存储\" class=\"headerlink\" title=\"Plist存储、文件存储\"></a>Plist存储、文件存储</h3><h4 id=\"1、plist\"><a href=\"#1、plist\" class=\"headerlink\" title=\"1、plist\"></a>1、plist</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以存储的对象有NSString、NSArray、NSDictionary、NSData、NSNumber</span><br><span class=\"line\"></span><br><span class=\"line\">写入使用writeToFile，读取使用xxxWithContentsOfFile；需要指定文件路径。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">写入：</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray * array = [[NSMutableArray alloc]initWithObjects:@&quot;小白&quot;, @&quot;蜡笔小新&quot;, nil];</span><br><span class=\"line\"></span><br><span class=\"line\">//获取Document目录地址，拼接上文件名称</span><br><span class=\"line\">NSString *path = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@&quot;data.plist&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">[array writeToFile:path atomically:YES];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">读取：</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray * new_array = [NSMutableArray arrayWithContentsOfFile:path];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;%@&quot;,new_array);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、文件\"><a href=\"#2、文件\" class=\"headerlink\" title=\"2、文件\"></a>2、文件</h4><blockquote>\n<p>这里要和plist区分一下，plist方式是字典/数组数据格式写入文件；而这里的文件方式不限数据格式。</p>\n</blockquote>\n<h3 id=\"数据库-sqlite3-（FMDB）\"><a href=\"#数据库-sqlite3-（FMDB）\" class=\"headerlink\" title=\"数据库 sqlite3 （FMDB）\"></a>数据库 sqlite3 （FMDB）</h3><p>数据库无疑是大量数据最好的持久化方案，数据库目前有：sqlite、CoreData和Realm等。</p>\n<h4 id=\"1、SQLite\"><a href=\"#1、SQLite\" class=\"headerlink\" title=\"1、SQLite\"></a>1、SQLite</h4><p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、不需要一个单独的服务器进程或操作的系统（无服务器的）</span><br><span class=\"line\">2、SQLite 不需要配置，这意味着不需要安装或管理</span><br><span class=\"line\">3、一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件</span><br><span class=\"line\">4、SQLite 是非常小的，是轻量级的，完全配置时小于 400KB，省略可选功能配置时小于250KB</span><br><span class=\"line\">5、SQLite 是自给自足的，这意味着不需要任何外部的依赖</span><br><span class=\"line\">6、SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问</span><br><span class=\"line\"></span><br><span class=\"line\">1.ACID事务</span><br><span class=\"line\">2.零配置 – 无需安装和管理配置</span><br><span class=\"line\">3.储存在单一磁盘文件中的一个完整的数据库</span><br><span class=\"line\">4.数据库文件可以在不同字节顺序的机器间自由的共享</span><br><span class=\"line\">5.支持数据库大小至2TB</span><br><span class=\"line\">6.足够小, 大致13万行C代码, 4.43M</span><br><span class=\"line\">7.比一些流行的数据库在大部分普通数据库操作要快</span><br><span class=\"line\">8.简单, 轻松的API</span><br><span class=\"line\">9.包含TCL绑定, 同时通过Wrapper支持其他语言的绑定</span><br><span class=\"line\">10.良好注释的源代码, 并且有着90%以上的测试覆盖率</span><br><span class=\"line\">11.独立: 没有额外依赖</span><br><span class=\"line\">12.源码完全的开源, 你可以用于任何用途, 包括出售它</span><br><span class=\"line\">13.支持多种开发语言，C, C++, PHP, Perl, Java, C#,Python, Ruby等</span><br></pre></td></tr></table></figure>\n\n<p>SQLite将数据划分为以下几种存储类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NULL ： NULL 值</span><br><span class=\"line\">integer : 整型值</span><br><span class=\"line\">real : 浮点值</span><br><span class=\"line\">text : 文本字符串</span><br><span class=\"line\">blob : 二进制数据（比如文件）</span><br><span class=\"line\">没有 Boolean 没有用于存储日期和/或时间的类型，可用其他类型代替</span><br><span class=\"line\">实际上SQLite是无类型的，就算声明为integer类型，还是能存储字符串文本（主键除外）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、FMDB使用\"><a href=\"#2、FMDB使用\" class=\"headerlink\" title=\"2、FMDB使用\"></a>2、FMDB使用</h4><p>1、什么是FMDB</p>\n<blockquote>\n<p>iOS中使用C语言函数对原生SQLite数据库进行增删改查操作，复杂麻烦，于是，就出现了一系列将SQLite API封装的库，如FMDB<br>FMDB是针对libsqlite3框架进行封装的三方，它以OC的方式封装了SQLite的C语言的API，使用步骤与SQLite相似</p>\n</blockquote>\n<p>2、FMDB优缺点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FMDB的优点是：</span><br><span class=\"line\">(1) 使用时面向对象，避免了复杂的C语言代码</span><br><span class=\"line\">(2) 对比苹果自带的Core Data框架，更加轻量级和灵活</span><br><span class=\"line\">(3) 提供多线程安全处理数据库操作方法，保证多线程安全跟数据准确性</span><br><span class=\"line\"></span><br><span class=\"line\">FMDB缺点：</span><br><span class=\"line\">(1) 因为是OC语言开发，只能在iOS平台上使用，所以实现跨平台操作时存在限制性</span><br></pre></td></tr></table></figure>\n\n<p>3、相关类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FMDatabase：一个FMDatabase对象代表一个单独的SQLite数据库，通过SQLite语句执行数据库的增删改查操作</span><br><span class=\"line\"></span><br><span class=\"line\">FMResultSet：使用FMDatabase对象查询数据库后的结果集</span><br><span class=\"line\"></span><br><span class=\"line\">FMDatabaseQueue：用于多线程操作数据库，它保证线程安全</span><br></pre></td></tr></table></figure>\n\n<p>3、sqlite锁</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite的锁的粒度比较粗，是数据库级别的，也就是说即使只是对某个页进行读写操作，sqlite也会封锁整个数据库。这种策略降低了读-写事务和写-写事务间的并发程度，但是大大简化了程序设计，减小了整个程序的大小。所以，sqlite的适用场景为：较少次写入数据，大量、多次读出数据。这也是sqlite作为一款嵌入式数据库的设计初衷。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sqlite读事务获取锁的过程：UNLOCKED--&gt;SHARED-&gt;进行读取操作</span><br><span class=\"line\"></span><br><span class=\"line\">sqlite写事务获取锁的过程：UNLOCKED-&gt;SHARED-&gt;RESERVED-&gt;创建回滚日志，在数据库内存页中写入数据，刷新日志文件到磁盘-&gt;PENDING-&gt;EXCLUSIVE-&gt;刷新内存页中的数据到磁盘。</span><br><span class=\"line\"></span><br><span class=\"line\">SQLite使用锁逐步上升机制，为了写数据库，连接需要逐级地获得排它锁。</span><br><span class=\"line\"></span><br><span class=\"line\">SQLite有5个不同的锁状态：</span><br><span class=\"line\">未加锁(UNLOCKED)</span><br><span class=\"line\">共享 (SHARED)</span><br><span class=\"line\">保留(RESERVED)</span><br><span class=\"line\">待定(PENDING)</span><br><span class=\"line\">排它(EXCLUSIVE)。</span><br><span class=\"line\"></span><br><span class=\"line\">每个数据库连接在同一时刻只能处于其中一个状态。每 种状态(未加锁状态除外)都有一种锁与之对应。</span><br><span class=\"line\"></span><br><span class=\"line\">最初的状态是未加锁状态，在此状态下，连接还没有存取数据库。当连接到了一个数据库，甚至已经用BEGIN开始了一个事务时，连接都还处于未加锁状态。</span><br><span class=\"line\"></span><br><span class=\"line\">未加锁状态的下一个状态是共享状态。为了能够从数据库中读(不写)数据，连接必须首先进入共享状态，也就是说首先要获得一个共享锁。多个连接可以 同时获得并保持共享锁，也就是说多个连接可以同时从同一个数据库中读数据。但哪怕只有一个共享锁还没有释放，也不允许任何连接写数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">如果一个连接想要写数据库，它必须首先获得一个保留锁。一个数据库上同时只能有一个保留锁。保留锁可以与共享锁共存，保留锁是写数据库的第1阶段。保留锁即不阻止其它拥有共享锁的连接继续读数据库，也不阻止其它连接获得新的共享锁。</span><br><span class=\"line\"></span><br><span class=\"line\">一旦一个连接获得了保留锁，它就可以开始处理数据库修改操作了，尽管这些修改只能在缓冲区中进行，而不是实际地写到磁盘。对读出内容所做的修改保存在内存缓冲区中。</span><br><span class=\"line\"></span><br><span class=\"line\">当连接想要提交修改(或事务)时，需要将保留锁提升为排它锁。为了得到排它锁，还必须首先将保留锁提升为待定锁。获得待定锁之后，其它连接就不能再获得新的共享锁了，但已经拥有共享锁的连接仍然可以继续正常读数据库。此时，拥有等待锁的连接等待其它拥有共享锁的连接完成工作并释放其共享锁。</span><br><span class=\"line\"></span><br><span class=\"line\">一旦所有其它共享锁都被释放，拥有待定锁的连接就可以将其锁提升至排它锁，此时就可以自由地对数据库进行修改了。所有以前对缓冲区所做的修改都会被写到数据库文件。</span><br></pre></td></tr></table></figure>\n\n<p>4、sqlite的死锁</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">举例：</span><br><span class=\"line\"></span><br><span class=\"line\">两个连接 A 和 B 同时但完全独立地工作于同一个数据库。A执行第1条命令，B执行第2、3条，等等。 </span><br><span class=\"line\"></span><br><span class=\"line\">A连接                                     B连接 </span><br><span class=\"line\">sqlite&gt; BEGIN; </span><br><span class=\"line\">                                    sqlite&gt; BEGIN; </span><br><span class=\"line\">                                    sqlite&gt; INSERT INTO foo VALUES(&#x27;x&#x27;); </span><br><span class=\"line\">sqlite&gt; SELECT * FROM foo; </span><br><span class=\"line\">                                    sqlite&gt; COMMIT; </span><br><span class=\"line\">                                    SQL error: database is locked </span><br><span class=\"line\">sqlite&gt; INSERT INTO foo VALUES (&#x27;x&#x27;); </span><br><span class=\"line\">SQL error: database is locked</span><br><span class=\"line\"></span><br><span class=\"line\">两个连接都在死锁中结束。B首先尝试写数据库，也就拥有了一个待定锁。A再试图写，但当其INSERT语句试图将共享锁提升为保留锁时失败。</span><br><span class=\"line\"></span><br><span class=\"line\">为了讨论的方便，假设连接A和B都一直等待数据库可写。那么此时，其它的连接甚至都不能够再读数据库了，因为B拥有待定锁(它能阻止其它连接获得共享锁)。那么时此，不仅A和B不能工作，其它所有进程都不能再操作此数据库了。</span><br><span class=\"line\"></span><br><span class=\"line\">解决死锁的办法：sqlite用锁超时的机制处理死锁</span><br><span class=\"line\"></span><br><span class=\"line\">如果避免此情况呢？答案是采用正确的事务类型来完成工作。 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">事务的种类</span><br><span class=\"line\">SQLite有三种不同的事务，使用不同的锁状态。</span><br><span class=\"line\"></span><br><span class=\"line\">事务可以开始于：DEFERRED、MMEDIATE 或 EXCLUSIVE。</span><br><span class=\"line\"></span><br><span class=\"line\">事务类型在BEGIN命令中指定： </span><br><span class=\"line\">BEGIN [ DEFERRED | IMMEDIATE | EXCLUSIVE ] TRANSACTION;</span><br><span class=\"line\"></span><br><span class=\"line\">一个DEFERRED事务不获取任何锁(直到它需要锁的时候)，BEGIN语句本身也不会做什么事情——它开始于UNLOCK状态。默认情况下就是这样的，如果仅仅用BEGIN开始一个事务，那么事务就是DEFERRED的，同时它不会获取任何锁；当对数据库进行第一次读操作时，它会获取 SHARED锁；同样，当进行第一次写操作时，它会获取RESERVED锁。</span><br><span class=\"line\"></span><br><span class=\"line\">IMMEDIATE事务会尝试获取RESERVED锁。如果成功，BEGIN IMMEDIATE保证没有别的连接可以写数据库。但是，别的连接可以对数据库进行读操作；但是，RESERVED锁会阻止其它连接的BEGIN IMMEDIATE或者BEGIN EXCLUSIVE命令，当其它连接执行上述命令时，会返回SQLITE_BUSY错误。这时你就可以对数据库进行修改操作了，但是你还不能提交，当你 COMMIT时，会返回SQLITE_BUSY错误，这意味着还有其它的读事务没有完成，得等它们执行完后才能提交事务。</span><br><span class=\"line\"></span><br><span class=\"line\">EXCLUSIVE事务会试着获取对数据库的EXCLUSIVE锁。这与IMMEDIATE类似，但是一旦成功，EXCLUSIVE事务保证没有其它的连接，所以就可对数据库进行读写操作了。</span><br><span class=\"line\"></span><br><span class=\"line\">上节那个例子的问题在于两个连接最终都想写数据库，但是它们都没有放弃各自原来的锁，最终，SHARED锁导致了问题的出现。如果两个连接都以 BEGIN IMMEDIATE开始事务，那么死锁就不会发生。在这种情况下，在同一时刻只能有一个连接进入BEGIN IMMEDIATE，其它的连接就得等待。BEGIN IMMEDIATE和BEGIN EXCLUSIVE通常被写事务使用。就像同步机制一样，它防止了死锁的产生。</span><br><span class=\"line\"></span><br><span class=\"line\">基本的准则是：如果你正在使用的数据库没有其它的连接，用BEGIN就足够了。但是，如果你使用的数据库有其它的连接也会对数据库进行写操作，就得使用BEGIN IMMEDIATE或BEGIN EXCLUSIVE开始你的事务。</span><br><span class=\"line\"></span><br><span class=\"line\">那么，如何启动，提交还有回滚事务呢？SQLite中分别是：BEGIN、COMMIT和ROLLBACK。</span><br></pre></td></tr></table></figure>\n\n<p>5、数据库知识</p>\n<p>1、数据库分类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系型数据库</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL等</span><br><span class=\"line\"></span><br><span class=\"line\">非关系型数据库</span><br><span class=\"line\"></span><br><span class=\"line\">MongoDB等</span><br></pre></td></tr></table></figure>\n\n<p>2、SQLite常用语句的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、常用关键字</span><br><span class=\"line\">select、insert、update、delete、from、create、where、desc、order、by、group、table、alter、view、index等等</span><br><span class=\"line\">2、语句种类</span><br><span class=\"line\">DDL：数据定义语句 ： create（创建）、alter（修改）、drop(删除)</span><br><span class=\"line\">create table if not exists 表名 (字段名1 字段类型1, 字段名2 字段类型2, …) ;</span><br><span class=\"line\">create table t_student (id integer, name text, age integer, score real) ;</span><br><span class=\"line\">ALTER TABLE table_name RENAME TO new_table_naler ;</span><br><span class=\"line\">DROP table if exists 表名 ;</span><br><span class=\"line\">DROP table t_student ;</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">DML：数据操作语句</span><br><span class=\"line\">包括insert、update、delete等操作</span><br><span class=\"line\">上面的3种操作分别用于添加、修改、删除表中的数据</span><br><span class=\"line\">insert into 表名 (字段1, 字段2, …) values (字段1的值, 字段2的值, …) ;</span><br><span class=\"line\">insert into t_student (name, age) values (‘mj’, 10) ;</span><br><span class=\"line\">update 表名 set 字段1 = 字段1的值, 字段2 = 字段2的值, … ;</span><br><span class=\"line\">update t_student set name = ‘jack’, age = 20 ;</span><br><span class=\"line\">delete from 表名 ;</span><br><span class=\"line\">delete from t_student ;</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">DQL：数据库查询语句</span><br><span class=\"line\">关键字select是DQL（也是所有SQL）用得最多的操作</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">like子句</span><br><span class=\"line\">百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。</span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;XXXX%&#x27;</span><br><span class=\"line\">or </span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;%XXXX%&#x27;</span><br><span class=\"line\">or</span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;XXXX_&#x27;</span><br><span class=\"line\">or</span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;_XXXX&#x27;</span><br><span class=\"line\">or</span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;_XXXX_&#x27;</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">Glob 子句 ：和LIKE一样是通配符匹配， 与 LIKE 不同的是，GLOB 是大小写敏感的</span><br><span class=\"line\">星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。这些符号可以被组合使用。</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">LIMIT 子句用于限制由 SELECT 语句返回的数据数量。</span><br><span class=\"line\">SELECT column1, column2, columnN </span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">LIMIT [no of rows] OFFSET [row num]</span><br><span class=\"line\">SQLite 引擎将返回从OFFSET下一行开始 [no of rows] 行。</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">ORDER BY 子句是用来基于一个或多个列按升序或降序顺序排列数据。</span><br><span class=\"line\">SELECT column-list </span><br><span class=\"line\">FROM table_name </span><br><span class=\"line\">[WHERE condition] </span><br><span class=\"line\">[ORDER BY column1, column2, .. columnN] [ASC | DESC];</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">GROUP BY 子句用于与 SELECT 语句一起使用，来对相同的数据进行分组。</span><br><span class=\"line\">SELECT column-list</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE [ conditions ]</span><br><span class=\"line\">GROUP BY column1, column2....columnN</span><br><span class=\"line\">ORDER BY column1, column2....columnN</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">HAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。</span><br><span class=\"line\">WHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">FROM</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">在一个查询中，HAVING 子句必须放在 GROUP BY 子句之后，必须放在 ORDER BY 子句之前。下面是包含 HAVING 子句的 SELECT 语句的语法：</span><br><span class=\"line\">SELECT column1, column2</span><br><span class=\"line\">FROM table1, table2</span><br><span class=\"line\">WHERE [ conditions ]</span><br><span class=\"line\">GROUP BY column1, column2</span><br><span class=\"line\">HAVING [ conditions ]</span><br><span class=\"line\">ORDER BY column1, column2</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录。</span><br><span class=\"line\">SELECT DISTINCT column1, column2,.....columnN </span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE [condition]</span><br></pre></td></tr></table></figure>\n\n<p>3、SQLite的索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引（Index）是一种特殊的查找表，数据库搜索引擎用来加快数据检索。简单地说，索引是一个指向表中数据的指针。一个数据库中的索引与一本书后边的索引是非常相似的。</span><br><span class=\"line\"></span><br><span class=\"line\">1、索引不应该使用在较小的表上。</span><br><span class=\"line\">2、索引不应该使用在有频繁的大批量的更新或插入操作的表上。</span><br><span class=\"line\">3、索引不应该使用在含有大量的 NULL 值的列上。</span><br><span class=\"line\">4、索引不应该使用在频繁操作的列上。</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX 命令</span><br><span class=\"line\">CREATE INDEX index_name ON table_name;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">唯一索引：使用唯一索引不仅是为了性能，同时也为了数据的完整性。唯一索引不允许任何重复的值插入到表中。</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX index_name</span><br><span class=\"line\">on table_name (column_name);</span><br><span class=\"line\"></span><br><span class=\"line\">组合索引：组合索引是基于一个表的两个或多个列上创建的索引。</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX index_name</span><br><span class=\"line\">on table_name (column1, column2);</span><br><span class=\"line\"></span><br><span class=\"line\">隐式索引</span><br><span class=\"line\"></span><br><span class=\"line\">隐式索引是在创建对象时，由数据库服务器自动创建的索引。索引自动创建为主键约束和唯一约束。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DROP INDEX 命令</span><br><span class=\"line\"></span><br><span class=\"line\">一个索引可以使用 SQLite 的 DROP 命令删除。当删除索引时应特别注意，因为性能可能会下降或提高。</span><br><span class=\"line\"></span><br><span class=\"line\">DROP INDEX index_name;</span><br></pre></td></tr></table></figure>\n\n<p>4、SQLite的约束</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">约束是在表的数据列上强制执行的规则。这些是用来限制可以插入到表中的数据类型。这确保了数据库中数据的准确性和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">NOT NULL 约束：确保某列不能有 NULL 值。</span><br><span class=\"line\">DEFAULT 约束：当某列没有指定值时，为该列提供默认值。</span><br><span class=\"line\">UNIQUE 约束：确保某列中的所有值是不同的。</span><br><span class=\"line\">PRIMARY Key 约束：唯一标识数据库表中的各行/记录。</span><br><span class=\"line\">CHECK 约束：CHECK 约束确保某列中的所有值满足一定条件。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE COMPANY3(</span><br><span class=\"line\">   ID INT PRIMARY KEY     NOT NULL,</span><br><span class=\"line\">   NAME           TEXT    NOT NULL,</span><br><span class=\"line\">   AGE            INT     NOT NULL UNIQUE,</span><br><span class=\"line\">   ADDRESS        CHAR(50) DEFAULT &#x27;home&#x27;,</span><br><span class=\"line\">   SALARY         REAL    CHECK(SALARY &gt; 0)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>5、SQLite事务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、事务（Transaction）是一个对数据库执行工作单元。事务（Transaction）是以逻辑顺序完成的工作单位或序列，可以是由用户手动操作完成，也可以是由某种数据库程序自动完成。</span><br><span class=\"line\"></span><br><span class=\"line\">2、事务（Transaction）是指一个或多个更改数据库的扩展。例如，如果您正在创建一个记录或者更新一个记录或者从表中删除一个记录，那么您正在该表上执行事务。重要的是要控制事务以确保数据的完整性和处理数据库错误。</span><br><span class=\"line\"></span><br><span class=\"line\">3、事务（Transaction）具有以下四个标准属性，通常根据首字母缩写为 ACID：</span><br><span class=\"line\"></span><br><span class=\"line\">原子性（Atomicity）：确保工作单位内的所有操作都成功完成，否则，事务会在出现故障时终止，之前的操作也会回滚到以前的状态。</span><br><span class=\"line\">一致性（Consistency)：确保数据库在成功提交的事务上正确地改变状态。</span><br><span class=\"line\">隔离性（Isolation）：使事务操作相互独立和透明。</span><br><span class=\"line\">持久性（Durability）：确保已提交事务的结果或效果在系统发生故障的情况下仍然存在。</span><br><span class=\"line\"></span><br><span class=\"line\">4、事务控制</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN TRANSACTION：开始事务处理 或者BEGIN。</span><br><span class=\"line\"></span><br><span class=\"line\">//中间是自己需要完成的数据库操作</span><br><span class=\"line\"></span><br><span class=\"line\">COMMIT：保存更改，或者可以使用 END TRANSACTION 命令。</span><br><span class=\"line\">ROLLBACK：回滚所做的更改。</span><br><span class=\"line\"></span><br><span class=\"line\">sqlite&gt; BEGIN;</span><br><span class=\"line\">sqlite&gt; DELETE FROM COMPANY WHERE AGE = 25;</span><br><span class=\"line\">sqlite&gt; ROLLBACK;</span><br></pre></td></tr></table></figure>\n\n<p>更多语法：<a href=\"https://www.w3cschool.cn/sqlite/sqlite-pragma.html\">https://www.w3cschool.cn/sqlite/sqlite-pragma.html</a></p>\n<p>6、SQLite的提高查询速度方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、关键搜索词索引的建立</span><br><span class=\"line\"></span><br><span class=\"line\">索引并不是越多越好</span><br><span class=\"line\"></span><br><span class=\"line\">注意会增大数据库大小，可以显著提高select的速度，同时也可以提高update的速度</span><br><span class=\"line\"></span><br><span class=\"line\">2、查询sql的优化</span><br><span class=\"line\"></span><br><span class=\"line\">尽量查找id</span><br><span class=\"line\"></span><br><span class=\"line\">减少全表扫描 如：</span><br><span class=\"line\"></span><br><span class=\"line\">避免sql中 where子句后面使用表达式</span><br><span class=\"line\"></span><br><span class=\"line\">避免where子句中使用 or连接，可以通过联合</span><br><span class=\"line\"></span><br><span class=\"line\">in not in 也要慎用</span><br></pre></td></tr></table></figure>\n\n<p>更多sql优化：<a href=\"https://blog.csdn.net/wenjianzhiqin/article/details/81017468\">https://blog.csdn.net/wenjianzhiqin/article/details/81017468</a></p>\n<p>7、提高写入速度</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、事务开启可以提高查询效率，因为避免了频繁的函数调用，插入后一次性提交。</span><br><span class=\"line\"></span><br><span class=\"line\">2、关闭写入同步 </span><br><span class=\"line\"></span><br><span class=\"line\">在SQLite中，数据库配置的参数都由编译指示（pragma）来实现的，而其中synchronous选项有三种可选状态，分别是full、normal、off。full写入速度最慢，但保证数据是安全的，不受断电、系统崩溃等影响，而off可以加速数据库的一些操作，但如果系统崩溃或断电，则数据库可能会损毁。如果有定期备份的机制，而且少量数据丢失可接受</span><br><span class=\"line\"></span><br><span class=\"line\">sqlite3_exec(db,&quot;PRAGMA synchronous = OFF; &quot;,0,0,0);  </span><br><span class=\"line\"></span><br><span class=\"line\">3、使用执行准备</span><br><span class=\"line\"></span><br><span class=\"line\">就算开起了事务，SQLite仍然要对循环中每一句SQL语句进行“词法分析”和“语法分析”，这对于同时插入大量数据的操作来说，简直就是浪费时间。使用执行准备，即先将SQL语句编译好，然后再一步一步（或一行一行）地执行。</span><br></pre></td></tr></table></figure>\n\n<p>四、沙盒外的持久化方式</p>\n<p>沙盒内的方式在应用被删除后数据都会丢失，如果想要不丢失则需要使用KeyChain。</p>\n<p>KeyChain本质是一个sqlite数据库，其保存的所有数据都是加密过的。</p>\n<p>KeyChain分为私有和公有，公有则需要指定group，一个group中的应用可以共享此KeyChain。</p>\n<p>使用KeyChain过程中要理解下面几个问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1：自己使用的KeyChain和系统自带的KeyChain数据是隔离的，内部应该是不同数据库文件；</span><br><span class=\"line\"></span><br><span class=\"line\">2：KeyChain数据可备份到iCloud中；</span><br><span class=\"line\"></span><br><span class=\"line\">3：不需要联网，也不用登陆iCloud账号；一个设备一个sqlite数据库，但是不同应用组不共享数据；</span><br><span class=\"line\"></span><br><span class=\"line\">4：要在另一台设备上使用当前设备存储的KeyChain信息，需要当前设备进行数据备份，</span><br><span class=\"line\">再在另一设备上复原数据；比较常用的是iCloud备份方式；</span><br><span class=\"line\"></span><br><span class=\"line\">5：系统自带的KeyChain中账号密码分类数据可在系统设置-&gt;账号与密码里面看到，</span><br><span class=\"line\">你退出iCloud账号还是存在，只是iCloud会帮你备份如果你设置了的话；这个和照片是一样的道理。</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cocoachina.com/articles/25733\">http://www.cocoachina.com/articles/25733</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"iOS持久化方式\"><a href=\"#iOS持久化方式\" class=\"headerlink\" title=\"iOS持久化方式\"></a>iOS持久化方式</h2><blockquote>\n<p>1.NSUserDefaults<br>2.NSKeyedArchiver<br>3.沙盒Document<br>4.sqlite3<br>5.KeyChain</p>\n</blockquote>\n<p>持久化分为两类：沙盒内和沙盒外。</p>","more":"<h2 id=\"一、沙盒目录结构和各个目录的路径获取方法\"><a href=\"#一、沙盒目录结构和各个目录的路径获取方法\" class=\"headerlink\" title=\"一、沙盒目录结构和各个目录的路径获取方法\"></a>一、沙盒目录结构和各个目录的路径获取方法</h2><blockquote>\n<p><strong>AppName.app</strong>:  应用程序包目录<br><strong>Documents</strong>：存储用户数据，您应该将所有的应用程序数据文件写入到这个目录下。该路径可通过配置实现iTunes共享文件。会被iTunes同步。<br><strong>Library</strong>：有两个子目录Preferences和Caches，除Caches以外，都会被iTunes备份。<br><strong>Preferences</strong>：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好。结果在目录下面以plist的方式存储。<br><strong>Caches</strong>：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。可创建子文件夹。可以用来放置您希望被备份但不希望被用户看到的数据。<br><strong>SystemData</strong>：系统数据<br><strong>tmp</strong>：用来存放应用再次启动时不需要的临时文件，该目录下的东西随时可能被系统清理掉，不会被iTunes同步。</p>\n</blockquote>\n<h3 id=\"沙盒主目录\"><a href=\"#沙盒主目录\" class=\"headerlink\" title=\"沙盒主目录\"></a>沙盒主目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *homeDir = NSHomeDirectory();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Documents目录\"><a href=\"#Documents目录\" class=\"headerlink\" title=\"Documents目录\"></a>Documents目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *documentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Library目录\"><a href=\"#Library目录\" class=\"headerlink\" title=\"Library目录\"></a>Library目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取Library的目录路径</span><br><span class=\"line\">NSString *libraryDir = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES) firstObject];</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取Caches目录路径</span><br><span class=\"line\">NSString *cachesDir = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tmp目录\"><a href=\"#tmp目录\" class=\"headerlink\" title=\"tmp目录\"></a>tmp目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *tmpDir =  NSTemporaryDirectory();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AppBundle目录路径\"><a href=\"#AppBundle目录路径\" class=\"headerlink\" title=\"AppBundle目录路径\"></a>AppBundle目录路径</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取AppBundle目录路径</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, [[NSBundle mainBundle] bundlePath]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSString *imagePath = [[NSBundle mainBundle] pathForResource:@&quot;apple&quot; ofType:@&quot;png&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">UIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、沙盒内的持久化方式\"><a href=\"#二、沙盒内的持久化方式\" class=\"headerlink\" title=\"二、沙盒内的持久化方式\"></a>二、沙盒内的持久化方式</h2><h3 id=\"NSKeyedArchiver归档\"><a href=\"#NSKeyedArchiver归档\" class=\"headerlink\" title=\"NSKeyedArchiver归档\"></a>NSKeyedArchiver归档</h3><h4 id=\"1、什么是归档\"><a href=\"#1、什么是归档\" class=\"headerlink\" title=\"1、什么是归档\"></a>1、什么是归档</h4><blockquote>\n<p>归档是一种很常用的文件存储方法，可以存储各种类型的对象(以文件的方式保存)。<br>官方提供了NSKeyedArchiver和NSKeyedUnarchiver两个类以供我们把对象序列化和反序列化，在存储之前使用NSKeyedArchiver进行序列化操作，并且写入本地文件，在使用之前使用NSKeyedUnarchiver进行反序列化的操作，以供提取使用</p>\n</blockquote>\n<h4 id=\"2、使用场景\"><a href=\"#2、使用场景\" class=\"headerlink\" title=\"2、使用场景\"></a>2、使用场景</h4><blockquote>\n<p>如果是简单的基础数据类型，我们一般使用的是NSUserDefaults 或者 plist文件存储<br>对于一些量级比较大的，有规律可循的我们一般使用sqlite3数据库、coreData等<br>但是对于对象级别，轻量级的存储，我们一般可以使用归档来完成。</p>\n</blockquote>\n<h4 id=\"3、归档的使用方法\"><a href=\"#3、归档的使用方法\" class=\"headerlink\" title=\"3、归档的使用方法\"></a>3、归档的使用方法</h4><p>1、了解NSCoding 和 NSSecureCoding，NSCoding安全性不高，所以iOS6的时候，苹果引入了NSSecureCoding协议，加强安全性。</p>\n<p>2、需要序列化的类需要实现 NSCoding 或者 NSSecureCoding 协议（推荐使用NSSecureCoding），并复写方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)encodeWithCoder:(NSCoder *)coder</span><br><span class=\"line\">- (instancetype)initWithCoder:(NSCoder *)coder</span><br></pre></td></tr></table></figure>\n\n<p>3、NSKeyedArchiver 和 NSKeyedUnarchiver，NSKeyedArchiver将自定义的类转换成NSData实例，类里面每一个值对应一个Key；NSKeyedUnarchiver将NSData实例根据key值还原成自定义的类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// NSKeyedArchiver 归档操作现在不推荐使用下面两个操作(被苹果废弃)</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSData *)archivedDataWithRootObject:(id)rootObject </span><br><span class=\"line\">+ (BOOL)archiveRootObject:(id)rootObject toFile:(NSString *)path</span><br><span class=\"line\"></span><br><span class=\"line\">// 推荐使用</span><br><span class=\"line\"></span><br><span class=\"line\">+ (nullable NSData *)archivedDataWithRootObject:(id)object requiringSecureCoding:(BOOL)requiresSecureCoding error:(NSError **)error</span><br></pre></td></tr></table></figure>\n\n<p>4、归档、解档</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSData * data = [NSKeyedArchiver archivedDataWithRootObject:me requiringSecureCoding:YES error:&amp;error];</span><br><span class=\"line\"></span><br><span class=\"line\">Person *newPerson = (Person *)[NSKeyedUnarchiver unarchivedObjectOfClass:Person.class fromData:data error:&amp;error];</span><br></pre></td></tr></table></figure>\n\n<p>5、例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface Person : NSObject</span><br><span class=\"line\">@property (nonatomic, strong) NSString *name;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\">- (void)encodeWithCoder:(NSCoder *)coder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [coder encodeObject:self.name forKey:@&quot;name&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (instancetype)initWithCoder:(NSCoder *)coder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        self.name = [coder decodeObjectForKey:@&quot;name&quot;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+ (BOOL)supportsSecureCoding &#123;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Person *me = [[Person alloc]init];</span><br><span class=\"line\">me.name = @&quot;小白&quot;;</span><br><span class=\"line\">NSString *homeDir = NSHomeDirectory();</span><br><span class=\"line\"></span><br><span class=\"line\">NSError *error;</span><br><span class=\"line\">NSData * data = [NSKeyedArchiver archivedDataWithRootObject:me requiringSecureCoding:YES error:&amp;error];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;%@&quot;,error);</span><br><span class=\"line\">Person *newPerson = (Person *)[NSKeyedUnarchiver unarchivedObjectOfClass:Person.class fromData:data error:&amp;error];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,error);</span><br><span class=\"line\">NSLog(@&quot;%@&quot;,newPerson.name);</span><br></pre></td></tr></table></figure>\n\n<p>6、归档文件的存放</p>\n<blockquote>\n<p>归档操作生成的data文件，可以通过文件存储的方式，存放到沙盒中</p>\n</blockquote>\n<h3 id=\"NSUserDefaults\"><a href=\"#NSUserDefaults\" class=\"headerlink\" title=\"NSUserDefaults\"></a>NSUserDefaults</h3><h4 id=\"1、存取\"><a href=\"#1、存取\" class=\"headerlink\" title=\"1、存取\"></a>1、存取</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [NSUserDefaults standardUserDefaults]获取NSUserDefaults对象，以key-value方式进行持久化操作。</span><br><span class=\"line\">存</span><br><span class=\"line\">[[NSUserDefaults standardUserDefaults] setObject:array forKey:@&quot;array&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">取</span><br><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithArray:[defaults objectForKey:@&quot;mutableArr&quot;]];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、应用场景\"><a href=\"#2、应用场景\" class=\"headerlink\" title=\"2、应用场景\"></a>2、应用场景</h4><blockquote>\n<p>存放一些基础数据、如判断条件等，自动登录信息。</p>\n</blockquote>\n<h4 id=\"3、注意事项\"><a href=\"#3、注意事项\" class=\"headerlink\" title=\"3、注意事项\"></a>3、注意事项</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、可以存储的对象有NSString、NSArray、NSDictionary、NSData、NSNumber</span><br><span class=\"line\"></span><br><span class=\"line\">2、我们还要注意NSUserDefaults存储的对象全是不可变的，就算你存的时候是可变的，最后都会被转成不可变的</span><br><span class=\"line\"></span><br><span class=\"line\">比如 NSMutableArray 存储后取出时NSArray，是不可变的，需要重新构建 NSMutableArray</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray *mutableArr = [NSMutableArray arrayWithArray:[defaults objectForKey:@&quot;mutableArr&quot;]];</span><br><span class=\"line\"></span><br><span class=\"line\">3、对相同的key赋值等于一次覆盖，所以请保证key的唯一性</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Plist存储、文件存储\"><a href=\"#Plist存储、文件存储\" class=\"headerlink\" title=\"Plist存储、文件存储\"></a>Plist存储、文件存储</h3><h4 id=\"1、plist\"><a href=\"#1、plist\" class=\"headerlink\" title=\"1、plist\"></a>1、plist</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以存储的对象有NSString、NSArray、NSDictionary、NSData、NSNumber</span><br><span class=\"line\"></span><br><span class=\"line\">写入使用writeToFile，读取使用xxxWithContentsOfFile；需要指定文件路径。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">写入：</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray * array = [[NSMutableArray alloc]initWithObjects:@&quot;小白&quot;, @&quot;蜡笔小新&quot;, nil];</span><br><span class=\"line\"></span><br><span class=\"line\">//获取Document目录地址，拼接上文件名称</span><br><span class=\"line\">NSString *path = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@&quot;data.plist&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">[array writeToFile:path atomically:YES];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">读取：</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray * new_array = [NSMutableArray arrayWithContentsOfFile:path];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;%@&quot;,new_array);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、文件\"><a href=\"#2、文件\" class=\"headerlink\" title=\"2、文件\"></a>2、文件</h4><blockquote>\n<p>这里要和plist区分一下，plist方式是字典/数组数据格式写入文件；而这里的文件方式不限数据格式。</p>\n</blockquote>\n<h3 id=\"数据库-sqlite3-（FMDB）\"><a href=\"#数据库-sqlite3-（FMDB）\" class=\"headerlink\" title=\"数据库 sqlite3 （FMDB）\"></a>数据库 sqlite3 （FMDB）</h3><p>数据库无疑是大量数据最好的持久化方案，数据库目前有：sqlite、CoreData和Realm等。</p>\n<h4 id=\"1、SQLite\"><a href=\"#1、SQLite\" class=\"headerlink\" title=\"1、SQLite\"></a>1、SQLite</h4><p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、不需要一个单独的服务器进程或操作的系统（无服务器的）</span><br><span class=\"line\">2、SQLite 不需要配置，这意味着不需要安装或管理</span><br><span class=\"line\">3、一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件</span><br><span class=\"line\">4、SQLite 是非常小的，是轻量级的，完全配置时小于 400KB，省略可选功能配置时小于250KB</span><br><span class=\"line\">5、SQLite 是自给自足的，这意味着不需要任何外部的依赖</span><br><span class=\"line\">6、SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问</span><br><span class=\"line\"></span><br><span class=\"line\">1.ACID事务</span><br><span class=\"line\">2.零配置 – 无需安装和管理配置</span><br><span class=\"line\">3.储存在单一磁盘文件中的一个完整的数据库</span><br><span class=\"line\">4.数据库文件可以在不同字节顺序的机器间自由的共享</span><br><span class=\"line\">5.支持数据库大小至2TB</span><br><span class=\"line\">6.足够小, 大致13万行C代码, 4.43M</span><br><span class=\"line\">7.比一些流行的数据库在大部分普通数据库操作要快</span><br><span class=\"line\">8.简单, 轻松的API</span><br><span class=\"line\">9.包含TCL绑定, 同时通过Wrapper支持其他语言的绑定</span><br><span class=\"line\">10.良好注释的源代码, 并且有着90%以上的测试覆盖率</span><br><span class=\"line\">11.独立: 没有额外依赖</span><br><span class=\"line\">12.源码完全的开源, 你可以用于任何用途, 包括出售它</span><br><span class=\"line\">13.支持多种开发语言，C, C++, PHP, Perl, Java, C#,Python, Ruby等</span><br></pre></td></tr></table></figure>\n\n<p>SQLite将数据划分为以下几种存储类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NULL ： NULL 值</span><br><span class=\"line\">integer : 整型值</span><br><span class=\"line\">real : 浮点值</span><br><span class=\"line\">text : 文本字符串</span><br><span class=\"line\">blob : 二进制数据（比如文件）</span><br><span class=\"line\">没有 Boolean 没有用于存储日期和/或时间的类型，可用其他类型代替</span><br><span class=\"line\">实际上SQLite是无类型的，就算声明为integer类型，还是能存储字符串文本（主键除外）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、FMDB使用\"><a href=\"#2、FMDB使用\" class=\"headerlink\" title=\"2、FMDB使用\"></a>2、FMDB使用</h4><p>1、什么是FMDB</p>\n<blockquote>\n<p>iOS中使用C语言函数对原生SQLite数据库进行增删改查操作，复杂麻烦，于是，就出现了一系列将SQLite API封装的库，如FMDB<br>FMDB是针对libsqlite3框架进行封装的三方，它以OC的方式封装了SQLite的C语言的API，使用步骤与SQLite相似</p>\n</blockquote>\n<p>2、FMDB优缺点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FMDB的优点是：</span><br><span class=\"line\">(1) 使用时面向对象，避免了复杂的C语言代码</span><br><span class=\"line\">(2) 对比苹果自带的Core Data框架，更加轻量级和灵活</span><br><span class=\"line\">(3) 提供多线程安全处理数据库操作方法，保证多线程安全跟数据准确性</span><br><span class=\"line\"></span><br><span class=\"line\">FMDB缺点：</span><br><span class=\"line\">(1) 因为是OC语言开发，只能在iOS平台上使用，所以实现跨平台操作时存在限制性</span><br></pre></td></tr></table></figure>\n\n<p>3、相关类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FMDatabase：一个FMDatabase对象代表一个单独的SQLite数据库，通过SQLite语句执行数据库的增删改查操作</span><br><span class=\"line\"></span><br><span class=\"line\">FMResultSet：使用FMDatabase对象查询数据库后的结果集</span><br><span class=\"line\"></span><br><span class=\"line\">FMDatabaseQueue：用于多线程操作数据库，它保证线程安全</span><br></pre></td></tr></table></figure>\n\n<p>3、sqlite锁</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite的锁的粒度比较粗，是数据库级别的，也就是说即使只是对某个页进行读写操作，sqlite也会封锁整个数据库。这种策略降低了读-写事务和写-写事务间的并发程度，但是大大简化了程序设计，减小了整个程序的大小。所以，sqlite的适用场景为：较少次写入数据，大量、多次读出数据。这也是sqlite作为一款嵌入式数据库的设计初衷。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sqlite读事务获取锁的过程：UNLOCKED--&gt;SHARED-&gt;进行读取操作</span><br><span class=\"line\"></span><br><span class=\"line\">sqlite写事务获取锁的过程：UNLOCKED-&gt;SHARED-&gt;RESERVED-&gt;创建回滚日志，在数据库内存页中写入数据，刷新日志文件到磁盘-&gt;PENDING-&gt;EXCLUSIVE-&gt;刷新内存页中的数据到磁盘。</span><br><span class=\"line\"></span><br><span class=\"line\">SQLite使用锁逐步上升机制，为了写数据库，连接需要逐级地获得排它锁。</span><br><span class=\"line\"></span><br><span class=\"line\">SQLite有5个不同的锁状态：</span><br><span class=\"line\">未加锁(UNLOCKED)</span><br><span class=\"line\">共享 (SHARED)</span><br><span class=\"line\">保留(RESERVED)</span><br><span class=\"line\">待定(PENDING)</span><br><span class=\"line\">排它(EXCLUSIVE)。</span><br><span class=\"line\"></span><br><span class=\"line\">每个数据库连接在同一时刻只能处于其中一个状态。每 种状态(未加锁状态除外)都有一种锁与之对应。</span><br><span class=\"line\"></span><br><span class=\"line\">最初的状态是未加锁状态，在此状态下，连接还没有存取数据库。当连接到了一个数据库，甚至已经用BEGIN开始了一个事务时，连接都还处于未加锁状态。</span><br><span class=\"line\"></span><br><span class=\"line\">未加锁状态的下一个状态是共享状态。为了能够从数据库中读(不写)数据，连接必须首先进入共享状态，也就是说首先要获得一个共享锁。多个连接可以 同时获得并保持共享锁，也就是说多个连接可以同时从同一个数据库中读数据。但哪怕只有一个共享锁还没有释放，也不允许任何连接写数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">如果一个连接想要写数据库，它必须首先获得一个保留锁。一个数据库上同时只能有一个保留锁。保留锁可以与共享锁共存，保留锁是写数据库的第1阶段。保留锁即不阻止其它拥有共享锁的连接继续读数据库，也不阻止其它连接获得新的共享锁。</span><br><span class=\"line\"></span><br><span class=\"line\">一旦一个连接获得了保留锁，它就可以开始处理数据库修改操作了，尽管这些修改只能在缓冲区中进行，而不是实际地写到磁盘。对读出内容所做的修改保存在内存缓冲区中。</span><br><span class=\"line\"></span><br><span class=\"line\">当连接想要提交修改(或事务)时，需要将保留锁提升为排它锁。为了得到排它锁，还必须首先将保留锁提升为待定锁。获得待定锁之后，其它连接就不能再获得新的共享锁了，但已经拥有共享锁的连接仍然可以继续正常读数据库。此时，拥有等待锁的连接等待其它拥有共享锁的连接完成工作并释放其共享锁。</span><br><span class=\"line\"></span><br><span class=\"line\">一旦所有其它共享锁都被释放，拥有待定锁的连接就可以将其锁提升至排它锁，此时就可以自由地对数据库进行修改了。所有以前对缓冲区所做的修改都会被写到数据库文件。</span><br></pre></td></tr></table></figure>\n\n<p>4、sqlite的死锁</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">举例：</span><br><span class=\"line\"></span><br><span class=\"line\">两个连接 A 和 B 同时但完全独立地工作于同一个数据库。A执行第1条命令，B执行第2、3条，等等。 </span><br><span class=\"line\"></span><br><span class=\"line\">A连接                                     B连接 </span><br><span class=\"line\">sqlite&gt; BEGIN; </span><br><span class=\"line\">                                    sqlite&gt; BEGIN; </span><br><span class=\"line\">                                    sqlite&gt; INSERT INTO foo VALUES(&#x27;x&#x27;); </span><br><span class=\"line\">sqlite&gt; SELECT * FROM foo; </span><br><span class=\"line\">                                    sqlite&gt; COMMIT; </span><br><span class=\"line\">                                    SQL error: database is locked </span><br><span class=\"line\">sqlite&gt; INSERT INTO foo VALUES (&#x27;x&#x27;); </span><br><span class=\"line\">SQL error: database is locked</span><br><span class=\"line\"></span><br><span class=\"line\">两个连接都在死锁中结束。B首先尝试写数据库，也就拥有了一个待定锁。A再试图写，但当其INSERT语句试图将共享锁提升为保留锁时失败。</span><br><span class=\"line\"></span><br><span class=\"line\">为了讨论的方便，假设连接A和B都一直等待数据库可写。那么此时，其它的连接甚至都不能够再读数据库了，因为B拥有待定锁(它能阻止其它连接获得共享锁)。那么时此，不仅A和B不能工作，其它所有进程都不能再操作此数据库了。</span><br><span class=\"line\"></span><br><span class=\"line\">解决死锁的办法：sqlite用锁超时的机制处理死锁</span><br><span class=\"line\"></span><br><span class=\"line\">如果避免此情况呢？答案是采用正确的事务类型来完成工作。 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">事务的种类</span><br><span class=\"line\">SQLite有三种不同的事务，使用不同的锁状态。</span><br><span class=\"line\"></span><br><span class=\"line\">事务可以开始于：DEFERRED、MMEDIATE 或 EXCLUSIVE。</span><br><span class=\"line\"></span><br><span class=\"line\">事务类型在BEGIN命令中指定： </span><br><span class=\"line\">BEGIN [ DEFERRED | IMMEDIATE | EXCLUSIVE ] TRANSACTION;</span><br><span class=\"line\"></span><br><span class=\"line\">一个DEFERRED事务不获取任何锁(直到它需要锁的时候)，BEGIN语句本身也不会做什么事情——它开始于UNLOCK状态。默认情况下就是这样的，如果仅仅用BEGIN开始一个事务，那么事务就是DEFERRED的，同时它不会获取任何锁；当对数据库进行第一次读操作时，它会获取 SHARED锁；同样，当进行第一次写操作时，它会获取RESERVED锁。</span><br><span class=\"line\"></span><br><span class=\"line\">IMMEDIATE事务会尝试获取RESERVED锁。如果成功，BEGIN IMMEDIATE保证没有别的连接可以写数据库。但是，别的连接可以对数据库进行读操作；但是，RESERVED锁会阻止其它连接的BEGIN IMMEDIATE或者BEGIN EXCLUSIVE命令，当其它连接执行上述命令时，会返回SQLITE_BUSY错误。这时你就可以对数据库进行修改操作了，但是你还不能提交，当你 COMMIT时，会返回SQLITE_BUSY错误，这意味着还有其它的读事务没有完成，得等它们执行完后才能提交事务。</span><br><span class=\"line\"></span><br><span class=\"line\">EXCLUSIVE事务会试着获取对数据库的EXCLUSIVE锁。这与IMMEDIATE类似，但是一旦成功，EXCLUSIVE事务保证没有其它的连接，所以就可对数据库进行读写操作了。</span><br><span class=\"line\"></span><br><span class=\"line\">上节那个例子的问题在于两个连接最终都想写数据库，但是它们都没有放弃各自原来的锁，最终，SHARED锁导致了问题的出现。如果两个连接都以 BEGIN IMMEDIATE开始事务，那么死锁就不会发生。在这种情况下，在同一时刻只能有一个连接进入BEGIN IMMEDIATE，其它的连接就得等待。BEGIN IMMEDIATE和BEGIN EXCLUSIVE通常被写事务使用。就像同步机制一样，它防止了死锁的产生。</span><br><span class=\"line\"></span><br><span class=\"line\">基本的准则是：如果你正在使用的数据库没有其它的连接，用BEGIN就足够了。但是，如果你使用的数据库有其它的连接也会对数据库进行写操作，就得使用BEGIN IMMEDIATE或BEGIN EXCLUSIVE开始你的事务。</span><br><span class=\"line\"></span><br><span class=\"line\">那么，如何启动，提交还有回滚事务呢？SQLite中分别是：BEGIN、COMMIT和ROLLBACK。</span><br></pre></td></tr></table></figure>\n\n<p>5、数据库知识</p>\n<p>1、数据库分类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关系型数据库</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL等</span><br><span class=\"line\"></span><br><span class=\"line\">非关系型数据库</span><br><span class=\"line\"></span><br><span class=\"line\">MongoDB等</span><br></pre></td></tr></table></figure>\n\n<p>2、SQLite常用语句的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、常用关键字</span><br><span class=\"line\">select、insert、update、delete、from、create、where、desc、order、by、group、table、alter、view、index等等</span><br><span class=\"line\">2、语句种类</span><br><span class=\"line\">DDL：数据定义语句 ： create（创建）、alter（修改）、drop(删除)</span><br><span class=\"line\">create table if not exists 表名 (字段名1 字段类型1, 字段名2 字段类型2, …) ;</span><br><span class=\"line\">create table t_student (id integer, name text, age integer, score real) ;</span><br><span class=\"line\">ALTER TABLE table_name RENAME TO new_table_naler ;</span><br><span class=\"line\">DROP table if exists 表名 ;</span><br><span class=\"line\">DROP table t_student ;</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">DML：数据操作语句</span><br><span class=\"line\">包括insert、update、delete等操作</span><br><span class=\"line\">上面的3种操作分别用于添加、修改、删除表中的数据</span><br><span class=\"line\">insert into 表名 (字段1, 字段2, …) values (字段1的值, 字段2的值, …) ;</span><br><span class=\"line\">insert into t_student (name, age) values (‘mj’, 10) ;</span><br><span class=\"line\">update 表名 set 字段1 = 字段1的值, 字段2 = 字段2的值, … ;</span><br><span class=\"line\">update t_student set name = ‘jack’, age = 20 ;</span><br><span class=\"line\">delete from 表名 ;</span><br><span class=\"line\">delete from t_student ;</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">DQL：数据库查询语句</span><br><span class=\"line\">关键字select是DQL（也是所有SQL）用得最多的操作</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">like子句</span><br><span class=\"line\">百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。</span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;XXXX%&#x27;</span><br><span class=\"line\">or </span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;%XXXX%&#x27;</span><br><span class=\"line\">or</span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;XXXX_&#x27;</span><br><span class=\"line\">or</span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;_XXXX&#x27;</span><br><span class=\"line\">or</span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;_XXXX_&#x27;</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">Glob 子句 ：和LIKE一样是通配符匹配， 与 LIKE 不同的是，GLOB 是大小写敏感的</span><br><span class=\"line\">星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。这些符号可以被组合使用。</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">LIMIT 子句用于限制由 SELECT 语句返回的数据数量。</span><br><span class=\"line\">SELECT column1, column2, columnN </span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">LIMIT [no of rows] OFFSET [row num]</span><br><span class=\"line\">SQLite 引擎将返回从OFFSET下一行开始 [no of rows] 行。</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">ORDER BY 子句是用来基于一个或多个列按升序或降序顺序排列数据。</span><br><span class=\"line\">SELECT column-list </span><br><span class=\"line\">FROM table_name </span><br><span class=\"line\">[WHERE condition] </span><br><span class=\"line\">[ORDER BY column1, column2, .. columnN] [ASC | DESC];</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">GROUP BY 子句用于与 SELECT 语句一起使用，来对相同的数据进行分组。</span><br><span class=\"line\">SELECT column-list</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE [ conditions ]</span><br><span class=\"line\">GROUP BY column1, column2....columnN</span><br><span class=\"line\">ORDER BY column1, column2....columnN</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">HAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。</span><br><span class=\"line\">WHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。</span><br><span class=\"line\">SELECT</span><br><span class=\"line\">FROM</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">在一个查询中，HAVING 子句必须放在 GROUP BY 子句之后，必须放在 ORDER BY 子句之前。下面是包含 HAVING 子句的 SELECT 语句的语法：</span><br><span class=\"line\">SELECT column1, column2</span><br><span class=\"line\">FROM table1, table2</span><br><span class=\"line\">WHERE [ conditions ]</span><br><span class=\"line\">GROUP BY column1, column2</span><br><span class=\"line\">HAVING [ conditions ]</span><br><span class=\"line\">ORDER BY column1, column2</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录。</span><br><span class=\"line\">SELECT DISTINCT column1, column2,.....columnN </span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE [condition]</span><br></pre></td></tr></table></figure>\n\n<p>3、SQLite的索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">索引（Index）是一种特殊的查找表，数据库搜索引擎用来加快数据检索。简单地说，索引是一个指向表中数据的指针。一个数据库中的索引与一本书后边的索引是非常相似的。</span><br><span class=\"line\"></span><br><span class=\"line\">1、索引不应该使用在较小的表上。</span><br><span class=\"line\">2、索引不应该使用在有频繁的大批量的更新或插入操作的表上。</span><br><span class=\"line\">3、索引不应该使用在含有大量的 NULL 值的列上。</span><br><span class=\"line\">4、索引不应该使用在频繁操作的列上。</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX 命令</span><br><span class=\"line\">CREATE INDEX index_name ON table_name;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">唯一索引：使用唯一索引不仅是为了性能，同时也为了数据的完整性。唯一索引不允许任何重复的值插入到表中。</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX index_name</span><br><span class=\"line\">on table_name (column_name);</span><br><span class=\"line\"></span><br><span class=\"line\">组合索引：组合索引是基于一个表的两个或多个列上创建的索引。</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX index_name</span><br><span class=\"line\">on table_name (column1, column2);</span><br><span class=\"line\"></span><br><span class=\"line\">隐式索引</span><br><span class=\"line\"></span><br><span class=\"line\">隐式索引是在创建对象时，由数据库服务器自动创建的索引。索引自动创建为主键约束和唯一约束。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DROP INDEX 命令</span><br><span class=\"line\"></span><br><span class=\"line\">一个索引可以使用 SQLite 的 DROP 命令删除。当删除索引时应特别注意，因为性能可能会下降或提高。</span><br><span class=\"line\"></span><br><span class=\"line\">DROP INDEX index_name;</span><br></pre></td></tr></table></figure>\n\n<p>4、SQLite的约束</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">约束是在表的数据列上强制执行的规则。这些是用来限制可以插入到表中的数据类型。这确保了数据库中数据的准确性和可靠性。</span><br><span class=\"line\"></span><br><span class=\"line\">NOT NULL 约束：确保某列不能有 NULL 值。</span><br><span class=\"line\">DEFAULT 约束：当某列没有指定值时，为该列提供默认值。</span><br><span class=\"line\">UNIQUE 约束：确保某列中的所有值是不同的。</span><br><span class=\"line\">PRIMARY Key 约束：唯一标识数据库表中的各行/记录。</span><br><span class=\"line\">CHECK 约束：CHECK 约束确保某列中的所有值满足一定条件。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE COMPANY3(</span><br><span class=\"line\">   ID INT PRIMARY KEY     NOT NULL,</span><br><span class=\"line\">   NAME           TEXT    NOT NULL,</span><br><span class=\"line\">   AGE            INT     NOT NULL UNIQUE,</span><br><span class=\"line\">   ADDRESS        CHAR(50) DEFAULT &#x27;home&#x27;,</span><br><span class=\"line\">   SALARY         REAL    CHECK(SALARY &gt; 0)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>5、SQLite事务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、事务（Transaction）是一个对数据库执行工作单元。事务（Transaction）是以逻辑顺序完成的工作单位或序列，可以是由用户手动操作完成，也可以是由某种数据库程序自动完成。</span><br><span class=\"line\"></span><br><span class=\"line\">2、事务（Transaction）是指一个或多个更改数据库的扩展。例如，如果您正在创建一个记录或者更新一个记录或者从表中删除一个记录，那么您正在该表上执行事务。重要的是要控制事务以确保数据的完整性和处理数据库错误。</span><br><span class=\"line\"></span><br><span class=\"line\">3、事务（Transaction）具有以下四个标准属性，通常根据首字母缩写为 ACID：</span><br><span class=\"line\"></span><br><span class=\"line\">原子性（Atomicity）：确保工作单位内的所有操作都成功完成，否则，事务会在出现故障时终止，之前的操作也会回滚到以前的状态。</span><br><span class=\"line\">一致性（Consistency)：确保数据库在成功提交的事务上正确地改变状态。</span><br><span class=\"line\">隔离性（Isolation）：使事务操作相互独立和透明。</span><br><span class=\"line\">持久性（Durability）：确保已提交事务的结果或效果在系统发生故障的情况下仍然存在。</span><br><span class=\"line\"></span><br><span class=\"line\">4、事务控制</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN TRANSACTION：开始事务处理 或者BEGIN。</span><br><span class=\"line\"></span><br><span class=\"line\">//中间是自己需要完成的数据库操作</span><br><span class=\"line\"></span><br><span class=\"line\">COMMIT：保存更改，或者可以使用 END TRANSACTION 命令。</span><br><span class=\"line\">ROLLBACK：回滚所做的更改。</span><br><span class=\"line\"></span><br><span class=\"line\">sqlite&gt; BEGIN;</span><br><span class=\"line\">sqlite&gt; DELETE FROM COMPANY WHERE AGE = 25;</span><br><span class=\"line\">sqlite&gt; ROLLBACK;</span><br></pre></td></tr></table></figure>\n\n<p>更多语法：<a href=\"https://www.w3cschool.cn/sqlite/sqlite-pragma.html\">https://www.w3cschool.cn/sqlite/sqlite-pragma.html</a></p>\n<p>6、SQLite的提高查询速度方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、关键搜索词索引的建立</span><br><span class=\"line\"></span><br><span class=\"line\">索引并不是越多越好</span><br><span class=\"line\"></span><br><span class=\"line\">注意会增大数据库大小，可以显著提高select的速度，同时也可以提高update的速度</span><br><span class=\"line\"></span><br><span class=\"line\">2、查询sql的优化</span><br><span class=\"line\"></span><br><span class=\"line\">尽量查找id</span><br><span class=\"line\"></span><br><span class=\"line\">减少全表扫描 如：</span><br><span class=\"line\"></span><br><span class=\"line\">避免sql中 where子句后面使用表达式</span><br><span class=\"line\"></span><br><span class=\"line\">避免where子句中使用 or连接，可以通过联合</span><br><span class=\"line\"></span><br><span class=\"line\">in not in 也要慎用</span><br></pre></td></tr></table></figure>\n\n<p>更多sql优化：<a href=\"https://blog.csdn.net/wenjianzhiqin/article/details/81017468\">https://blog.csdn.net/wenjianzhiqin/article/details/81017468</a></p>\n<p>7、提高写入速度</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、事务开启可以提高查询效率，因为避免了频繁的函数调用，插入后一次性提交。</span><br><span class=\"line\"></span><br><span class=\"line\">2、关闭写入同步 </span><br><span class=\"line\"></span><br><span class=\"line\">在SQLite中，数据库配置的参数都由编译指示（pragma）来实现的，而其中synchronous选项有三种可选状态，分别是full、normal、off。full写入速度最慢，但保证数据是安全的，不受断电、系统崩溃等影响，而off可以加速数据库的一些操作，但如果系统崩溃或断电，则数据库可能会损毁。如果有定期备份的机制，而且少量数据丢失可接受</span><br><span class=\"line\"></span><br><span class=\"line\">sqlite3_exec(db,&quot;PRAGMA synchronous = OFF; &quot;,0,0,0);  </span><br><span class=\"line\"></span><br><span class=\"line\">3、使用执行准备</span><br><span class=\"line\"></span><br><span class=\"line\">就算开起了事务，SQLite仍然要对循环中每一句SQL语句进行“词法分析”和“语法分析”，这对于同时插入大量数据的操作来说，简直就是浪费时间。使用执行准备，即先将SQL语句编译好，然后再一步一步（或一行一行）地执行。</span><br></pre></td></tr></table></figure>\n\n<p>四、沙盒外的持久化方式</p>\n<p>沙盒内的方式在应用被删除后数据都会丢失，如果想要不丢失则需要使用KeyChain。</p>\n<p>KeyChain本质是一个sqlite数据库，其保存的所有数据都是加密过的。</p>\n<p>KeyChain分为私有和公有，公有则需要指定group，一个group中的应用可以共享此KeyChain。</p>\n<p>使用KeyChain过程中要理解下面几个问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1：自己使用的KeyChain和系统自带的KeyChain数据是隔离的，内部应该是不同数据库文件；</span><br><span class=\"line\"></span><br><span class=\"line\">2：KeyChain数据可备份到iCloud中；</span><br><span class=\"line\"></span><br><span class=\"line\">3：不需要联网，也不用登陆iCloud账号；一个设备一个sqlite数据库，但是不同应用组不共享数据；</span><br><span class=\"line\"></span><br><span class=\"line\">4：要在另一台设备上使用当前设备存储的KeyChain信息，需要当前设备进行数据备份，</span><br><span class=\"line\">再在另一设备上复原数据；比较常用的是iCloud备份方式；</span><br><span class=\"line\"></span><br><span class=\"line\">5：系统自带的KeyChain中账号密码分类数据可在系统设置-&gt;账号与密码里面看到，</span><br><span class=\"line\">你退出iCloud账号还是存在，只是iCloud会帮你备份如果你设置了的话；这个和照片是一样的道理。</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cocoachina.com/articles/25733\">http://www.cocoachina.com/articles/25733</a></p>"},{"title":"iOS问题","date":"2022-10-17T06:32:50.000Z","_content":"\n## 1. 改变View显示位置，2种方式 (layer的Z轴和view添加的层级)\n\n<!-- more -->\n\n+ 改变layer的Z轴, 大值在上，但下层的view显示在上面，不能响应事件\n\n> view.layer.zPosition=100  \n\n+ view添加的层级\n\n> insertSubview\n> bringSubviewToFront\n> addSubview  \n> insertSubview\n\n## 2. ITSAppUsesNonExemptEncryption导出合规性\n\n此值表示该应用程序不使用加密，或仅使用免除加密。如果您的应用使用加密且不可免除，则必须将此值设置为YES/true。\n\n`info.plist`添加\n\n> App Uses Non-Exempt Encryption = NO\n\n## UIDocumentPickerViewController 选取文件\n\n```ios\n\"com.microsoft.word.doc\",\n\"com.microsoft.word.docx\",\n\"com.microsoft.excel.xls\",\n\"com.microsoft.excel.xlsx\",\n\"com.microsoft.powerpoint.​ppt\",\n\"com.microsoft.powerpoint.​pptx\",\n```\n\n设置了 docx， xlsx，​pptx   发现还是 只能选择 .doc  .xls  .ppt，无法选择 docx， xlsx，​pptx，均为灰色不可选择：\n\n后来谷歌发现对应的格式不对：下面才是 正确的对应 格式\n\n```ios\n\"com.microsoft.word.doc\",\n\"org.openxmlformats.wordprocessingml.document\",\n\"com.microsoft.excel.xls\",\n\"org.openxmlformats.spreadsheetml.sheet\",\n\"com.microsoft.powerpoint.​ppt\",\n\"org.openxmlformats.presentationml.presentation\",\n```\n\n## 圆角与阴影\n\n方法一：指定UIView的根 layer 为 CAShapeLayer 类型，通过设置 layer.path 实现圆角,这时的path是CGPath类型，CGPath 非常灵活，fillColor 当做背景填充色，strokeColor 从当边框颜色，使用 layer.path 作为 shadowPath 一举两得。  \n\n方法二：利用2个UIView实现，父视图为阴影，添加一个ContentView子视图为圆角\n\n+ 1. UIView 的 clipsToBounds 属性设置为 true，会把超出视图范围外的部分裁剪掉不显示，若要使 圆角和阴影共存，那么 clipsToBounds 必须设置为 false，庆幸的是UIView 的 clipsToBounds属性值默认为false\n\n+ 2. 使用layer的mask来给UIView 切圆角会把超出mask范围外的部分裁剪掉，若要使圆角与阴影共存，此方法不可取。\n\n+ 3. 让设计师切一张带阴影的背景图，这个方法简单粗暴。\n\n### 圆角的绘制方法\n\n+ 1. 使用 CAlayer 的 cornerRadius 属性设置圆角\n+ 2. 设置 CAlayer 的 mask 属性\n+ 3. 通过 layerClass 返回 CAShapeLayer,指定当前 UIView 的根 layer 类型，通过设置 CAShapeLayer 的 path 来实现圆角绘制\n\n### 阴影的绘制方法\n\n+ 1. 不指定 shadowPath绘制阴影，会造成离屏渲染\n+ 2. 指定 shadowPath 绘制阴影，不会造成离屏渲染，在view使用自动布局的情况下，不好指定 shadowPath，可以通过重写 UIView 的 layoutSubviews 方法动态指定 shadowPath 的路径，实现过程相对麻烦\n\n### Xcode 10之后删除的libstdc++库\n\n`https://github.com/devdawei/libstdc-`\n","source":"_posts/iOS/iOS问题.md","raw":"---\ntitle: iOS问题\ndate: 2022-10-17 14:32:50\ntags: iOS\n---\n\n## 1. 改变View显示位置，2种方式 (layer的Z轴和view添加的层级)\n\n<!-- more -->\n\n+ 改变layer的Z轴, 大值在上，但下层的view显示在上面，不能响应事件\n\n> view.layer.zPosition=100  \n\n+ view添加的层级\n\n> insertSubview\n> bringSubviewToFront\n> addSubview  \n> insertSubview\n\n## 2. ITSAppUsesNonExemptEncryption导出合规性\n\n此值表示该应用程序不使用加密，或仅使用免除加密。如果您的应用使用加密且不可免除，则必须将此值设置为YES/true。\n\n`info.plist`添加\n\n> App Uses Non-Exempt Encryption = NO\n\n## UIDocumentPickerViewController 选取文件\n\n```ios\n\"com.microsoft.word.doc\",\n\"com.microsoft.word.docx\",\n\"com.microsoft.excel.xls\",\n\"com.microsoft.excel.xlsx\",\n\"com.microsoft.powerpoint.​ppt\",\n\"com.microsoft.powerpoint.​pptx\",\n```\n\n设置了 docx， xlsx，​pptx   发现还是 只能选择 .doc  .xls  .ppt，无法选择 docx， xlsx，​pptx，均为灰色不可选择：\n\n后来谷歌发现对应的格式不对：下面才是 正确的对应 格式\n\n```ios\n\"com.microsoft.word.doc\",\n\"org.openxmlformats.wordprocessingml.document\",\n\"com.microsoft.excel.xls\",\n\"org.openxmlformats.spreadsheetml.sheet\",\n\"com.microsoft.powerpoint.​ppt\",\n\"org.openxmlformats.presentationml.presentation\",\n```\n\n## 圆角与阴影\n\n方法一：指定UIView的根 layer 为 CAShapeLayer 类型，通过设置 layer.path 实现圆角,这时的path是CGPath类型，CGPath 非常灵活，fillColor 当做背景填充色，strokeColor 从当边框颜色，使用 layer.path 作为 shadowPath 一举两得。  \n\n方法二：利用2个UIView实现，父视图为阴影，添加一个ContentView子视图为圆角\n\n+ 1. UIView 的 clipsToBounds 属性设置为 true，会把超出视图范围外的部分裁剪掉不显示，若要使 圆角和阴影共存，那么 clipsToBounds 必须设置为 false，庆幸的是UIView 的 clipsToBounds属性值默认为false\n\n+ 2. 使用layer的mask来给UIView 切圆角会把超出mask范围外的部分裁剪掉，若要使圆角与阴影共存，此方法不可取。\n\n+ 3. 让设计师切一张带阴影的背景图，这个方法简单粗暴。\n\n### 圆角的绘制方法\n\n+ 1. 使用 CAlayer 的 cornerRadius 属性设置圆角\n+ 2. 设置 CAlayer 的 mask 属性\n+ 3. 通过 layerClass 返回 CAShapeLayer,指定当前 UIView 的根 layer 类型，通过设置 CAShapeLayer 的 path 来实现圆角绘制\n\n### 阴影的绘制方法\n\n+ 1. 不指定 shadowPath绘制阴影，会造成离屏渲染\n+ 2. 指定 shadowPath 绘制阴影，不会造成离屏渲染，在view使用自动布局的情况下，不好指定 shadowPath，可以通过重写 UIView 的 layoutSubviews 方法动态指定 shadowPath 的路径，实现过程相对麻烦\n\n### Xcode 10之后删除的libstdc++库\n\n`https://github.com/devdawei/libstdc-`\n","slug":"iOS/iOS问题","published":1,"updated":"2023-06-28T17:49:59.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zk0018j036d9afbo7k","content":"<h2 id=\"1-改变View显示位置，2种方式-layer的Z轴和view添加的层级\"><a href=\"#1-改变View显示位置，2种方式-layer的Z轴和view添加的层级\" class=\"headerlink\" title=\"1. 改变View显示位置，2种方式 (layer的Z轴和view添加的层级)\"></a>1. 改变View显示位置，2种方式 (layer的Z轴和view添加的层级)</h2><span id=\"more\"></span>\n\n<ul>\n<li>改变layer的Z轴, 大值在上，但下层的view显示在上面，不能响应事件</li>\n</ul>\n<blockquote>\n<p>view.layer.zPosition=100  </p>\n</blockquote>\n<ul>\n<li>view添加的层级</li>\n</ul>\n<blockquote>\n<p>insertSubview<br>bringSubviewToFront<br>addSubview<br>insertSubview</p>\n</blockquote>\n<h2 id=\"2-ITSAppUsesNonExemptEncryption导出合规性\"><a href=\"#2-ITSAppUsesNonExemptEncryption导出合规性\" class=\"headerlink\" title=\"2. ITSAppUsesNonExemptEncryption导出合规性\"></a>2. ITSAppUsesNonExemptEncryption导出合规性</h2><p>此值表示该应用程序不使用加密，或仅使用免除加密。如果您的应用使用加密且不可免除，则必须将此值设置为YES/true。</p>\n<p><code>info.plist</code>添加</p>\n<blockquote>\n<p>App Uses Non-Exempt Encryption = NO</p>\n</blockquote>\n<h2 id=\"UIDocumentPickerViewController-选取文件\"><a href=\"#UIDocumentPickerViewController-选取文件\" class=\"headerlink\" title=\"UIDocumentPickerViewController 选取文件\"></a>UIDocumentPickerViewController 选取文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;com.microsoft.word.doc&quot;,</span><br><span class=\"line\">&quot;com.microsoft.word.docx&quot;,</span><br><span class=\"line\">&quot;com.microsoft.excel.xls&quot;,</span><br><span class=\"line\">&quot;com.microsoft.excel.xlsx&quot;,</span><br><span class=\"line\">&quot;com.microsoft.powerpoint.​ppt&quot;,</span><br><span class=\"line\">&quot;com.microsoft.powerpoint.​pptx&quot;,</span><br></pre></td></tr></table></figure>\n\n<p>设置了 docx， xlsx，​pptx   发现还是 只能选择 .doc  .xls  .ppt，无法选择 docx， xlsx，​pptx，均为灰色不可选择：</p>\n<p>后来谷歌发现对应的格式不对：下面才是 正确的对应 格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;com.microsoft.word.doc&quot;,</span><br><span class=\"line\">&quot;org.openxmlformats.wordprocessingml.document&quot;,</span><br><span class=\"line\">&quot;com.microsoft.excel.xls&quot;,</span><br><span class=\"line\">&quot;org.openxmlformats.spreadsheetml.sheet&quot;,</span><br><span class=\"line\">&quot;com.microsoft.powerpoint.​ppt&quot;,</span><br><span class=\"line\">&quot;org.openxmlformats.presentationml.presentation&quot;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆角与阴影\"><a href=\"#圆角与阴影\" class=\"headerlink\" title=\"圆角与阴影\"></a>圆角与阴影</h2><p>方法一：指定UIView的根 layer 为 CAShapeLayer 类型，通过设置 layer.path 实现圆角,这时的path是CGPath类型，CGPath 非常灵活，fillColor 当做背景填充色，strokeColor 从当边框颜色，使用 layer.path 作为 shadowPath 一举两得。  </p>\n<p>方法二：利用2个UIView实现，父视图为阴影，添加一个ContentView子视图为圆角</p>\n<ul>\n<li><ol>\n<li>UIView 的 clipsToBounds 属性设置为 true，会把超出视图范围外的部分裁剪掉不显示，若要使 圆角和阴影共存，那么 clipsToBounds 必须设置为 false，庆幸的是UIView 的 clipsToBounds属性值默认为false</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>使用layer的mask来给UIView 切圆角会把超出mask范围外的部分裁剪掉，若要使圆角与阴影共存，此方法不可取。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>让设计师切一张带阴影的背景图，这个方法简单粗暴。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"圆角的绘制方法\"><a href=\"#圆角的绘制方法\" class=\"headerlink\" title=\"圆角的绘制方法\"></a>圆角的绘制方法</h3><ul>\n<li><ol>\n<li>使用 CAlayer 的 cornerRadius 属性设置圆角</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>设置 CAlayer 的 mask 属性</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>通过 layerClass 返回 CAShapeLayer,指定当前 UIView 的根 layer 类型，通过设置 CAShapeLayer 的 path 来实现圆角绘制</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"阴影的绘制方法\"><a href=\"#阴影的绘制方法\" class=\"headerlink\" title=\"阴影的绘制方法\"></a>阴影的绘制方法</h3><ul>\n<li><ol>\n<li>不指定 shadowPath绘制阴影，会造成离屏渲染</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>指定 shadowPath 绘制阴影，不会造成离屏渲染，在view使用自动布局的情况下，不好指定 shadowPath，可以通过重写 UIView 的 layoutSubviews 方法动态指定 shadowPath 的路径，实现过程相对麻烦</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Xcode-10之后删除的libstdc-库\"><a href=\"#Xcode-10之后删除的libstdc-库\" class=\"headerlink\" title=\"Xcode 10之后删除的libstdc++库\"></a>Xcode 10之后删除的libstdc++库</h3><p><code>https://github.com/devdawei/libstdc-</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-改变View显示位置，2种方式-layer的Z轴和view添加的层级\"><a href=\"#1-改变View显示位置，2种方式-layer的Z轴和view添加的层级\" class=\"headerlink\" title=\"1. 改变View显示位置，2种方式 (layer的Z轴和view添加的层级)\"></a>1. 改变View显示位置，2种方式 (layer的Z轴和view添加的层级)</h2>","more":"<ul>\n<li>改变layer的Z轴, 大值在上，但下层的view显示在上面，不能响应事件</li>\n</ul>\n<blockquote>\n<p>view.layer.zPosition=100  </p>\n</blockquote>\n<ul>\n<li>view添加的层级</li>\n</ul>\n<blockquote>\n<p>insertSubview<br>bringSubviewToFront<br>addSubview<br>insertSubview</p>\n</blockquote>\n<h2 id=\"2-ITSAppUsesNonExemptEncryption导出合规性\"><a href=\"#2-ITSAppUsesNonExemptEncryption导出合规性\" class=\"headerlink\" title=\"2. ITSAppUsesNonExemptEncryption导出合规性\"></a>2. ITSAppUsesNonExemptEncryption导出合规性</h2><p>此值表示该应用程序不使用加密，或仅使用免除加密。如果您的应用使用加密且不可免除，则必须将此值设置为YES/true。</p>\n<p><code>info.plist</code>添加</p>\n<blockquote>\n<p>App Uses Non-Exempt Encryption = NO</p>\n</blockquote>\n<h2 id=\"UIDocumentPickerViewController-选取文件\"><a href=\"#UIDocumentPickerViewController-选取文件\" class=\"headerlink\" title=\"UIDocumentPickerViewController 选取文件\"></a>UIDocumentPickerViewController 选取文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;com.microsoft.word.doc&quot;,</span><br><span class=\"line\">&quot;com.microsoft.word.docx&quot;,</span><br><span class=\"line\">&quot;com.microsoft.excel.xls&quot;,</span><br><span class=\"line\">&quot;com.microsoft.excel.xlsx&quot;,</span><br><span class=\"line\">&quot;com.microsoft.powerpoint.​ppt&quot;,</span><br><span class=\"line\">&quot;com.microsoft.powerpoint.​pptx&quot;,</span><br></pre></td></tr></table></figure>\n\n<p>设置了 docx， xlsx，​pptx   发现还是 只能选择 .doc  .xls  .ppt，无法选择 docx， xlsx，​pptx，均为灰色不可选择：</p>\n<p>后来谷歌发现对应的格式不对：下面才是 正确的对应 格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;com.microsoft.word.doc&quot;,</span><br><span class=\"line\">&quot;org.openxmlformats.wordprocessingml.document&quot;,</span><br><span class=\"line\">&quot;com.microsoft.excel.xls&quot;,</span><br><span class=\"line\">&quot;org.openxmlformats.spreadsheetml.sheet&quot;,</span><br><span class=\"line\">&quot;com.microsoft.powerpoint.​ppt&quot;,</span><br><span class=\"line\">&quot;org.openxmlformats.presentationml.presentation&quot;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆角与阴影\"><a href=\"#圆角与阴影\" class=\"headerlink\" title=\"圆角与阴影\"></a>圆角与阴影</h2><p>方法一：指定UIView的根 layer 为 CAShapeLayer 类型，通过设置 layer.path 实现圆角,这时的path是CGPath类型，CGPath 非常灵活，fillColor 当做背景填充色，strokeColor 从当边框颜色，使用 layer.path 作为 shadowPath 一举两得。  </p>\n<p>方法二：利用2个UIView实现，父视图为阴影，添加一个ContentView子视图为圆角</p>\n<ul>\n<li><ol>\n<li>UIView 的 clipsToBounds 属性设置为 true，会把超出视图范围外的部分裁剪掉不显示，若要使 圆角和阴影共存，那么 clipsToBounds 必须设置为 false，庆幸的是UIView 的 clipsToBounds属性值默认为false</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>使用layer的mask来给UIView 切圆角会把超出mask范围外的部分裁剪掉，若要使圆角与阴影共存，此方法不可取。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>让设计师切一张带阴影的背景图，这个方法简单粗暴。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"圆角的绘制方法\"><a href=\"#圆角的绘制方法\" class=\"headerlink\" title=\"圆角的绘制方法\"></a>圆角的绘制方法</h3><ul>\n<li><ol>\n<li>使用 CAlayer 的 cornerRadius 属性设置圆角</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>设置 CAlayer 的 mask 属性</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>通过 layerClass 返回 CAShapeLayer,指定当前 UIView 的根 layer 类型，通过设置 CAShapeLayer 的 path 来实现圆角绘制</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"阴影的绘制方法\"><a href=\"#阴影的绘制方法\" class=\"headerlink\" title=\"阴影的绘制方法\"></a>阴影的绘制方法</h3><ul>\n<li><ol>\n<li>不指定 shadowPath绘制阴影，会造成离屏渲染</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>指定 shadowPath 绘制阴影，不会造成离屏渲染，在view使用自动布局的情况下，不好指定 shadowPath，可以通过重写 UIView 的 layoutSubviews 方法动态指定 shadowPath 的路径，实现过程相对麻烦</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Xcode-10之后删除的libstdc-库\"><a href=\"#Xcode-10之后删除的libstdc-库\" class=\"headerlink\" title=\"Xcode 10之后删除的libstdc++库\"></a>Xcode 10之后删除的libstdc++库</h3><p><code>https://github.com/devdawei/libstdc-</code></p>"},{"title":"MySql","date":"2018-12-15T13:16:47.000Z","_content":"\nmysql连接错误\n\n1、Authentication type： (mysql8.0.0以上版本)\n\n<!-- more -->\n\n用户的 Authentication type 默认为 caching_sha2_password，导致数据库连接错误，抛出如下异常：\nIlluminate\\Database\\QueryException : SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client\n解决方案：修改密码认证方式\nALTER USER 'youusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'yourpassword';\n","source":"_posts/mysql/mysql.md","raw":"---\ntitle: MySql\ndate: 2018-12-15 21:16:47\ntags:\ncategories: MySql\n---\n\nmysql连接错误\n\n1、Authentication type： (mysql8.0.0以上版本)\n\n<!-- more -->\n\n用户的 Authentication type 默认为 caching_sha2_password，导致数据库连接错误，抛出如下异常：\nIlluminate\\Database\\QueryException : SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client\n解决方案：修改密码认证方式\nALTER USER 'youusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'yourpassword';\n","slug":"mysql/mysql","published":1,"updated":"2021-06-22T07:14:19.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zk001bj03653to4xic","content":"<p>mysql连接错误</p>\n<p>1、Authentication type： (mysql8.0.0以上版本)</p>\n<span id=\"more\"></span>\n\n<p>用户的 Authentication type 默认为 caching_sha2_password，导致数据库连接错误，抛出如下异常：<br>Illuminate\\Database\\QueryException : SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client<br>解决方案：修改密码认证方式<br>ALTER USER ‘youusername‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘yourpassword’;</p>\n","site":{"data":{}},"excerpt":"<p>mysql连接错误</p>\n<p>1、Authentication type： (mysql8.0.0以上版本)</p>","more":"<p>用户的 Authentication type 默认为 caching_sha2_password，导致数据库连接错误，抛出如下异常：<br>Illuminate\\Database\\QueryException : SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client<br>解决方案：修改密码认证方式<br>ALTER USER ‘youusername‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘yourpassword’;</p>"},{"title":"Linux命令","date":"2018-12-15T13:16:47.000Z","_content":"\n> Linux命令\n\n<!-- more -->\n\n## 常用命令\n\n> **ls** 列出目录\n\n```shell\nls -a   // 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来\nls -d   // 仅列出目录本身，而不是列出目录内的文件数据\nls -l   // 长数据串列出，包含文件的属性与权限等等数据\nls -al  // 将该目录下的所有文件列出来(含属性与隐藏档)\n```\n\n> **cd** 切换\b目录\n\n```shell\ncd .    // 当前目录\ncd ..   // 回上一级目录\n```\n\n> **pwd** 显示目前的目录  \n\n```shell\npwd\n```\n\n> **mkdir** 创建一个新的目录 `mkdir [-p] dirName`\n\n```shell\nmkdir       // 创建目录\nmkdir -m    // 配置文件的权限\nmkdir -p    // 可创建多层目录\n```\n\n> **rmdir** 删除一个空的目录 `rmdir [-p] dirName`\n\n```shell\nrmdir      // 删除空目录\nrmdir -p   // 多层删除空目录\n```\n\n> **cp** 复制文件或目录 `cp [options] source dest`\n\n```options\n-a：在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容,相当于-pdr参数组合（常用）\n\n-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；\n\n-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；\n\n-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)\n\n-l：不复制文件，只是生成链接文件；\n\n-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；\n\n-r：递归持续复制，用于目录的复制行为；(常用)\n\n-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；\n\n-u：若 destination 比 source 旧才升级 destination ！\n```\n\n> **rm** 移除文件或目录 `rm [options] name`\n\n```shell\nrm -rf  // 强制移除目录及其子目录\n-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；\n-i ：互动模式，在删除前会询问使用者是否动作\n-r ：递归删除啊！\n```\n\n> **mv** 移动文件与目录，或修改文件与目录的名称 `mv [options] source dest`\n\n```shell\n-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)\n```\n\n## 系统管理命令\n\n```shell\nstat        显示指定文件的详细信息，比ls更详细\nwho         显示在线登陆用户\nwhoami      显示当前操作用户\nhostname    显示主机名\nuname       显示系统信息\ntop         动态显示当前耗费资源最懂进程\nps          显示瞬间进程状态 ps -aux   （mac ： ps -au）\ndu          查看目录大小  du -h/home带有单位显示目录信息\ndf          查看磁盘大小  df -h带有单位显示磁盘信息 \nifconfig    查看网络情况\nping        测试网络连通\nnetstat     显示网络状态信息\nman         命令不会用了  如：man ls\nclear       清屏\nalias       对命令重命名 如: alias showmeit=\"ps -aux\", 解除使用 unalias showmeit\nkill        杀死进程，可以先用ps或top命令查看进程的id，然后再用kill命令杀死进程\n```\n\n## 文件内容查看\n\n> `cat`  由第一行开始显示文件内容  \n`tac`  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！  \n`nl`   显示的时候，顺道输出行号！  \n`more` 一页一页的显示文件内容  \n`less` 与 more 类似，但是比 more 更好的是，他可以往前翻页！  \n`head` 只看头几行  \n`tail` 只看尾巴几行\n\n## 查看系统内核\b\n\n> `cat /proc/version`\n\n```shell\nLinux version 2.6.32-642.el6.x86_64 (mockbuild@worker1.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) ) #1 SMP Tue May 10 17:27:01 UTC 2016\n```\n\n> `uname -r`\n\n```shell\n2.6.32-642.el6.x86_64\n```\n\n> `uname -a`\n\n```shell\nLinux host.localdomain 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n## 查看系统版本\n\n> `cat /etc/issue`\n\n```shell\nCentOS release 6.8 (Final)\nKernel \\r on an \\m\n```\n\n> `cat /etc/redhat-release` // 只对Redhat Linux\b\b有效\n\n```shell\nCentOS release 6.8 (Final)\n```\n\n> `lsb_release -a` // 需安装lsb  yum install lsb –y\n\n```shell\nLSB Version:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID:CentOS\nDescription:CentOS release 6.8 (Final)\nRelease:6.8\nCodename:Final\n```\n\n## 关机 shutdown\n\n> `sync`  // 将数据由内存同步到硬盘中  \n`shutdown -h new`  // 立马关机  \n`shutdown –h 10`  // 10分钟后关机，显示在登录用户的\b屏幕中  \n`shutdown –h +10`  // 10分钟后关机  \n`shutdown –h 20:25`  // 在今天20:25关机  \n`shutdown –r now`  // 系统立马重启  \n`shutdown –r +10`  // 系统十分钟后重启  \n`reboot`  // 就是重启，等同于 shutdown –r now  \n`halt`  // 关闭系统，等同于shutdown –h now 和 poweroff\n\n## 系统状态的命令\n\n> **who**： 确定谁在系统\b中\n\n* `who`：列出当前已登录入系统的用户\nhenry  tty1  2018-12-30 15:51\n用户名  终端设备的设备文件名\n设备文件一般放于目录/dev下\n\n* `tty`：可以打印出当前终端的设备文件名\n* `who am i`：可以列出当前终端上的登录用户\n* `whoami`：仅列出当前终端上的登录用户\n\n> **uptime**：已开机时间（年龄）\n\n15:01:15 up 1:51, 1 user, load average: 0.00, 0.00, 0.00\n\n系统自启动后到现在的运行时间\n当前登录\b入用户数\n近期\b1分钟，5分钟，15分钟内系统CPU的负载\n\n> **top**：列出资源占用排名靠前的进程\n\nVIRT进程逻辑地址空间大小(virtual)\nRES驻留内存数(Resident)，也就是占用物理内存数\nSHR与其他进程内存数(share)\n%CPU占用CPU百分百，%MEM占用内存百分百\nTIME+占用的CPU时间\n\n> **ps**\b：查阅进程状态(process status)\n\n用于控制列表的行数(进程\b范围)和列数(每进程列出的属性内容)  \n`ps`：只列出在当前终端上启动的进程 PID TTY TIME COMMAND  \n`ps e`：列出系统中所有的进程(进程范围)  \n`ps f`：已*fill格式*列出每一个进程(控制列的数目)  \n`ps l`：已*long格式*列出每一个进程(控制列的数目)\n\n> UID：用户ID(注册名)\nPID：进程ID  \nPPID：父进程的PID  \nC：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况  \nSTIME：启动时间  \nSZ：进程逻辑内存大小(size)  \nTTY：终端的名字  \nCOMMAND：命令名  \nWCHAN：进程在内核的何处睡眠(wait channel)  \nTIME：累计执行时间(占用CPU的时间)  \nPRI：优先级  \nS：状态，S(sleep)，R(run)，Z(Zombie)  \n> **free**：内存使用情况  \n> **vmtat**：系统负载\n\nProcs r等待运行的进程数 b处在非中断睡眠状态的进程数  \nMemory free空闲的内存 buff/cache用做缓存的内存数  \nSwap 磁盘/内存的交换页数量，单位：KB/秒  \nIO 设备I/O块数，单位：块/秒  \nSystem in每秒的硬件中断数(interrupt)，包括时钟中断 cs每秒环境切换次数(context switch)  \nCPU 总使用率 us=user sy=system id=idle wa=wait for disk I/O\n","source":"_posts/linux/Linux命令.md","raw":"---\ntitle: Linux命令\ndate: 2018-12-15 21:16:47\ntags: Linux\ncategories: Linux\n---\n\n> Linux命令\n\n<!-- more -->\n\n## 常用命令\n\n> **ls** 列出目录\n\n```shell\nls -a   // 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来\nls -d   // 仅列出目录本身，而不是列出目录内的文件数据\nls -l   // 长数据串列出，包含文件的属性与权限等等数据\nls -al  // 将该目录下的所有文件列出来(含属性与隐藏档)\n```\n\n> **cd** 切换\b目录\n\n```shell\ncd .    // 当前目录\ncd ..   // 回上一级目录\n```\n\n> **pwd** 显示目前的目录  \n\n```shell\npwd\n```\n\n> **mkdir** 创建一个新的目录 `mkdir [-p] dirName`\n\n```shell\nmkdir       // 创建目录\nmkdir -m    // 配置文件的权限\nmkdir -p    // 可创建多层目录\n```\n\n> **rmdir** 删除一个空的目录 `rmdir [-p] dirName`\n\n```shell\nrmdir      // 删除空目录\nrmdir -p   // 多层删除空目录\n```\n\n> **cp** 复制文件或目录 `cp [options] source dest`\n\n```options\n-a：在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容,相当于-pdr参数组合（常用）\n\n-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；\n\n-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；\n\n-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)\n\n-l：不复制文件，只是生成链接文件；\n\n-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；\n\n-r：递归持续复制，用于目录的复制行为；(常用)\n\n-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；\n\n-u：若 destination 比 source 旧才升级 destination ！\n```\n\n> **rm** 移除文件或目录 `rm [options] name`\n\n```shell\nrm -rf  // 强制移除目录及其子目录\n-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；\n-i ：互动模式，在删除前会询问使用者是否动作\n-r ：递归删除啊！\n```\n\n> **mv** 移动文件与目录，或修改文件与目录的名称 `mv [options] source dest`\n\n```shell\n-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)\n```\n\n## 系统管理命令\n\n```shell\nstat        显示指定文件的详细信息，比ls更详细\nwho         显示在线登陆用户\nwhoami      显示当前操作用户\nhostname    显示主机名\nuname       显示系统信息\ntop         动态显示当前耗费资源最懂进程\nps          显示瞬间进程状态 ps -aux   （mac ： ps -au）\ndu          查看目录大小  du -h/home带有单位显示目录信息\ndf          查看磁盘大小  df -h带有单位显示磁盘信息 \nifconfig    查看网络情况\nping        测试网络连通\nnetstat     显示网络状态信息\nman         命令不会用了  如：man ls\nclear       清屏\nalias       对命令重命名 如: alias showmeit=\"ps -aux\", 解除使用 unalias showmeit\nkill        杀死进程，可以先用ps或top命令查看进程的id，然后再用kill命令杀死进程\n```\n\n## 文件内容查看\n\n> `cat`  由第一行开始显示文件内容  \n`tac`  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！  \n`nl`   显示的时候，顺道输出行号！  \n`more` 一页一页的显示文件内容  \n`less` 与 more 类似，但是比 more 更好的是，他可以往前翻页！  \n`head` 只看头几行  \n`tail` 只看尾巴几行\n\n## 查看系统内核\b\n\n> `cat /proc/version`\n\n```shell\nLinux version 2.6.32-642.el6.x86_64 (mockbuild@worker1.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) ) #1 SMP Tue May 10 17:27:01 UTC 2016\n```\n\n> `uname -r`\n\n```shell\n2.6.32-642.el6.x86_64\n```\n\n> `uname -a`\n\n```shell\nLinux host.localdomain 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n## 查看系统版本\n\n> `cat /etc/issue`\n\n```shell\nCentOS release 6.8 (Final)\nKernel \\r on an \\m\n```\n\n> `cat /etc/redhat-release` // 只对Redhat Linux\b\b有效\n\n```shell\nCentOS release 6.8 (Final)\n```\n\n> `lsb_release -a` // 需安装lsb  yum install lsb –y\n\n```shell\nLSB Version:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID:CentOS\nDescription:CentOS release 6.8 (Final)\nRelease:6.8\nCodename:Final\n```\n\n## 关机 shutdown\n\n> `sync`  // 将数据由内存同步到硬盘中  \n`shutdown -h new`  // 立马关机  \n`shutdown –h 10`  // 10分钟后关机，显示在登录用户的\b屏幕中  \n`shutdown –h +10`  // 10分钟后关机  \n`shutdown –h 20:25`  // 在今天20:25关机  \n`shutdown –r now`  // 系统立马重启  \n`shutdown –r +10`  // 系统十分钟后重启  \n`reboot`  // 就是重启，等同于 shutdown –r now  \n`halt`  // 关闭系统，等同于shutdown –h now 和 poweroff\n\n## 系统状态的命令\n\n> **who**： 确定谁在系统\b中\n\n* `who`：列出当前已登录入系统的用户\nhenry  tty1  2018-12-30 15:51\n用户名  终端设备的设备文件名\n设备文件一般放于目录/dev下\n\n* `tty`：可以打印出当前终端的设备文件名\n* `who am i`：可以列出当前终端上的登录用户\n* `whoami`：仅列出当前终端上的登录用户\n\n> **uptime**：已开机时间（年龄）\n\n15:01:15 up 1:51, 1 user, load average: 0.00, 0.00, 0.00\n\n系统自启动后到现在的运行时间\n当前登录\b入用户数\n近期\b1分钟，5分钟，15分钟内系统CPU的负载\n\n> **top**：列出资源占用排名靠前的进程\n\nVIRT进程逻辑地址空间大小(virtual)\nRES驻留内存数(Resident)，也就是占用物理内存数\nSHR与其他进程内存数(share)\n%CPU占用CPU百分百，%MEM占用内存百分百\nTIME+占用的CPU时间\n\n> **ps**\b：查阅进程状态(process status)\n\n用于控制列表的行数(进程\b范围)和列数(每进程列出的属性内容)  \n`ps`：只列出在当前终端上启动的进程 PID TTY TIME COMMAND  \n`ps e`：列出系统中所有的进程(进程范围)  \n`ps f`：已*fill格式*列出每一个进程(控制列的数目)  \n`ps l`：已*long格式*列出每一个进程(控制列的数目)\n\n> UID：用户ID(注册名)\nPID：进程ID  \nPPID：父进程的PID  \nC：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况  \nSTIME：启动时间  \nSZ：进程逻辑内存大小(size)  \nTTY：终端的名字  \nCOMMAND：命令名  \nWCHAN：进程在内核的何处睡眠(wait channel)  \nTIME：累计执行时间(占用CPU的时间)  \nPRI：优先级  \nS：状态，S(sleep)，R(run)，Z(Zombie)  \n> **free**：内存使用情况  \n> **vmtat**：系统负载\n\nProcs r等待运行的进程数 b处在非中断睡眠状态的进程数  \nMemory free空闲的内存 buff/cache用做缓存的内存数  \nSwap 磁盘/内存的交换页数量，单位：KB/秒  \nIO 设备I/O块数，单位：块/秒  \nSystem in每秒的硬件中断数(interrupt)，包括时钟中断 cs每秒环境切换次数(context switch)  \nCPU 总使用率 us=user sy=system id=idle wa=wait for disk I/O\n","slug":"linux/Linux命令","published":1,"updated":"2021-07-01T06:11:04.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zl001fj036d18panz7","content":"<blockquote>\n<p>Linux命令</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><blockquote>\n<p><strong>ls</strong> 列出目录</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a   // 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来</span><br><span class=\"line\">ls -d   // 仅列出目录本身，而不是列出目录内的文件数据</span><br><span class=\"line\">ls -l   // 长数据串列出，包含文件的属性与权限等等数据</span><br><span class=\"line\">ls -al  // 将该目录下的所有文件列出来(含属性与隐藏档)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cd</strong> 切换\b目录</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .    // 当前目录</span><br><span class=\"line\">cd ..   // 回上一级目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>pwd</strong> 显示目前的目录  </p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>mkdir</strong> 创建一个新的目录 <code>mkdir [-p] dirName</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir       // 创建目录</span><br><span class=\"line\">mkdir -m    // 配置文件的权限</span><br><span class=\"line\">mkdir -p    // 可创建多层目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>rmdir</strong> 删除一个空的目录 <code>rmdir [-p] dirName</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir      // 删除空目录</span><br><span class=\"line\">rmdir -p   // 多层删除空目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cp</strong> 复制文件或目录 <code>cp [options] source dest</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a：在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容,相当于-pdr参数组合（常用）</span><br><span class=\"line\"></span><br><span class=\"line\">-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</span><br><span class=\"line\"></span><br><span class=\"line\">-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</span><br><span class=\"line\"></span><br><span class=\"line\">-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-l：不复制文件，只是生成链接文件；</span><br><span class=\"line\"></span><br><span class=\"line\">-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</span><br><span class=\"line\"></span><br><span class=\"line\">-r：递归持续复制，用于目录的复制行为；(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</span><br><span class=\"line\"></span><br><span class=\"line\">-u：若 destination 比 source 旧才升级 destination ！</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>rm</strong> 移除文件或目录 <code>rm [options] name</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf  // 强制移除目录及其子目录</span><br><span class=\"line\">-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</span><br><span class=\"line\">-i ：互动模式，在删除前会询问使用者是否动作</span><br><span class=\"line\">-r ：递归删除啊！</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>mv</strong> 移动文件与目录，或修改文件与目录的名称 <code>mv [options] source dest</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</span><br><span class=\"line\">-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</span><br><span class=\"line\">-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"系统管理命令\"><a href=\"#系统管理命令\" class=\"headerlink\" title=\"系统管理命令\"></a>系统管理命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stat        显示指定文件的详细信息，比ls更详细</span><br><span class=\"line\">who         显示在线登陆用户</span><br><span class=\"line\">whoami      显示当前操作用户</span><br><span class=\"line\">hostname    显示主机名</span><br><span class=\"line\">uname       显示系统信息</span><br><span class=\"line\">top         动态显示当前耗费资源最懂进程</span><br><span class=\"line\">ps          显示瞬间进程状态 ps -aux   （mac ： ps -au）</span><br><span class=\"line\">du          查看目录大小  du -h/home带有单位显示目录信息</span><br><span class=\"line\">df          查看磁盘大小  df -h带有单位显示磁盘信息 </span><br><span class=\"line\">ifconfig    查看网络情况</span><br><span class=\"line\">ping        测试网络连通</span><br><span class=\"line\">netstat     显示网络状态信息</span><br><span class=\"line\">man         命令不会用了  如：man ls</span><br><span class=\"line\">clear       清屏</span><br><span class=\"line\">alias       对命令重命名 如: alias showmeit=&quot;ps -aux&quot;, 解除使用 unalias showmeit</span><br><span class=\"line\">kill        杀死进程，可以先用ps或top命令查看进程的id，然后再用kill命令杀死进程</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件内容查看\"><a href=\"#文件内容查看\" class=\"headerlink\" title=\"文件内容查看\"></a>文件内容查看</h2><blockquote>\n<p><code>cat</code>  由第一行开始显示文件内容<br><code>tac</code>  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！<br><code>nl</code>   显示的时候，顺道输出行号！<br><code>more</code> 一页一页的显示文件内容<br><code>less</code> 与 more 类似，但是比 more 更好的是，他可以往前翻页！<br><code>head</code> 只看头几行<br><code>tail</code> 只看尾巴几行</p>\n</blockquote>\n<h2 id=\"查看系统内核\"><a href=\"#查看系统内核\" class=\"headerlink\" title=\"查看系统内核\b\"></a>查看系统内核\b</h2><blockquote>\n<p><code>cat /proc/version</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux version 2.6.32-642.el6.x86_64 (mockbuild@worker1.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) ) #1 SMP Tue May 10 17:27:01 UTC 2016</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>uname -r</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.6.32-642.el6.x86_64</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>uname -a</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux host.localdomain 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看系统版本\"><a href=\"#查看系统版本\" class=\"headerlink\" title=\"查看系统版本\"></a>查看系统版本</h2><blockquote>\n<p><code>cat /etc/issue</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS release 6.8 (Final)</span><br><span class=\"line\">Kernel \\r on an \\m</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>cat /etc/redhat-release</code> // 只对Redhat Linux\b\b有效</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS release 6.8 (Final)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>lsb_release -a</code> // 需安装lsb  yum install lsb –y</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LSB Version:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch</span><br><span class=\"line\">Distributor ID:CentOS</span><br><span class=\"line\">Description:CentOS release 6.8 (Final)</span><br><span class=\"line\">Release:6.8</span><br><span class=\"line\">Codename:Final</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关机-shutdown\"><a href=\"#关机-shutdown\" class=\"headerlink\" title=\"关机 shutdown\"></a>关机 shutdown</h2><blockquote>\n<p><code>sync</code>  // 将数据由内存同步到硬盘中<br><code>shutdown -h new</code>  // 立马关机<br><code>shutdown –h 10</code>  // 10分钟后关机，显示在登录用户的\b屏幕中<br><code>shutdown –h +10</code>  // 10分钟后关机<br><code>shutdown –h 20:25</code>  // 在今天20:25关机<br><code>shutdown –r now</code>  // 系统立马重启<br><code>shutdown –r +10</code>  // 系统十分钟后重启<br><code>reboot</code>  // 就是重启，等同于 shutdown –r now<br><code>halt</code>  // 关闭系统，等同于shutdown –h now 和 poweroff</p>\n</blockquote>\n<h2 id=\"系统状态的命令\"><a href=\"#系统状态的命令\" class=\"headerlink\" title=\"系统状态的命令\"></a>系统状态的命令</h2><blockquote>\n<p><strong>who</strong>： 确定谁在系统\b中</p>\n</blockquote>\n<ul>\n<li><p><code>who</code>：列出当前已登录入系统的用户<br>henry  tty1  2018-12-30 15:51<br>用户名  终端设备的设备文件名<br>设备文件一般放于目录/dev下</p>\n</li>\n<li><p><code>tty</code>：可以打印出当前终端的设备文件名</p>\n</li>\n<li><p><code>who am i</code>：可以列出当前终端上的登录用户</p>\n</li>\n<li><p><code>whoami</code>：仅列出当前终端上的登录用户</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>uptime</strong>：已开机时间（年龄）</p>\n</blockquote>\n<p>15:01:15 up 1:51, 1 user, load average: 0.00, 0.00, 0.00</p>\n<p>系统自启动后到现在的运行时间<br>当前登录\b入用户数<br>近期\b1分钟，5分钟，15分钟内系统CPU的负载</p>\n<blockquote>\n<p><strong>top</strong>：列出资源占用排名靠前的进程</p>\n</blockquote>\n<p>VIRT进程逻辑地址空间大小(virtual)<br>RES驻留内存数(Resident)，也就是占用物理内存数<br>SHR与其他进程内存数(share)<br>%CPU占用CPU百分百，%MEM占用内存百分百<br>TIME+占用的CPU时间</p>\n<blockquote>\n<p><strong>ps</strong>\b：查阅进程状态(process status)</p>\n</blockquote>\n<p>用于控制列表的行数(进程\b范围)和列数(每进程列出的属性内容)<br><code>ps</code>：只列出在当前终端上启动的进程 PID TTY TIME COMMAND<br><code>ps e</code>：列出系统中所有的进程(进程范围)<br><code>ps f</code>：已<em>fill格式</em>列出每一个进程(控制列的数目)<br><code>ps l</code>：已<em>long格式</em>列出每一个进程(控制列的数目)</p>\n<blockquote>\n<p>UID：用户ID(注册名)<br>PID：进程ID<br>PPID：父进程的PID<br>C：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况<br>STIME：启动时间<br>SZ：进程逻辑内存大小(size)<br>TTY：终端的名字<br>COMMAND：命令名<br>WCHAN：进程在内核的何处睡眠(wait channel)<br>TIME：累计执行时间(占用CPU的时间)<br>PRI：优先级<br>S：状态，S(sleep)，R(run)，Z(Zombie)<br><strong>free</strong>：内存使用情况<br><strong>vmtat</strong>：系统负载</p>\n</blockquote>\n<p>Procs r等待运行的进程数 b处在非中断睡眠状态的进程数<br>Memory free空闲的内存 buff/cache用做缓存的内存数<br>Swap 磁盘/内存的交换页数量，单位：KB/秒<br>IO 设备I/O块数，单位：块/秒<br>System in每秒的硬件中断数(interrupt)，包括时钟中断 cs每秒环境切换次数(context switch)<br>CPU 总使用率 us=user sy=system id=idle wa=wait for disk I/O</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Linux命令</p>\n</blockquote>","more":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><blockquote>\n<p><strong>ls</strong> 列出目录</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a   // 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来</span><br><span class=\"line\">ls -d   // 仅列出目录本身，而不是列出目录内的文件数据</span><br><span class=\"line\">ls -l   // 长数据串列出，包含文件的属性与权限等等数据</span><br><span class=\"line\">ls -al  // 将该目录下的所有文件列出来(含属性与隐藏档)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cd</strong> 切换\b目录</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .    // 当前目录</span><br><span class=\"line\">cd ..   // 回上一级目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>pwd</strong> 显示目前的目录  </p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>mkdir</strong> 创建一个新的目录 <code>mkdir [-p] dirName</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir       // 创建目录</span><br><span class=\"line\">mkdir -m    // 配置文件的权限</span><br><span class=\"line\">mkdir -p    // 可创建多层目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>rmdir</strong> 删除一个空的目录 <code>rmdir [-p] dirName</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmdir      // 删除空目录</span><br><span class=\"line\">rmdir -p   // 多层删除空目录</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>cp</strong> 复制文件或目录 <code>cp [options] source dest</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a：在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容,相当于-pdr参数组合（常用）</span><br><span class=\"line\"></span><br><span class=\"line\">-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</span><br><span class=\"line\"></span><br><span class=\"line\">-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</span><br><span class=\"line\"></span><br><span class=\"line\">-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-l：不复制文件，只是生成链接文件；</span><br><span class=\"line\"></span><br><span class=\"line\">-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</span><br><span class=\"line\"></span><br><span class=\"line\">-r：递归持续复制，用于目录的复制行为；(常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</span><br><span class=\"line\"></span><br><span class=\"line\">-u：若 destination 比 source 旧才升级 destination ！</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>rm</strong> 移除文件或目录 <code>rm [options] name</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf  // 强制移除目录及其子目录</span><br><span class=\"line\">-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</span><br><span class=\"line\">-i ：互动模式，在删除前会询问使用者是否动作</span><br><span class=\"line\">-r ：递归删除啊！</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>mv</strong> 移动文件与目录，或修改文件与目录的名称 <code>mv [options] source dest</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</span><br><span class=\"line\">-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</span><br><span class=\"line\">-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"系统管理命令\"><a href=\"#系统管理命令\" class=\"headerlink\" title=\"系统管理命令\"></a>系统管理命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stat        显示指定文件的详细信息，比ls更详细</span><br><span class=\"line\">who         显示在线登陆用户</span><br><span class=\"line\">whoami      显示当前操作用户</span><br><span class=\"line\">hostname    显示主机名</span><br><span class=\"line\">uname       显示系统信息</span><br><span class=\"line\">top         动态显示当前耗费资源最懂进程</span><br><span class=\"line\">ps          显示瞬间进程状态 ps -aux   （mac ： ps -au）</span><br><span class=\"line\">du          查看目录大小  du -h/home带有单位显示目录信息</span><br><span class=\"line\">df          查看磁盘大小  df -h带有单位显示磁盘信息 </span><br><span class=\"line\">ifconfig    查看网络情况</span><br><span class=\"line\">ping        测试网络连通</span><br><span class=\"line\">netstat     显示网络状态信息</span><br><span class=\"line\">man         命令不会用了  如：man ls</span><br><span class=\"line\">clear       清屏</span><br><span class=\"line\">alias       对命令重命名 如: alias showmeit=&quot;ps -aux&quot;, 解除使用 unalias showmeit</span><br><span class=\"line\">kill        杀死进程，可以先用ps或top命令查看进程的id，然后再用kill命令杀死进程</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件内容查看\"><a href=\"#文件内容查看\" class=\"headerlink\" title=\"文件内容查看\"></a>文件内容查看</h2><blockquote>\n<p><code>cat</code>  由第一行开始显示文件内容<br><code>tac</code>  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！<br><code>nl</code>   显示的时候，顺道输出行号！<br><code>more</code> 一页一页的显示文件内容<br><code>less</code> 与 more 类似，但是比 more 更好的是，他可以往前翻页！<br><code>head</code> 只看头几行<br><code>tail</code> 只看尾巴几行</p>\n</blockquote>\n<h2 id=\"查看系统内核\"><a href=\"#查看系统内核\" class=\"headerlink\" title=\"查看系统内核\b\"></a>查看系统内核\b</h2><blockquote>\n<p><code>cat /proc/version</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux version 2.6.32-642.el6.x86_64 (mockbuild@worker1.bsys.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) ) #1 SMP Tue May 10 17:27:01 UTC 2016</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>uname -r</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.6.32-642.el6.x86_64</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>uname -a</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux host.localdomain 2.6.32-642.el6.x86_64 #1 SMP Tue May 10 17:27:01 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看系统版本\"><a href=\"#查看系统版本\" class=\"headerlink\" title=\"查看系统版本\"></a>查看系统版本</h2><blockquote>\n<p><code>cat /etc/issue</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS release 6.8 (Final)</span><br><span class=\"line\">Kernel \\r on an \\m</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>cat /etc/redhat-release</code> // 只对Redhat Linux\b\b有效</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS release 6.8 (Final)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>lsb_release -a</code> // 需安装lsb  yum install lsb –y</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LSB Version:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch</span><br><span class=\"line\">Distributor ID:CentOS</span><br><span class=\"line\">Description:CentOS release 6.8 (Final)</span><br><span class=\"line\">Release:6.8</span><br><span class=\"line\">Codename:Final</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关机-shutdown\"><a href=\"#关机-shutdown\" class=\"headerlink\" title=\"关机 shutdown\"></a>关机 shutdown</h2><blockquote>\n<p><code>sync</code>  // 将数据由内存同步到硬盘中<br><code>shutdown -h new</code>  // 立马关机<br><code>shutdown –h 10</code>  // 10分钟后关机，显示在登录用户的\b屏幕中<br><code>shutdown –h +10</code>  // 10分钟后关机<br><code>shutdown –h 20:25</code>  // 在今天20:25关机<br><code>shutdown –r now</code>  // 系统立马重启<br><code>shutdown –r +10</code>  // 系统十分钟后重启<br><code>reboot</code>  // 就是重启，等同于 shutdown –r now<br><code>halt</code>  // 关闭系统，等同于shutdown –h now 和 poweroff</p>\n</blockquote>\n<h2 id=\"系统状态的命令\"><a href=\"#系统状态的命令\" class=\"headerlink\" title=\"系统状态的命令\"></a>系统状态的命令</h2><blockquote>\n<p><strong>who</strong>： 确定谁在系统\b中</p>\n</blockquote>\n<ul>\n<li><p><code>who</code>：列出当前已登录入系统的用户<br>henry  tty1  2018-12-30 15:51<br>用户名  终端设备的设备文件名<br>设备文件一般放于目录/dev下</p>\n</li>\n<li><p><code>tty</code>：可以打印出当前终端的设备文件名</p>\n</li>\n<li><p><code>who am i</code>：可以列出当前终端上的登录用户</p>\n</li>\n<li><p><code>whoami</code>：仅列出当前终端上的登录用户</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>uptime</strong>：已开机时间（年龄）</p>\n</blockquote>\n<p>15:01:15 up 1:51, 1 user, load average: 0.00, 0.00, 0.00</p>\n<p>系统自启动后到现在的运行时间<br>当前登录\b入用户数<br>近期\b1分钟，5分钟，15分钟内系统CPU的负载</p>\n<blockquote>\n<p><strong>top</strong>：列出资源占用排名靠前的进程</p>\n</blockquote>\n<p>VIRT进程逻辑地址空间大小(virtual)<br>RES驻留内存数(Resident)，也就是占用物理内存数<br>SHR与其他进程内存数(share)<br>%CPU占用CPU百分百，%MEM占用内存百分百<br>TIME+占用的CPU时间</p>\n<blockquote>\n<p><strong>ps</strong>\b：查阅进程状态(process status)</p>\n</blockquote>\n<p>用于控制列表的行数(进程\b范围)和列数(每进程列出的属性内容)<br><code>ps</code>：只列出在当前终端上启动的进程 PID TTY TIME COMMAND<br><code>ps e</code>：列出系统中所有的进程(进程范围)<br><code>ps f</code>：已<em>fill格式</em>列出每一个进程(控制列的数目)<br><code>ps l</code>：已<em>long格式</em>列出每一个进程(控制列的数目)</p>\n<blockquote>\n<p>UID：用户ID(注册名)<br>PID：进程ID<br>PPID：父进程的PID<br>C：CPU占用指数：最近一段时间(秒级别)进程占用CPU情况<br>STIME：启动时间<br>SZ：进程逻辑内存大小(size)<br>TTY：终端的名字<br>COMMAND：命令名<br>WCHAN：进程在内核的何处睡眠(wait channel)<br>TIME：累计执行时间(占用CPU的时间)<br>PRI：优先级<br>S：状态，S(sleep)，R(run)，Z(Zombie)<br><strong>free</strong>：内存使用情况<br><strong>vmtat</strong>：系统负载</p>\n</blockquote>\n<p>Procs r等待运行的进程数 b处在非中断睡眠状态的进程数<br>Memory free空闲的内存 buff/cache用做缓存的内存数<br>Swap 磁盘/内存的交换页数量，单位：KB/秒<br>IO 设备I/O块数，单位：块/秒<br>System in每秒的硬件中断数(interrupt)，包括时钟中断 cs每秒环境切换次数(context switch)<br>CPU 总使用率 us=user sy=system id=idle wa=wait for disk I/O</p>"},{"title":"Linux系统权限","date":"2018-12-15T13:16:47.000Z","_content":"\nUnix/Linux 系统中的 Operation Not Permitted 问题\n\n<!-- more -->\n\nOS X EI Capitan 的 SIP\n\nApple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，但是对于我们这群程序员，很多保护是多余的，甚至给我们带来了很多麻烦。\n\nSIP 会锁定几个系统文件目录：\n\n```shell\n/System\n/sbin\n/usr （/usr/local 除外）\n```\n\n在 SIP 的保护下，部分软件、功能、脚本都会失效，我们可以通过如下步骤关闭 SIP：\n\n重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）\n当 OSX 工具出现在屏幕中时，下拉工具（Utilities）菜单，选择终端（Terminal）\n键入 csrutil disable，回车\n电脑重启后，SIP 就关闭了\n\n恢复 SIP 的方式同上，只不过终端中键入 csrutil enable。通过 csrutil status 可以检测系统当前 SIP 的启动状态：\n\n```shell\n$ csrutil status\nSystem Integrity Protection status: enabled.\n```\n\n**参考：** <https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/>\n","source":"_posts/linux/Linux系统权限.md","raw":"---\ntitle: Linux系统权限\ndate: 2018-12-15 21:16:47\ntags: Linux\ncategories: Linux\n---\n\nUnix/Linux 系统中的 Operation Not Permitted 问题\n\n<!-- more -->\n\nOS X EI Capitan 的 SIP\n\nApple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，但是对于我们这群程序员，很多保护是多余的，甚至给我们带来了很多麻烦。\n\nSIP 会锁定几个系统文件目录：\n\n```shell\n/System\n/sbin\n/usr （/usr/local 除外）\n```\n\n在 SIP 的保护下，部分软件、功能、脚本都会失效，我们可以通过如下步骤关闭 SIP：\n\n重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）\n当 OSX 工具出现在屏幕中时，下拉工具（Utilities）菜单，选择终端（Terminal）\n键入 csrutil disable，回车\n电脑重启后，SIP 就关闭了\n\n恢复 SIP 的方式同上，只不过终端中键入 csrutil enable。通过 csrutil status 可以检测系统当前 SIP 的启动状态：\n\n```shell\n$ csrutil status\nSystem Integrity Protection status: enabled.\n```\n\n**参考：** <https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/>\n","slug":"linux/Linux系统权限","published":1,"updated":"2021-07-01T06:05:38.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zm001jj036hwqub2hq","content":"<p>Unix/Linux 系统中的 Operation Not Permitted 问题</p>\n<span id=\"more\"></span>\n\n<p>OS X EI Capitan 的 SIP</p>\n<p>Apple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，但是对于我们这群程序员，很多保护是多余的，甚至给我们带来了很多麻烦。</p>\n<p>SIP 会锁定几个系统文件目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/System</span><br><span class=\"line\">/sbin</span><br><span class=\"line\">/usr （/usr/local 除外）</span><br></pre></td></tr></table></figure>\n\n<p>在 SIP 的保护下，部分软件、功能、脚本都会失效，我们可以通过如下步骤关闭 SIP：</p>\n<p>重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）<br>当 OSX 工具出现在屏幕中时，下拉工具（Utilities）菜单，选择终端（Terminal）<br>键入 csrutil disable，回车<br>电脑重启后，SIP 就关闭了</p>\n<p>恢复 SIP 的方式同上，只不过终端中键入 csrutil enable。通过 csrutil status 可以检测系统当前 SIP 的启动状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> csrutil status</span></span><br><span class=\"line\">System Integrity Protection status: enabled.</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考：</strong> <a href=\"https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/\">https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/</a></p>\n","site":{"data":{}},"excerpt":"<p>Unix/Linux 系统中的 Operation Not Permitted 问题</p>","more":"<p>OS X EI Capitan 的 SIP</p>\n<p>Apple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，但是对于我们这群程序员，很多保护是多余的，甚至给我们带来了很多麻烦。</p>\n<p>SIP 会锁定几个系统文件目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/System</span><br><span class=\"line\">/sbin</span><br><span class=\"line\">/usr （/usr/local 除外）</span><br></pre></td></tr></table></figure>\n\n<p>在 SIP 的保护下，部分软件、功能、脚本都会失效，我们可以通过如下步骤关闭 SIP：</p>\n<p>重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）<br>当 OSX 工具出现在屏幕中时，下拉工具（Utilities）菜单，选择终端（Terminal）<br>键入 csrutil disable，回车<br>电脑重启后，SIP 就关闭了</p>\n<p>恢复 SIP 的方式同上，只不过终端中键入 csrutil enable。通过 csrutil status 可以检测系统当前 SIP 的启动状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> csrutil status</span></span><br><span class=\"line\">System Integrity Protection status: enabled.</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考：</strong> <a href=\"https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/\">https://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/</a></p>"},{"title":"Node.js创建应用","date":"2019-03-25T15:23:55.000Z","_content":"\n## 创建Node.js应用\n\n<!-- more -->\n\n```node\n// require载入http模块，实例化HTTP\nvar http = require('http');\nhttp.createServer(function (request, response) {\n\n    // 发送 HTTP 头部 \n    // HTTP 状态值: 200 : OK\n    // 内容类型: text/plain\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n\n    // 发送响应数据 \"Hello World\"\n    response.end('Hello world\\n');\n}).listen(8888);\n\n// 终端打印如下信息\nconsole.log('Server running at http://127.0.0.1:8888/');\n```\n\n保存为`server.js`文件\n\n使用`node`命令执行\n\n```terminal\nnode server.js\nServer running at http://127.0.0.1:8888/\n```\n\n打开浏览器即可访问<http://127.0.0.1:8888/>，\n","source":"_posts/js/Node-js创建应用.md","raw":"---\ntitle: Node.js创建应用\ndate: 2019-03-25 23:23:55\ntags: [JS, Node]\ncategories: JS\n---\n\n## 创建Node.js应用\n\n<!-- more -->\n\n```node\n// require载入http模块，实例化HTTP\nvar http = require('http');\nhttp.createServer(function (request, response) {\n\n    // 发送 HTTP 头部 \n    // HTTP 状态值: 200 : OK\n    // 内容类型: text/plain\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n\n    // 发送响应数据 \"Hello World\"\n    response.end('Hello world\\n');\n}).listen(8888);\n\n// 终端打印如下信息\nconsole.log('Server running at http://127.0.0.1:8888/');\n```\n\n保存为`server.js`文件\n\n使用`node`命令执行\n\n```terminal\nnode server.js\nServer running at http://127.0.0.1:8888/\n```\n\n打开浏览器即可访问<http://127.0.0.1:8888/>，\n","slug":"js/Node-js创建应用","published":1,"updated":"2021-06-22T07:14:19.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zn001nj036gm1ahcr5","content":"<h2 id=\"创建Node-js应用\"><a href=\"#创建Node-js应用\" class=\"headerlink\" title=\"创建Node.js应用\"></a>创建Node.js应用</h2><span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// require载入http模块，实例化HTTP</span><br><span class=\"line\">var http = require(&#x27;http&#x27;);</span><br><span class=\"line\">http.createServer(function (request, response) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发送 HTTP 头部 </span><br><span class=\"line\">    // HTTP 状态值: 200 : OK</span><br><span class=\"line\">    // 内容类型: text/plain</span><br><span class=\"line\">    response.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发送响应数据 &quot;Hello World&quot;</span><br><span class=\"line\">    response.end(&#x27;Hello world\\n&#x27;);</span><br><span class=\"line\">&#125;).listen(8888);</span><br><span class=\"line\"></span><br><span class=\"line\">// 终端打印如下信息</span><br><span class=\"line\">console.log(&#x27;Server running at http://127.0.0.1:8888/&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>保存为<code>server.js</code>文件</p>\n<p>使用<code>node</code>命令执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server.js</span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器即可访问<a href=\"http://127.0.0.1:8888/\">http://127.0.0.1:8888/</a>，</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"创建Node-js应用\"><a href=\"#创建Node-js应用\" class=\"headerlink\" title=\"创建Node.js应用\"></a>创建Node.js应用</h2>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// require载入http模块，实例化HTTP</span><br><span class=\"line\">var http = require(&#x27;http&#x27;);</span><br><span class=\"line\">http.createServer(function (request, response) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发送 HTTP 头部 </span><br><span class=\"line\">    // HTTP 状态值: 200 : OK</span><br><span class=\"line\">    // 内容类型: text/plain</span><br><span class=\"line\">    response.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发送响应数据 &quot;Hello World&quot;</span><br><span class=\"line\">    response.end(&#x27;Hello world\\n&#x27;);</span><br><span class=\"line\">&#125;).listen(8888);</span><br><span class=\"line\"></span><br><span class=\"line\">// 终端打印如下信息</span><br><span class=\"line\">console.log(&#x27;Server running at http://127.0.0.1:8888/&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>保存为<code>server.js</code>文件</p>\n<p>使用<code>node</code>命令执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server.js</span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器即可访问<a href=\"http://127.0.0.1:8888/\">http://127.0.0.1:8888/</a>，</p>"},{"title":"JavaScript","date":"2018-11-07T05:15:56.000Z","_content":"\n> JavaScript（解释型编程语言）\n\nJavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。上线时间：1995年\n\n<!-- more -->\n\n## 一、前言\n\n### JavaScript\n\n不例外，我们从`Hello, world`开始\n\n```HTML\n<html>\n<head>\n  <script>\n    alert('Hello, world');\n  </script>\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n由`<script>...</script>`包含的代码就是JavaScript代码，它将直接被浏览器执行。\n\n### 如何运行JavaScirpt\n\n先创建一个`helloworid.html`文件，把代码\b复制到文件中，保存，用浏览器打开，就能看到一个\b`Hello，world`弹窗效果啦。\n**恭喜你，编程的第一步就从此开始，走向\b\b人生巅峰，谱写你的辉煌传奇！**\n\n## 二、基础\n\n### 基础语法\n\n每一个语句以`;`结束，语句块`{...}`,但JavaScript并不强制要求在每个语句的结尾加`;`，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上`;`\n**让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致**\n\n### 注释\n\n以`//`开头直到行末的字符被视为行注释，注释是给开发人员看的，JavaScript引擎会自动忽略：\n\n```JavaScript\n// 这是一行注释\nalert('hello'); // 这也是注释\n```\n\n块注释`/*...*/`把多行字符包裹起来，把一大“块”视为一个注释\n\n```JavaScript\n/* 从这里开始是块注释\n仍然是注释\n仍然是注释\n注释结束 */\n```\n\n### 数据类型\n\n> **值类型**(基础类型)：字符串(`String`)、数字(`Number`)、布尔(`Boolean`)、对空(`Null`)、未定义(`Undefined`)、`Symbol`。\n**引用数据类型**：对象(`Object`)、数组(`Array`)、函数(`Function`)。\n\n*注：`Symbol` 是 `ES6` 引入了一种新的原始数据类型，表示独一无二的值。*\n\n**`typeof`运算符** 可以返回一个值得数据类型\n\n> typeof 运算符\ninstanceof 运算符\nObject.prototype.toString 方法\n\n```JavaScript\ntypeof 123 // \"number\"\ntypeof '123' // \"string\"\ntypeof false // \"boolean\"\nfunction f() {}\ntypeof f // \"function\"\ntypeof undefined // \"undefined\"\n\n// instanceof\nvar o = {};\nvar a = [];\no instanceof Array // false\na instanceof Array // true\n```\n\n#### \b字符串(String)\n\n可以使用`双引号`或`单引号`，字符串中可以使用引号，只要不匹配包围字符串的引号即可\n\n```JavaScript\n\"I'm OK\";\n```\n\n字符串内部既包含`'`又包含`\"`,可以用转义字符`\\`来标识\n\n```JavaScript\n'I\\'m \\\"OK\\\"!';\n```\n\n##### 转义字符`\\`\n\n| 代码 | 输出 |\n| ------ | ------ |\n| `\\n` | 换行 |\n| `\\r` | 回车 |\n| `\\t` | 制表符 |\n| `\\b` | 退格符 |\n| `\\f` | 换页符 |\n| `\\\\` | 反斜杠`\\` |\n| `\\'` | 单引号 |\n| `\\\"` | 双引号 |\n\nASCII字符可以以`\\x##`形式的十六进制表示，例如：\n\n```JavaScript\n'\\x41'; // 完全等同于 'A'\n```\n\n`\\u####`表示一个Unicode字符\n\n```JavaScript\n'\\u4e2d\\u6587'; // 完全等同于 '中文'\n```\n\n##### 多行字符串\n\n每行结尾用`\\n`，ES6标准新增，反引号表示\n\n```JavaScript\n`这是一个\n多行\n字符串`;\n```\n\n##### 模板字符串\n\n多个字符串连接起来，可以用`+`号连接\n\nES6新增了一种模板字符串，用反斜杠表示，字符串里的变量`${name}`表示，自动替换字符串中的变量：\n\n```JavaScript\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\n```\n\n##### 操作字符串\n\n获取字符串某个指定位置的字符，索引号从0开始\n\n```JavaScript\nvar s = 'Hello, world!';\n\ns[0]; // 'H'\ns[6]; // ' '\ns[7]; // 'w'\ns[12]; // '!'\ns[13]; // undefined 超出范围的索引不会报错，但一律返回undefined\n```\n\n**注意**：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。\n\n##### {% post_link js-string-method 字符串属性和方法 %}\n\n#### 数字(Number)\n\n只要一种数据类型，不区分整数和浮点数\n\n`Infinity` - 无穷大\n\n`NaN` - 非数字值\n\n`Number`基本运算\n\n```JavaScript\n1 + 2;    // 3\n3 - 2;    // 1\n1 * 2;    // 2\n3 / 2;    // 1.5\n\n// % 求余\n10 % 3;    // 1\n10.5 % 3; // 1.5\n\n// Special\n2 / 0;    // Infinity\n0 / 0;    // NaN\n```\n\n#### 布尔(Boolean)\n\n布尔只有2个值：`true`、`false`\n\n基本运算：\n\n- `&&`运算是`与`运算，只有所有都为`true`，`&&`运算结果才是`true`\n\n  ```JavaScript\n  true && true;             // true\n  true && false;            // false\n  false && true && false;   // false\n  ```\n\n- `||`运算是`或`运算，只要其中有一个为`true`，`||`运算结果就是true`\n\n  ```JavaScript\n  false || false;           // false\n  true || false;            // true\n  false || true || false;   // true\n  ```\n\n- `!`运算是`非`运算，它是一个单目运算符，把`true`变成`false`，`false`变成`true`\n\n  ```JavaScript\n  ! true;       // 结果为false\n  ! false;      // 结果为true\n  ! (2 > 5);    // 结果为true\n  ```\n\n- 比较运算符 `>` `<` `>=` `<=` `==`\n\n  *布尔值经常用在条件判断中*\n\n  相等运算符 `===` `!==` `==` `!=`\n\n  **`==`：会自动转换数据类型再比较，在一些情况下会得到诡异的结果\n  `===`：不会自动转换数据类型，如果数据类型不一致返回`false`**\n\n  例如：\n  `NaN`这个特殊的Number与所有其他值都不相等，包括它自己\n\n  ```JavaScript\n  NaN === NaN; // false\n  ```\n\n  唯一能判断`NaN`的方法是通过`isNaN()`函数：\n\n  ```JavaScript\n  isNaN(NaN); // true\n  ```\n\n#### 对空(Null)、未定义(Undefined)\n\n`null` 表示一个“空”的值，它和`0`以及空字符串`''`不同，`0`是一个数值，`''`表示长度为0的字符串，而`null`表示“空”。\n`undefined` 表示变量不含有值(值未定义)。\n\n大多数情况下，我们都应该用`null`。`undefined`仅仅在判断函数参数是否传递的情况下有用\n\n#### 数值(Array)\n\n数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：\n\n```JavaScript\nvar arr = [1, 2, 3.14, 'Hello', null, true];\narr[0]; // 返回索引为0的元素，即1\narr[5]; // 返回索引为5的元素，即true\narr[6]; // 索引超出了范围，返回undefined\n```\n\n数组用`[]`表示，元素之间用`,`分隔\n\n另一种创建数组的方法是通过`Array()`函数实现：\n\n```JavaScript\nnew Array(1, 2, 3); // 创建了数组[1, 2, 3]\n```\n\n#### 对象(Object)\n\nJavaScript的对象是一组由键-值组成的无序集合，例如：\n\n```JavaScript\nvar person = {\n    name: 'Bob',\n    age: 20,\n    tags: ['js', 'web', 'mobile'],\n    city: 'Beijing',\n    hasCar: true,\n    zipcode: null\n};\n```\n\nJavaScript对象的键都是字符串类型，值可以是任意数据类型。\n\n要获取一个对象的属性，我们用对象变量.属性名的方式：\n\n```JavaScript\nperson.name; // 'Bob'\nperson.zipcode; // null\n```\n\n#### 变量\n\n变量名是`大小写英文`、`数字`、`$`和`_`的组合，且不能用数字开头。\n变量名也不能是JavaScript的关键字，如`if`、`while`等\n申明一个变量用`var`语句.\n\n拥有动态类型，即相同的变量可用作不同的类型，例如：\n\n```JavaScript\nvar x;          // x 为undefined  \nvar x = 1;      // 现在 x 为数字\nvar x = \"ht\"    // 现在 x 为字符串\n```\n\n*这种变量本身类型不固定的语言称之为`动态语言`，与之对应的是静态语言。`静态语言`在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言*\n\n##### strict模式\n\n在`strict`模式下运行的JavaScript代码，强制通过`var`申明变量，未使用`var`申明变量就使用的，将导致运行错误。\n\n启用strict模式的方法是在JavaScript代码的第一行写上：\n\n```JavaScript\n'use strict';\n```\n\n这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。\n","source":"_posts/js/javascript.md","raw":"---\ntitle: JavaScript\ndate: 2018-11-07 13:15:56\ntags: JS\ncategories: JavaScript\n---\n\n> JavaScript（解释型编程语言）\n\nJavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。上线时间：1995年\n\n<!-- more -->\n\n## 一、前言\n\n### JavaScript\n\n不例外，我们从`Hello, world`开始\n\n```HTML\n<html>\n<head>\n  <script>\n    alert('Hello, world');\n  </script>\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n由`<script>...</script>`包含的代码就是JavaScript代码，它将直接被浏览器执行。\n\n### 如何运行JavaScirpt\n\n先创建一个`helloworid.html`文件，把代码\b复制到文件中，保存，用浏览器打开，就能看到一个\b`Hello，world`弹窗效果啦。\n**恭喜你，编程的第一步就从此开始，走向\b\b人生巅峰，谱写你的辉煌传奇！**\n\n## 二、基础\n\n### 基础语法\n\n每一个语句以`;`结束，语句块`{...}`,但JavaScript并不强制要求在每个语句的结尾加`;`，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上`;`\n**让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致**\n\n### 注释\n\n以`//`开头直到行末的字符被视为行注释，注释是给开发人员看的，JavaScript引擎会自动忽略：\n\n```JavaScript\n// 这是一行注释\nalert('hello'); // 这也是注释\n```\n\n块注释`/*...*/`把多行字符包裹起来，把一大“块”视为一个注释\n\n```JavaScript\n/* 从这里开始是块注释\n仍然是注释\n仍然是注释\n注释结束 */\n```\n\n### 数据类型\n\n> **值类型**(基础类型)：字符串(`String`)、数字(`Number`)、布尔(`Boolean`)、对空(`Null`)、未定义(`Undefined`)、`Symbol`。\n**引用数据类型**：对象(`Object`)、数组(`Array`)、函数(`Function`)。\n\n*注：`Symbol` 是 `ES6` 引入了一种新的原始数据类型，表示独一无二的值。*\n\n**`typeof`运算符** 可以返回一个值得数据类型\n\n> typeof 运算符\ninstanceof 运算符\nObject.prototype.toString 方法\n\n```JavaScript\ntypeof 123 // \"number\"\ntypeof '123' // \"string\"\ntypeof false // \"boolean\"\nfunction f() {}\ntypeof f // \"function\"\ntypeof undefined // \"undefined\"\n\n// instanceof\nvar o = {};\nvar a = [];\no instanceof Array // false\na instanceof Array // true\n```\n\n#### \b字符串(String)\n\n可以使用`双引号`或`单引号`，字符串中可以使用引号，只要不匹配包围字符串的引号即可\n\n```JavaScript\n\"I'm OK\";\n```\n\n字符串内部既包含`'`又包含`\"`,可以用转义字符`\\`来标识\n\n```JavaScript\n'I\\'m \\\"OK\\\"!';\n```\n\n##### 转义字符`\\`\n\n| 代码 | 输出 |\n| ------ | ------ |\n| `\\n` | 换行 |\n| `\\r` | 回车 |\n| `\\t` | 制表符 |\n| `\\b` | 退格符 |\n| `\\f` | 换页符 |\n| `\\\\` | 反斜杠`\\` |\n| `\\'` | 单引号 |\n| `\\\"` | 双引号 |\n\nASCII字符可以以`\\x##`形式的十六进制表示，例如：\n\n```JavaScript\n'\\x41'; // 完全等同于 'A'\n```\n\n`\\u####`表示一个Unicode字符\n\n```JavaScript\n'\\u4e2d\\u6587'; // 完全等同于 '中文'\n```\n\n##### 多行字符串\n\n每行结尾用`\\n`，ES6标准新增，反引号表示\n\n```JavaScript\n`这是一个\n多行\n字符串`;\n```\n\n##### 模板字符串\n\n多个字符串连接起来，可以用`+`号连接\n\nES6新增了一种模板字符串，用反斜杠表示，字符串里的变量`${name}`表示，自动替换字符串中的变量：\n\n```JavaScript\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\n```\n\n##### 操作字符串\n\n获取字符串某个指定位置的字符，索引号从0开始\n\n```JavaScript\nvar s = 'Hello, world!';\n\ns[0]; // 'H'\ns[6]; // ' '\ns[7]; // 'w'\ns[12]; // '!'\ns[13]; // undefined 超出范围的索引不会报错，但一律返回undefined\n```\n\n**注意**：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。\n\n##### {% post_link js-string-method 字符串属性和方法 %}\n\n#### 数字(Number)\n\n只要一种数据类型，不区分整数和浮点数\n\n`Infinity` - 无穷大\n\n`NaN` - 非数字值\n\n`Number`基本运算\n\n```JavaScript\n1 + 2;    // 3\n3 - 2;    // 1\n1 * 2;    // 2\n3 / 2;    // 1.5\n\n// % 求余\n10 % 3;    // 1\n10.5 % 3; // 1.5\n\n// Special\n2 / 0;    // Infinity\n0 / 0;    // NaN\n```\n\n#### 布尔(Boolean)\n\n布尔只有2个值：`true`、`false`\n\n基本运算：\n\n- `&&`运算是`与`运算，只有所有都为`true`，`&&`运算结果才是`true`\n\n  ```JavaScript\n  true && true;             // true\n  true && false;            // false\n  false && true && false;   // false\n  ```\n\n- `||`运算是`或`运算，只要其中有一个为`true`，`||`运算结果就是true`\n\n  ```JavaScript\n  false || false;           // false\n  true || false;            // true\n  false || true || false;   // true\n  ```\n\n- `!`运算是`非`运算，它是一个单目运算符，把`true`变成`false`，`false`变成`true`\n\n  ```JavaScript\n  ! true;       // 结果为false\n  ! false;      // 结果为true\n  ! (2 > 5);    // 结果为true\n  ```\n\n- 比较运算符 `>` `<` `>=` `<=` `==`\n\n  *布尔值经常用在条件判断中*\n\n  相等运算符 `===` `!==` `==` `!=`\n\n  **`==`：会自动转换数据类型再比较，在一些情况下会得到诡异的结果\n  `===`：不会自动转换数据类型，如果数据类型不一致返回`false`**\n\n  例如：\n  `NaN`这个特殊的Number与所有其他值都不相等，包括它自己\n\n  ```JavaScript\n  NaN === NaN; // false\n  ```\n\n  唯一能判断`NaN`的方法是通过`isNaN()`函数：\n\n  ```JavaScript\n  isNaN(NaN); // true\n  ```\n\n#### 对空(Null)、未定义(Undefined)\n\n`null` 表示一个“空”的值，它和`0`以及空字符串`''`不同，`0`是一个数值，`''`表示长度为0的字符串，而`null`表示“空”。\n`undefined` 表示变量不含有值(值未定义)。\n\n大多数情况下，我们都应该用`null`。`undefined`仅仅在判断函数参数是否传递的情况下有用\n\n#### 数值(Array)\n\n数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：\n\n```JavaScript\nvar arr = [1, 2, 3.14, 'Hello', null, true];\narr[0]; // 返回索引为0的元素，即1\narr[5]; // 返回索引为5的元素，即true\narr[6]; // 索引超出了范围，返回undefined\n```\n\n数组用`[]`表示，元素之间用`,`分隔\n\n另一种创建数组的方法是通过`Array()`函数实现：\n\n```JavaScript\nnew Array(1, 2, 3); // 创建了数组[1, 2, 3]\n```\n\n#### 对象(Object)\n\nJavaScript的对象是一组由键-值组成的无序集合，例如：\n\n```JavaScript\nvar person = {\n    name: 'Bob',\n    age: 20,\n    tags: ['js', 'web', 'mobile'],\n    city: 'Beijing',\n    hasCar: true,\n    zipcode: null\n};\n```\n\nJavaScript对象的键都是字符串类型，值可以是任意数据类型。\n\n要获取一个对象的属性，我们用对象变量.属性名的方式：\n\n```JavaScript\nperson.name; // 'Bob'\nperson.zipcode; // null\n```\n\n#### 变量\n\n变量名是`大小写英文`、`数字`、`$`和`_`的组合，且不能用数字开头。\n变量名也不能是JavaScript的关键字，如`if`、`while`等\n申明一个变量用`var`语句.\n\n拥有动态类型，即相同的变量可用作不同的类型，例如：\n\n```JavaScript\nvar x;          // x 为undefined  \nvar x = 1;      // 现在 x 为数字\nvar x = \"ht\"    // 现在 x 为字符串\n```\n\n*这种变量本身类型不固定的语言称之为`动态语言`，与之对应的是静态语言。`静态语言`在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言*\n\n##### strict模式\n\n在`strict`模式下运行的JavaScript代码，强制通过`var`申明变量，未使用`var`申明变量就使用的，将导致运行错误。\n\n启用strict模式的方法是在JavaScript代码的第一行写上：\n\n```JavaScript\n'use strict';\n```\n\n这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。\n","slug":"js/javascript","published":1,"updated":"2021-06-22T07:14:19.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zn001qj036d5zdcn39","content":"<blockquote>\n<p>JavaScript（解释型编程语言）</p>\n</blockquote>\n<p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。上线时间：1995年</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>不例外，我们从<code>Hello, world</code>开始</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&#x27;Hello, world&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>\n<h3 id=\"如何运行JavaScirpt\"><a href=\"#如何运行JavaScirpt\" class=\"headerlink\" title=\"如何运行JavaScirpt\"></a>如何运行JavaScirpt</h3><p>先创建一个<code>helloworid.html</code>文件，把代码\b复制到文件中，保存，用浏览器打开，就能看到一个\b<code>Hello，world</code>弹窗效果啦。<br><strong>恭喜你，编程的第一步就从此开始，走向\b\b人生巅峰，谱写你的辉煌传奇！</strong></p>\n<h2 id=\"二、基础\"><a href=\"#二、基础\" class=\"headerlink\" title=\"二、基础\"></a>二、基础</h2><h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><p>每一个语句以<code>;</code>结束，语句块<code>&#123;...&#125;</code>,但JavaScript并不强制要求在每个语句的结尾加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上<code>;</code><br><strong>让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致</strong></p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>以<code>//</code>开头直到行末的字符被视为行注释，注释是给开发人员看的，JavaScript引擎会自动忽略：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一行注释</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;hello&#x27;</span>); <span class=\"comment\">// 这也是注释</span></span><br></pre></td></tr></table></figure>\n\n<p>块注释<code>/*...*/</code>把多行字符包裹起来，把一大“块”视为一个注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 从这里开始是块注释</span></span><br><span class=\"line\"><span class=\"comment\">仍然是注释</span></span><br><span class=\"line\"><span class=\"comment\">仍然是注释</span></span><br><span class=\"line\"><span class=\"comment\">注释结束 */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><blockquote>\n<p><strong>值类型</strong>(基础类型)：字符串(<code>String</code>)、数字(<code>Number</code>)、布尔(<code>Boolean</code>)、对空(<code>Null</code>)、未定义(<code>Undefined</code>)、<code>Symbol</code>。<br><strong>引用数据类型</strong>：对象(<code>Object</code>)、数组(<code>Array</code>)、函数(<code>Function</code>)。</p>\n</blockquote>\n<p><em>注：<code>Symbol</code> 是 <code>ES6</code> 引入了一种新的原始数据类型，表示独一无二的值。</em></p>\n<p><strong><code>typeof</code>运算符</strong> 可以返回一个值得数据类型</p>\n<blockquote>\n<p>typeof 运算符<br>instanceof 运算符<br>Object.prototype.toString 方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span> <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">false</span> <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> f <span class=\"comment\">// &quot;function&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">o <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串-String\"><a href=\"#字符串-String\" class=\"headerlink\" title=\"\b字符串(String)\"></a>\b字符串(String)</h4><p>可以使用<code>双引号</code>或<code>单引号</code>，字符串中可以使用引号，只要不匹配包围字符串的引号即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;I&#x27;m OK&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>,可以用转义字符<code>\\</code>来标识</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I\\&#x27;m \\&quot;OK\\&quot;!&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\\\"></a>转义字符<code>\\</code></h5><table>\n<thead>\n<tr>\n<th>代码</th>\n<th>输出</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格符</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>反斜杠<code>\\</code></td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>单引号</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>双引号</td>\n</tr>\n</tbody></table>\n<p>ASCII字符可以以<code>\\x##</code>形式的十六进制表示，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;\\x41&#x27;</span>; <span class=\"comment\">// 完全等同于 &#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>\\u####</code>表示一个Unicode字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;\\u4e2d\\u6587&#x27;</span>; <span class=\"comment\">// 完全等同于 &#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h5><p>每行结尾用<code>\\n</code>，ES6标准新增，反引号表示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`这是一个</span></span><br><span class=\"line\"><span class=\"string\">多行</span></span><br><span class=\"line\"><span class=\"string\">字符串`</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h5><p>多个字符串连接起来，可以用<code>+</code>号连接</p>\n<p>ES6新增了一种模板字符串，用反斜杠表示，字符串里的变量<code>$&#123;name&#125;</code>表示，自动替换字符串中的变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;小明&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`你好, <span class=\"subst\">$&#123;name&#125;</span>, 你今年<span class=\"subst\">$&#123;age&#125;</span>岁了!`</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a>操作字符串</h5><p>获取字符串某个指定位置的字符，索引号从0开始</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world!&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s[<span class=\"number\">0</span>]; <span class=\"comment\">// &#x27;H&#x27;</span></span><br><span class=\"line\">s[<span class=\"number\">6</span>]; <span class=\"comment\">// &#x27; &#x27;</span></span><br><span class=\"line\">s[<span class=\"number\">7</span>]; <span class=\"comment\">// &#x27;w&#x27;</span></span><br><span class=\"line\">s[<span class=\"number\">12</span>]; <span class=\"comment\">// &#x27;!&#x27;</span></span><br><span class=\"line\">s[<span class=\"number\">13</span>]; <span class=\"comment\">// undefined 超出范围的索引不会报错，但一律返回undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a href=\"#\">Post not found: js-string-method 字符串属性和方法</a></h5><h4 id=\"数字-Number\"><a href=\"#数字-Number\" class=\"headerlink\" title=\"数字(Number)\"></a>数字(Number)</h4><p>只要一种数据类型，不区分整数和浮点数</p>\n<p><code>Infinity</code> - 无穷大</p>\n<p><code>NaN</code> - 非数字值</p>\n<p><code>Number</code>基本运算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span>;    <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3</span> - <span class=\"number\">2</span>;    <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">2</span>;    <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">3</span> / <span class=\"number\">2</span>;    <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// % 求余</span></span><br><span class=\"line\"><span class=\"number\">10</span> % <span class=\"number\">3</span>;    <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">10.5</span> % <span class=\"number\">3</span>; <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Special</span></span><br><span class=\"line\"><span class=\"number\">2</span> / <span class=\"number\">0</span>;    <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"number\">0</span> / <span class=\"number\">0</span>;    <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"布尔-Boolean\"><a href=\"#布尔-Boolean\" class=\"headerlink\" title=\"布尔(Boolean)\"></a>布尔(Boolean)</h4><p>布尔只有2个值：<code>true</code>、<code>false</code></p>\n<p>基本运算：</p>\n<ul>\n<li><p><code>&amp;&amp;</code>运算是<code>与</code>运算，只有所有都为<code>true</code>，<code>&amp;&amp;</code>运算结果才是<code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">true</span>;             <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">false</span>;            <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> &amp;&amp; <span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">false</span>;   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>||</code>运算是<code>或</code>运算，只要其中有一个为<code>true</code>，<code>||</code>运算结果就是true`</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"literal\">false</span>;           <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"literal\">false</span>;            <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"literal\">true</span> || <span class=\"literal\">false</span>;   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>!</code>运算是<code>非</code>运算，它是一个单目运算符，把<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! <span class=\"literal\">true</span>;       <span class=\"comment\">// 结果为false</span></span><br><span class=\"line\">! <span class=\"literal\">false</span>;      <span class=\"comment\">// 结果为true</span></span><br><span class=\"line\">! (<span class=\"number\">2</span> &gt; <span class=\"number\">5</span>);    <span class=\"comment\">// 结果为true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>比较运算符 <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>==</code></p>\n<p><em>布尔值经常用在条件判断中</em></p>\n<p>相等运算符 <code>===</code> <code>!==</code> <code>==</code> <code>!=</code></p>\n<p><strong><code>==</code>：会自动转换数据类型再比较，在一些情况下会得到诡异的结果<br><code>===</code>：不会自动转换数据类型，如果数据类型不一致返回<code>false</code></strong></p>\n<p>例如：<br><code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"对空-Null-、未定义-Undefined\"><a href=\"#对空-Null-、未定义-Undefined\" class=\"headerlink\" title=\"对空(Null)、未定义(Undefined)\"></a>对空(Null)、未定义(Undefined)</h4><p><code>null</code> 表示一个“空”的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为0的字符串，而<code>null</code>表示“空”。<br><code>undefined</code> 表示变量不含有值(值未定义)。</p>\n<p>大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用</p>\n<h4 id=\"数值-Array\"><a href=\"#数值-Array\" class=\"headerlink\" title=\"数值(Array)\"></a>数值(Array)</h4><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3.14</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\">arr[<span class=\"number\">0</span>]; <span class=\"comment\">// 返回索引为0的元素，即1</span></span><br><span class=\"line\">arr[<span class=\"number\">5</span>]; <span class=\"comment\">// 返回索引为5的元素，即true</span></span><br><span class=\"line\">arr[<span class=\"number\">6</span>]; <span class=\"comment\">// 索引超出了范围，返回undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>数组用<code>[]</code>表示，元素之间用<code>,</code>分隔</p>\n<p>另一种创建数组的方法是通过<code>Array()</code>函数实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 创建了数组[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h4><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">tags</span>: [<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"string\">&#x27;web&#x27;</span>, <span class=\"string\">&#x27;mobile&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">&#x27;Beijing&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">hasCar</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">zipcode</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。</p>\n<p>要获取一个对象的属性，我们用对象变量.属性名的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.name; <span class=\"comment\">// &#x27;Bob&#x27;</span></span><br><span class=\"line\">person.zipcode; <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>变量名是<code>大小写英文</code>、<code>数字</code>、<code>$</code>和<code>_</code>的组合，且不能用数字开头。<br>变量名也不能是JavaScript的关键字，如<code>if</code>、<code>while</code>等<br>申明一个变量用<code>var</code>语句.</p>\n<p>拥有动态类型，即相同的变量可用作不同的类型，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;          <span class=\"comment\">// x 为undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;      <span class=\"comment\">// 现在 x 为数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">&quot;ht&quot;</span>    <span class=\"comment\">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这种变量本身类型不固定的语言称之为<code>动态语言</code>，与之对应的是静态语言。<code>静态语言</code>在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言</em></p>\n<h5 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a>strict模式</h5><p>在<code>strict</code>模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。</p>\n<p>启用strict模式的方法是在JavaScript代码的第一行写上：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>JavaScript（解释型编程语言）</p>\n</blockquote>\n<p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。上线时间：1995年</p>","more":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>不例外，我们从<code>Hello, world</code>开始</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&#x27;Hello, world&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>\n<h3 id=\"如何运行JavaScirpt\"><a href=\"#如何运行JavaScirpt\" class=\"headerlink\" title=\"如何运行JavaScirpt\"></a>如何运行JavaScirpt</h3><p>先创建一个<code>helloworid.html</code>文件，把代码\b复制到文件中，保存，用浏览器打开，就能看到一个\b<code>Hello，world</code>弹窗效果啦。<br><strong>恭喜你，编程的第一步就从此开始，走向\b\b人生巅峰，谱写你的辉煌传奇！</strong></p>\n<h2 id=\"二、基础\"><a href=\"#二、基础\" class=\"headerlink\" title=\"二、基础\"></a>二、基础</h2><h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><p>每一个语句以<code>;</code>结束，语句块<code>&#123;...&#125;</code>,但JavaScript并不强制要求在每个语句的结尾加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上<code>;</code><br><strong>让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致</strong></p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>以<code>//</code>开头直到行末的字符被视为行注释，注释是给开发人员看的，JavaScript引擎会自动忽略：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一行注释</span></span><br><span class=\"line\">alert(<span class=\"string\">&#x27;hello&#x27;</span>); <span class=\"comment\">// 这也是注释</span></span><br></pre></td></tr></table></figure>\n\n<p>块注释<code>/*...*/</code>把多行字符包裹起来，把一大“块”视为一个注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 从这里开始是块注释</span></span><br><span class=\"line\"><span class=\"comment\">仍然是注释</span></span><br><span class=\"line\"><span class=\"comment\">仍然是注释</span></span><br><span class=\"line\"><span class=\"comment\">注释结束 */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><blockquote>\n<p><strong>值类型</strong>(基础类型)：字符串(<code>String</code>)、数字(<code>Number</code>)、布尔(<code>Boolean</code>)、对空(<code>Null</code>)、未定义(<code>Undefined</code>)、<code>Symbol</code>。<br><strong>引用数据类型</strong>：对象(<code>Object</code>)、数组(<code>Array</code>)、函数(<code>Function</code>)。</p>\n</blockquote>\n<p><em>注：<code>Symbol</code> 是 <code>ES6</code> 引入了一种新的原始数据类型，表示独一无二的值。</em></p>\n<p><strong><code>typeof</code>运算符</strong> 可以返回一个值得数据类型</p>\n<blockquote>\n<p>typeof 运算符<br>instanceof 运算符<br>Object.prototype.toString 方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span> <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">false</span> <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> f <span class=\"comment\">// &quot;function&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">o <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串-String\"><a href=\"#字符串-String\" class=\"headerlink\" title=\"\b字符串(String)\"></a>\b字符串(String)</h4><p>可以使用<code>双引号</code>或<code>单引号</code>，字符串中可以使用引号，只要不匹配包围字符串的引号即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;I&#x27;m OK&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>,可以用转义字符<code>\\</code>来标识</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;I\\&#x27;m \\&quot;OK\\&quot;!&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\\\"></a>转义字符<code>\\</code></h5><table>\n<thead>\n<tr>\n<th>代码</th>\n<th>输出</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格符</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>反斜杠<code>\\</code></td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>单引号</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>双引号</td>\n</tr>\n</tbody></table>\n<p>ASCII字符可以以<code>\\x##</code>形式的十六进制表示，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;\\x41&#x27;</span>; <span class=\"comment\">// 完全等同于 &#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>\\u####</code>表示一个Unicode字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;\\u4e2d\\u6587&#x27;</span>; <span class=\"comment\">// 完全等同于 &#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h5><p>每行结尾用<code>\\n</code>，ES6标准新增，反引号表示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`这是一个</span></span><br><span class=\"line\"><span class=\"string\">多行</span></span><br><span class=\"line\"><span class=\"string\">字符串`</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h5><p>多个字符串连接起来，可以用<code>+</code>号连接</p>\n<p>ES6新增了一种模板字符串，用反斜杠表示，字符串里的变量<code>$&#123;name&#125;</code>表示，自动替换字符串中的变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;小明&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`你好, <span class=\"subst\">$&#123;name&#125;</span>, 你今年<span class=\"subst\">$&#123;age&#125;</span>岁了!`</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a>操作字符串</h5><p>获取字符串某个指定位置的字符，索引号从0开始</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world!&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s[<span class=\"number\">0</span>]; <span class=\"comment\">// &#x27;H&#x27;</span></span><br><span class=\"line\">s[<span class=\"number\">6</span>]; <span class=\"comment\">// &#x27; &#x27;</span></span><br><span class=\"line\">s[<span class=\"number\">7</span>]; <span class=\"comment\">// &#x27;w&#x27;</span></span><br><span class=\"line\">s[<span class=\"number\">12</span>]; <span class=\"comment\">// &#x27;!&#x27;</span></span><br><span class=\"line\">s[<span class=\"number\">13</span>]; <span class=\"comment\">// undefined 超出范围的索引不会报错，但一律返回undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a href=\"#\">Post not found: js-string-method 字符串属性和方法</a></h5><h4 id=\"数字-Number\"><a href=\"#数字-Number\" class=\"headerlink\" title=\"数字(Number)\"></a>数字(Number)</h4><p>只要一种数据类型，不区分整数和浮点数</p>\n<p><code>Infinity</code> - 无穷大</p>\n<p><code>NaN</code> - 非数字值</p>\n<p><code>Number</code>基本运算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span>;    <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"number\">3</span> - <span class=\"number\">2</span>;    <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">2</span>;    <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">3</span> / <span class=\"number\">2</span>;    <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// % 求余</span></span><br><span class=\"line\"><span class=\"number\">10</span> % <span class=\"number\">3</span>;    <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">10.5</span> % <span class=\"number\">3</span>; <span class=\"comment\">// 1.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Special</span></span><br><span class=\"line\"><span class=\"number\">2</span> / <span class=\"number\">0</span>;    <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"number\">0</span> / <span class=\"number\">0</span>;    <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"布尔-Boolean\"><a href=\"#布尔-Boolean\" class=\"headerlink\" title=\"布尔(Boolean)\"></a>布尔(Boolean)</h4><p>布尔只有2个值：<code>true</code>、<code>false</code></p>\n<p>基本运算：</p>\n<ul>\n<li><p><code>&amp;&amp;</code>运算是<code>与</code>运算，只有所有都为<code>true</code>，<code>&amp;&amp;</code>运算结果才是<code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">true</span>;             <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">false</span>;            <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">false</span> &amp;&amp; <span class=\"literal\">true</span> &amp;&amp; <span class=\"literal\">false</span>;   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>||</code>运算是<code>或</code>运算，只要其中有一个为<code>true</code>，<code>||</code>运算结果就是true`</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"literal\">false</span>;           <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"literal\">false</span>;            <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> || <span class=\"literal\">true</span> || <span class=\"literal\">false</span>;   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>!</code>运算是<code>非</code>运算，它是一个单目运算符，把<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! <span class=\"literal\">true</span>;       <span class=\"comment\">// 结果为false</span></span><br><span class=\"line\">! <span class=\"literal\">false</span>;      <span class=\"comment\">// 结果为true</span></span><br><span class=\"line\">! (<span class=\"number\">2</span> &gt; <span class=\"number\">5</span>);    <span class=\"comment\">// 结果为true</span></span><br></pre></td></tr></table></figure></li>\n<li><p>比较运算符 <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>==</code></p>\n<p><em>布尔值经常用在条件判断中</em></p>\n<p>相等运算符 <code>===</code> <code>!==</code> <code>==</code> <code>!=</code></p>\n<p><strong><code>==</code>：会自动转换数据类型再比较，在一些情况下会得到诡异的结果<br><code>===</code>：不会自动转换数据类型，如果数据类型不一致返回<code>false</code></strong></p>\n<p>例如：<br><code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"对空-Null-、未定义-Undefined\"><a href=\"#对空-Null-、未定义-Undefined\" class=\"headerlink\" title=\"对空(Null)、未定义(Undefined)\"></a>对空(Null)、未定义(Undefined)</h4><p><code>null</code> 表示一个“空”的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为0的字符串，而<code>null</code>表示“空”。<br><code>undefined</code> 表示变量不含有值(值未定义)。</p>\n<p>大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用</p>\n<h4 id=\"数值-Array\"><a href=\"#数值-Array\" class=\"headerlink\" title=\"数值(Array)\"></a>数值(Array)</h4><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3.14</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\">arr[<span class=\"number\">0</span>]; <span class=\"comment\">// 返回索引为0的元素，即1</span></span><br><span class=\"line\">arr[<span class=\"number\">5</span>]; <span class=\"comment\">// 返回索引为5的元素，即true</span></span><br><span class=\"line\">arr[<span class=\"number\">6</span>]; <span class=\"comment\">// 索引超出了范围，返回undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>数组用<code>[]</code>表示，元素之间用<code>,</code>分隔</p>\n<p>另一种创建数组的方法是通过<code>Array()</code>函数实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 创建了数组[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h4><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">tags</span>: [<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"string\">&#x27;web&#x27;</span>, <span class=\"string\">&#x27;mobile&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">&#x27;Beijing&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">hasCar</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">zipcode</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。</p>\n<p>要获取一个对象的属性，我们用对象变量.属性名的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.name; <span class=\"comment\">// &#x27;Bob&#x27;</span></span><br><span class=\"line\">person.zipcode; <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>变量名是<code>大小写英文</code>、<code>数字</code>、<code>$</code>和<code>_</code>的组合，且不能用数字开头。<br>变量名也不能是JavaScript的关键字，如<code>if</code>、<code>while</code>等<br>申明一个变量用<code>var</code>语句.</p>\n<p>拥有动态类型，即相同的变量可用作不同的类型，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x;          <span class=\"comment\">// x 为undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;      <span class=\"comment\">// 现在 x 为数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">&quot;ht&quot;</span>    <span class=\"comment\">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这种变量本身类型不固定的语言称之为<code>动态语言</code>，与之对应的是静态语言。<code>静态语言</code>在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言</em></p>\n<h5 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a>strict模式</h5><p>在<code>strict</code>模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。</p>\n<p>启用strict模式的方法是在JavaScript代码的第一行写上：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p>"},{"title":"字符串属性和方法","date":"2019-01-09T16:38:15.000Z","_content":"\n> 字符串属性和方法\n\n<!-- more -->\n\n## 属性\n\n### `constructor` 返回创建字符串属性的函数\n\n  ```JavaScript\n  var s = 'Hello, world!';\n  s.constructor;   // function String() { [native code] }\n  ```\n\n### `prototype` 允许您向对象添加属性和方法\n\n  ```JavaScript\n  var s = new String('Jion');\n  s.prototype.name = 'world'; // 添加属性name\n  s.name;   // world\n  s.prototype.myFunc = function() {}  // 添加方法\n  s.myFunc();\n  ```\n\n### `length` 返回字符串的长度(字符数)\n\n  ```JavaScript\n  var s = 'Hello, world!';\n  s.length;  // 13\n  ```\n\n## 方法\n\n### `charAt()` 返回指定索引位置的字符\n\n  > string.charCodeAt(index)\n\n  ```JavaScript\n  var s = 'Hello, world';\n  s.charAt(1);  // e 索引从0开始\n  s.charAt(s.length-1);  // d 最后一个字符串\n  ```\n\n### `charCodeAt()` 返回指定索引位置字符的`Unicode`值\n  \n  > string.charCodeAt(index)\n\n  ```JavaScript\n  var s = 'Hello, world';\n  s.charCodeAt(0);  // 72\n  ```\n\n### `fromCharCode()` 将`Unicode`转换为字符串\n\n  > String.fromCharCode(n1, n2, ..., nX)\n\n  ```JavaScript\n  var n = String.fromCharCode(72, 69, 76, 76, 79);  // HELLO\n  ```\n\n### `indexOf()` 返回字符串中检索指定字符第一次出现的位置\n\n  > string.indexOf(searchvalue, start)\n\n  ```JavaScript\n  var s = 'Hello world, welcome to the JavaScript!';\n  var n = s.indexOf('l');  // 2\n  ```\n\n### `lastIndexOf()` 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\n\n  > string.lastIndexOf(searchvalue, start)\n\n  ```JavaScript\n  var s = 'Hello world';\n  var n = s.lastIndexOf('l');  // 8 索引从后(0)到前\n  ```\n\n### `slice()` 返回两个指定\b索引区间的字符\n\n  > string.slice(start, end)\n\n  提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。\n\n  ```javascript\n  var s = 'Hello world';\n  s.slice(0, 5);  // Hello 从索引0开始到5（不包括5）\n  s.slice(6);  // world 从索引6开始到结束\n  s.slice(-1);  // d 最后一个字符\n  ```\n\n### `substring()` 返回两个指定的索引区间的字符\n\n  > string.substring(from, to)\n\n  ```javascript\n  var s = 'Hello world';\n  s.substring(0, 5);  // Hello 从索引0开始到5（不包括5）\n  s.substring(6);  // world 从索引6开始到结束\n  ```\n\n### `substr()` 返回从索引开始指定长度的字符\n\n  > string.substr(start, length)\n\n  ```javascript\n  var s = 'Hello world';\n  s.substr(1, 2);  // el 从索引1开始2个长度\n  s.substr(6);  // lo world  从索引6开始到结束\n  ```\n\n**\b思考**：`slice()`、`substring()`、`substr()`区别\n\n`substring()`以两个参数中较小一个作为起始位置，较大的参数作为结束位置\n当参数为负数时，\n`slice()`将它字符串的长度与对应的负数相加，结果作为参数\n`substring()`将负参数都直接转换为0\n`substr()`将第一个参数与字符串长度相加后的结果作为第一个参数\n\n```javascript\nvar s = 'hello world';\n\n// substring\ns.substring(2, 8);  // llo wo\ns.substring(8, 2);  // llo wo\n\n// 负数\ns.slice(-3);      //  \ns.substring(-3);  // hello world\ns.substr(-3);     // rld\n\ns.slice(3, -4);   // lo w (3, 7)\ns.substring(3, -4); // hel (0, 3)\ns.substr(3, -4);    // 空字符串 索引为3长度为0\n```\n\n**注意:** IE对substr接收负值的处理有错，它会返回原始字符串。\n\n### `match()` 找到一个或多个正则表达式的匹配\n\n  如果没有找到任何匹配的文本，`match()`将返回`null`。否则，它将返回一个`array`，其中存放了与它找到的匹配文本有关的信息\n  > string.match(regexp)\n\n  ```javascript\n  var str = \"The rain in SPAIN stays mainly in the plain\";\n  var n = str.match(/ain/g);  // ain, ain, ain\n\n  // 不区分大小写\n  var m = str.match(/ain/gi);  // ain, AIN, ain, ain\n  ```\n\n### `search()` 检索与正则表达式相匹配的值\n\n  如果没有找到任何匹配的子串，则返回 -1。\n  > string.search(searchvalue)\n\n  ```javascript\n  var str = \"Mr. Blue has a blue house\";\n  var n = str.search(\"blue\");  // 15\n  var m = str.search(/blue/i);  // 4\n  ```\n\n### `toUpperCase()` 把一个字符串全部变为大写\n\n  > string.toUpperCase()\n\n  ```javascript\n  var s = 'Hello world';\n  s.toUpperCase();  // HELLO WORLD\n  ```\n\n### `toLowerCase()` 把一个字符串全部变成小写\n\n  > string.toLowerCase()\n\n  ```javascript\n  var s = 'Hello world';\n  s.toLowerCase();  // hello world\n  ```\n\n### `concat()` 连接两个或多个字符串，返回连接后的字符串\n\n  > string.concat(string1, string2, ..., stringX)\n\n  ```JavaScript\n  var s1 = 'Hello ';\n  var s2 = 'world!';\n  var n = s1.concat(s2);   // Hello world!\n  // 连接多个 , 隔开\n  var s3 = ' How are you!';\n  var m = s1.concat(s2, s3)  // Hello world! How are you!\n  ```\n\n### `replace()` 替换与正则表达式匹配的子串\n\n  注意：`replace()`方法不改变原始字符串。只执行一次替换\n  > string.replace(searchvalue, newvalue)\n\n  ```JavaScript\n  var s = 'hello world, good world'\n  var n = s.replace('world', 'javascript');  // hello javascript, good world\n\n  // 执行一个全局替换 正则表达式\n  var str = \"Mr Blue has a blue house and a blue car\";\n  var m = str.replace(/blue/g,\"red\"); // Mr Blue has a red house and a red car\n  \n  // 执行一个全局替换 忽略大小写\n  var o = str.replace(/blue/gi, \"red\"); // Mr red has a red house and a red car\n  ```\n\n### `split()` 把字符串分割为字符串数组\n\n  注意：`split()`方法不改变原始字符串。\n  如果把空字符串`(\"\")`用作`separator`，那么`stringObject`中的每个字符之间都会被分割.\n\n  > string.split(separator, limit)\n\n  ```javascript\n  var s = 'hello world';\n  s.split(\"\");  // ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\n  s.split(\" \");  // ['hello', 'world']\n  ```\n\n### `trim()` 去除字符串两边的空白\n\n  > string.trim()\n\n  ```javascript\n  var s = ' hello world    ';\n  s.trim();  // hello world\n  ```\n\n### `valueOf()` 返回某个字符串对象的原始值\n\n  > string.valueOf()\n\n  ```javascript\n  var s = 'hello world';\n  s.valueOf();  // hello world\n  ```\n","source":"_posts/js/js-string-method.md","raw":"---\ntitle: 字符串属性和方法\ndate: 2019-01-10 00:38:15\ntags: JS\ncategories: JavaScript\n---\n\n> 字符串属性和方法\n\n<!-- more -->\n\n## 属性\n\n### `constructor` 返回创建字符串属性的函数\n\n  ```JavaScript\n  var s = 'Hello, world!';\n  s.constructor;   // function String() { [native code] }\n  ```\n\n### `prototype` 允许您向对象添加属性和方法\n\n  ```JavaScript\n  var s = new String('Jion');\n  s.prototype.name = 'world'; // 添加属性name\n  s.name;   // world\n  s.prototype.myFunc = function() {}  // 添加方法\n  s.myFunc();\n  ```\n\n### `length` 返回字符串的长度(字符数)\n\n  ```JavaScript\n  var s = 'Hello, world!';\n  s.length;  // 13\n  ```\n\n## 方法\n\n### `charAt()` 返回指定索引位置的字符\n\n  > string.charCodeAt(index)\n\n  ```JavaScript\n  var s = 'Hello, world';\n  s.charAt(1);  // e 索引从0开始\n  s.charAt(s.length-1);  // d 最后一个字符串\n  ```\n\n### `charCodeAt()` 返回指定索引位置字符的`Unicode`值\n  \n  > string.charCodeAt(index)\n\n  ```JavaScript\n  var s = 'Hello, world';\n  s.charCodeAt(0);  // 72\n  ```\n\n### `fromCharCode()` 将`Unicode`转换为字符串\n\n  > String.fromCharCode(n1, n2, ..., nX)\n\n  ```JavaScript\n  var n = String.fromCharCode(72, 69, 76, 76, 79);  // HELLO\n  ```\n\n### `indexOf()` 返回字符串中检索指定字符第一次出现的位置\n\n  > string.indexOf(searchvalue, start)\n\n  ```JavaScript\n  var s = 'Hello world, welcome to the JavaScript!';\n  var n = s.indexOf('l');  // 2\n  ```\n\n### `lastIndexOf()` 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\n\n  > string.lastIndexOf(searchvalue, start)\n\n  ```JavaScript\n  var s = 'Hello world';\n  var n = s.lastIndexOf('l');  // 8 索引从后(0)到前\n  ```\n\n### `slice()` 返回两个指定\b索引区间的字符\n\n  > string.slice(start, end)\n\n  提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。\n\n  ```javascript\n  var s = 'Hello world';\n  s.slice(0, 5);  // Hello 从索引0开始到5（不包括5）\n  s.slice(6);  // world 从索引6开始到结束\n  s.slice(-1);  // d 最后一个字符\n  ```\n\n### `substring()` 返回两个指定的索引区间的字符\n\n  > string.substring(from, to)\n\n  ```javascript\n  var s = 'Hello world';\n  s.substring(0, 5);  // Hello 从索引0开始到5（不包括5）\n  s.substring(6);  // world 从索引6开始到结束\n  ```\n\n### `substr()` 返回从索引开始指定长度的字符\n\n  > string.substr(start, length)\n\n  ```javascript\n  var s = 'Hello world';\n  s.substr(1, 2);  // el 从索引1开始2个长度\n  s.substr(6);  // lo world  从索引6开始到结束\n  ```\n\n**\b思考**：`slice()`、`substring()`、`substr()`区别\n\n`substring()`以两个参数中较小一个作为起始位置，较大的参数作为结束位置\n当参数为负数时，\n`slice()`将它字符串的长度与对应的负数相加，结果作为参数\n`substring()`将负参数都直接转换为0\n`substr()`将第一个参数与字符串长度相加后的结果作为第一个参数\n\n```javascript\nvar s = 'hello world';\n\n// substring\ns.substring(2, 8);  // llo wo\ns.substring(8, 2);  // llo wo\n\n// 负数\ns.slice(-3);      //  \ns.substring(-3);  // hello world\ns.substr(-3);     // rld\n\ns.slice(3, -4);   // lo w (3, 7)\ns.substring(3, -4); // hel (0, 3)\ns.substr(3, -4);    // 空字符串 索引为3长度为0\n```\n\n**注意:** IE对substr接收负值的处理有错，它会返回原始字符串。\n\n### `match()` 找到一个或多个正则表达式的匹配\n\n  如果没有找到任何匹配的文本，`match()`将返回`null`。否则，它将返回一个`array`，其中存放了与它找到的匹配文本有关的信息\n  > string.match(regexp)\n\n  ```javascript\n  var str = \"The rain in SPAIN stays mainly in the plain\";\n  var n = str.match(/ain/g);  // ain, ain, ain\n\n  // 不区分大小写\n  var m = str.match(/ain/gi);  // ain, AIN, ain, ain\n  ```\n\n### `search()` 检索与正则表达式相匹配的值\n\n  如果没有找到任何匹配的子串，则返回 -1。\n  > string.search(searchvalue)\n\n  ```javascript\n  var str = \"Mr. Blue has a blue house\";\n  var n = str.search(\"blue\");  // 15\n  var m = str.search(/blue/i);  // 4\n  ```\n\n### `toUpperCase()` 把一个字符串全部变为大写\n\n  > string.toUpperCase()\n\n  ```javascript\n  var s = 'Hello world';\n  s.toUpperCase();  // HELLO WORLD\n  ```\n\n### `toLowerCase()` 把一个字符串全部变成小写\n\n  > string.toLowerCase()\n\n  ```javascript\n  var s = 'Hello world';\n  s.toLowerCase();  // hello world\n  ```\n\n### `concat()` 连接两个或多个字符串，返回连接后的字符串\n\n  > string.concat(string1, string2, ..., stringX)\n\n  ```JavaScript\n  var s1 = 'Hello ';\n  var s2 = 'world!';\n  var n = s1.concat(s2);   // Hello world!\n  // 连接多个 , 隔开\n  var s3 = ' How are you!';\n  var m = s1.concat(s2, s3)  // Hello world! How are you!\n  ```\n\n### `replace()` 替换与正则表达式匹配的子串\n\n  注意：`replace()`方法不改变原始字符串。只执行一次替换\n  > string.replace(searchvalue, newvalue)\n\n  ```JavaScript\n  var s = 'hello world, good world'\n  var n = s.replace('world', 'javascript');  // hello javascript, good world\n\n  // 执行一个全局替换 正则表达式\n  var str = \"Mr Blue has a blue house and a blue car\";\n  var m = str.replace(/blue/g,\"red\"); // Mr Blue has a red house and a red car\n  \n  // 执行一个全局替换 忽略大小写\n  var o = str.replace(/blue/gi, \"red\"); // Mr red has a red house and a red car\n  ```\n\n### `split()` 把字符串分割为字符串数组\n\n  注意：`split()`方法不改变原始字符串。\n  如果把空字符串`(\"\")`用作`separator`，那么`stringObject`中的每个字符之间都会被分割.\n\n  > string.split(separator, limit)\n\n  ```javascript\n  var s = 'hello world';\n  s.split(\"\");  // ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\n  s.split(\" \");  // ['hello', 'world']\n  ```\n\n### `trim()` 去除字符串两边的空白\n\n  > string.trim()\n\n  ```javascript\n  var s = ' hello world    ';\n  s.trim();  // hello world\n  ```\n\n### `valueOf()` 返回某个字符串对象的原始值\n\n  > string.valueOf()\n\n  ```javascript\n  var s = 'hello world';\n  s.valueOf();  // hello world\n  ```\n","slug":"js/js-string-method","published":1,"updated":"2021-06-22T07:14:19.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zo001tj036bxue4fkq","content":"<blockquote>\n<p>字符串属性和方法</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h3 id=\"constructor-返回创建字符串属性的函数\"><a href=\"#constructor-返回创建字符串属性的函数\" class=\"headerlink\" title=\"constructor 返回创建字符串属性的函数\"></a><code>constructor</code> 返回创建字符串属性的函数</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world!&#x27;</span>;</span><br><span class=\"line\">s.constructor;   <span class=\"comment\">// function String() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prototype-允许您向对象添加属性和方法\"><a href=\"#prototype-允许您向对象添加属性和方法\" class=\"headerlink\" title=\"prototype 允许您向对象添加属性和方法\"></a><code>prototype</code> 允许您向对象添加属性和方法</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;Jion&#x27;</span>);</span><br><span class=\"line\">s.prototype.name = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// 添加属性name</span></span><br><span class=\"line\">s.name;   <span class=\"comment\">// world</span></span><br><span class=\"line\">s.prototype.myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;  <span class=\"comment\">// 添加方法</span></span><br><span class=\"line\">s.myFunc();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"length-返回字符串的长度-字符数\"><a href=\"#length-返回字符串的长度-字符数\" class=\"headerlink\" title=\"length 返回字符串的长度(字符数)\"></a><code>length</code> 返回字符串的长度(字符数)</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world!&#x27;</span>;</span><br><span class=\"line\">s.length;  <span class=\"comment\">// 13</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"charAt-返回指定索引位置的字符\"><a href=\"#charAt-返回指定索引位置的字符\" class=\"headerlink\" title=\"charAt() 返回指定索引位置的字符\"></a><code>charAt()</code> 返回指定索引位置的字符</h3><blockquote>\n<p>string.charCodeAt(index)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world&#x27;</span>;</span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>);  <span class=\"comment\">// e 索引从0开始</span></span><br><span class=\"line\">s.charAt(s.length-<span class=\"number\">1</span>);  <span class=\"comment\">// d 最后一个字符串</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"charCodeAt-返回指定索引位置字符的Unicode值\"><a href=\"#charCodeAt-返回指定索引位置字符的Unicode值\" class=\"headerlink\" title=\"charCodeAt() 返回指定索引位置字符的Unicode值\"></a><code>charCodeAt()</code> 返回指定索引位置字符的<code>Unicode</code>值</h3><blockquote>\n<p>string.charCodeAt(index)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world&#x27;</span>;</span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">0</span>);  <span class=\"comment\">// 72</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fromCharCode-将Unicode转换为字符串\"><a href=\"#fromCharCode-将Unicode转换为字符串\" class=\"headerlink\" title=\"fromCharCode() 将Unicode转换为字符串\"></a><code>fromCharCode()</code> 将<code>Unicode</code>转换为字符串</h3><blockquote>\n<p>String.fromCharCode(n1, n2, …, nX)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">72</span>, <span class=\"number\">69</span>, <span class=\"number\">76</span>, <span class=\"number\">76</span>, <span class=\"number\">79</span>);  <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"indexOf-返回字符串中检索指定字符第一次出现的位置\"><a href=\"#indexOf-返回字符串中检索指定字符第一次出现的位置\" class=\"headerlink\" title=\"indexOf() 返回字符串中检索指定字符第一次出现的位置\"></a><code>indexOf()</code> 返回字符串中检索指定字符第一次出现的位置</h3><blockquote>\n<p>string.indexOf(searchvalue, start)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world, welcome to the JavaScript!&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.indexOf(<span class=\"string\">&#x27;l&#x27;</span>);  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lastIndexOf-从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\"><a href=\"#lastIndexOf-从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\" class=\"headerlink\" title=\"lastIndexOf() 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\"></a><code>lastIndexOf()</code> 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置</h3><blockquote>\n<p>string.lastIndexOf(searchvalue, start)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.lastIndexOf(<span class=\"string\">&#x27;l&#x27;</span>);  <span class=\"comment\">// 8 索引从后(0)到前</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slice-返回两个指定索引区间的字符\"><a href=\"#slice-返回两个指定索引区间的字符\" class=\"headerlink\" title=\"slice() 返回两个指定\b索引区间的字符\"></a><code>slice()</code> 返回两个指定\b索引区间的字符</h3><blockquote>\n<p>string.slice(start, end)</p>\n</blockquote>\n<p>  提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.slice(<span class=\"number\">0</span>, <span class=\"number\">5</span>);  <span class=\"comment\">// Hello 从索引0开始到5（不包括5）</span></span><br><span class=\"line\">s.slice(<span class=\"number\">6</span>);  <span class=\"comment\">// world 从索引6开始到结束</span></span><br><span class=\"line\">s.slice(-<span class=\"number\">1</span>);  <span class=\"comment\">// d 最后一个字符</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"substring-返回两个指定的索引区间的字符\"><a href=\"#substring-返回两个指定的索引区间的字符\" class=\"headerlink\" title=\"substring() 返回两个指定的索引区间的字符\"></a><code>substring()</code> 返回两个指定的索引区间的字符</h3><blockquote>\n<p>string.substring(from, to)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>);  <span class=\"comment\">// Hello 从索引0开始到5（不包括5）</span></span><br><span class=\"line\">s.substring(<span class=\"number\">6</span>);  <span class=\"comment\">// world 从索引6开始到结束</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"substr-返回从索引开始指定长度的字符\"><a href=\"#substr-返回从索引开始指定长度的字符\" class=\"headerlink\" title=\"substr() 返回从索引开始指定长度的字符\"></a><code>substr()</code> 返回从索引开始指定长度的字符</h3><blockquote>\n<p>string.substr(start, length)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.substr(<span class=\"number\">1</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// el 从索引1开始2个长度</span></span><br><span class=\"line\">s.substr(<span class=\"number\">6</span>);  <span class=\"comment\">// lo world  从索引6开始到结束</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>\b思考</strong>：<code>slice()</code>、<code>substring()</code>、<code>substr()</code>区别</p>\n<p><code>substring()</code>以两个参数中较小一个作为起始位置，较大的参数作为结束位置<br>当参数为负数时，<br><code>slice()</code>将它字符串的长度与对应的负数相加，结果作为参数<br><code>substring()</code>将负参数都直接转换为0<br><code>substr()</code>将第一个参数与字符串长度相加后的结果作为第一个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// substring</span></span><br><span class=\"line\">s.substring(<span class=\"number\">2</span>, <span class=\"number\">8</span>);  <span class=\"comment\">// llo wo</span></span><br><span class=\"line\">s.substring(<span class=\"number\">8</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// llo wo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 负数</span></span><br><span class=\"line\">s.slice(-<span class=\"number\">3</span>);      <span class=\"comment\">//  </span></span><br><span class=\"line\">s.substring(-<span class=\"number\">3</span>);  <span class=\"comment\">// hello world</span></span><br><span class=\"line\">s.substr(-<span class=\"number\">3</span>);     <span class=\"comment\">// rld</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.slice(<span class=\"number\">3</span>, -<span class=\"number\">4</span>);   <span class=\"comment\">// lo w (3, 7)</span></span><br><span class=\"line\">s.substring(<span class=\"number\">3</span>, -<span class=\"number\">4</span>); <span class=\"comment\">// hel (0, 3)</span></span><br><span class=\"line\">s.substr(<span class=\"number\">3</span>, -<span class=\"number\">4</span>);    <span class=\"comment\">// 空字符串 索引为3长度为0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> IE对substr接收负值的处理有错，它会返回原始字符串。</p>\n<h3 id=\"match-找到一个或多个正则表达式的匹配\"><a href=\"#match-找到一个或多个正则表达式的匹配\" class=\"headerlink\" title=\"match() 找到一个或多个正则表达式的匹配\"></a><code>match()</code> 找到一个或多个正则表达式的匹配</h3><p>  如果没有找到任何匹配的文本，<code>match()</code>将返回<code>null</code>。否则，它将返回一个<code>array</code>，其中存放了与它找到的匹配文本有关的信息</p>\n<blockquote>\n<p>string.match(regexp)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;The rain in SPAIN stays mainly in the plain&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.match(<span class=\"regexp\">/ain/g</span>);  <span class=\"comment\">// ain, ain, ain</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.match(<span class=\"regexp\">/ain/gi</span>);  <span class=\"comment\">// ain, AIN, ain, ain</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"search-检索与正则表达式相匹配的值\"><a href=\"#search-检索与正则表达式相匹配的值\" class=\"headerlink\" title=\"search() 检索与正则表达式相匹配的值\"></a><code>search()</code> 检索与正则表达式相匹配的值</h3><p>  如果没有找到任何匹配的子串，则返回 -1。</p>\n<blockquote>\n<p>string.search(searchvalue)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Mr. Blue has a blue house&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.search(<span class=\"string\">&quot;blue&quot;</span>);  <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.search(<span class=\"regexp\">/blue/i</span>);  <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toUpperCase-把一个字符串全部变为大写\"><a href=\"#toUpperCase-把一个字符串全部变为大写\" class=\"headerlink\" title=\"toUpperCase() 把一个字符串全部变为大写\"></a><code>toUpperCase()</code> 把一个字符串全部变为大写</h3><blockquote>\n<p>string.toUpperCase()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.toUpperCase();  <span class=\"comment\">// HELLO WORLD</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toLowerCase-把一个字符串全部变成小写\"><a href=\"#toLowerCase-把一个字符串全部变成小写\" class=\"headerlink\" title=\"toLowerCase() 把一个字符串全部变成小写\"></a><code>toLowerCase()</code> 把一个字符串全部变成小写</h3><blockquote>\n<p>string.toLowerCase()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.toLowerCase();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concat-连接两个或多个字符串，返回连接后的字符串\"><a href=\"#concat-连接两个或多个字符串，返回连接后的字符串\" class=\"headerlink\" title=\"concat() 连接两个或多个字符串，返回连接后的字符串\"></a><code>concat()</code> 连接两个或多个字符串，返回连接后的字符串</h3><blockquote>\n<p>string.concat(string1, string2, …, stringX)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&#x27;Hello &#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">&#x27;world!&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s1.concat(s2);   <span class=\"comment\">// Hello world!</span></span><br><span class=\"line\"><span class=\"comment\">// 连接多个 , 隔开</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"string\">&#x27; How are you!&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = s1.concat(s2, s3)  <span class=\"comment\">// Hello world! How are you!</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replace-替换与正则表达式匹配的子串\"><a href=\"#replace-替换与正则表达式匹配的子串\" class=\"headerlink\" title=\"replace() 替换与正则表达式匹配的子串\"></a><code>replace()</code> 替换与正则表达式匹配的子串</h3><p>  注意：<code>replace()</code>方法不改变原始字符串。只执行一次替换</p>\n<blockquote>\n<p>string.replace(searchvalue, newvalue)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;hello world, good world&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.replace(<span class=\"string\">&#x27;world&#x27;</span>, <span class=\"string\">&#x27;javascript&#x27;</span>);  <span class=\"comment\">// hello javascript, good world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个全局替换 正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Mr Blue has a blue house and a blue car&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.replace(<span class=\"regexp\">/blue/g</span>,<span class=\"string\">&quot;red&quot;</span>); <span class=\"comment\">// Mr Blue has a red house and a red car</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个全局替换 忽略大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = str.replace(<span class=\"regexp\">/blue/gi</span>, <span class=\"string\">&quot;red&quot;</span>); <span class=\"comment\">// Mr red has a red house and a red car</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"split-把字符串分割为字符串数组\"><a href=\"#split-把字符串分割为字符串数组\" class=\"headerlink\" title=\"split() 把字符串分割为字符串数组\"></a><code>split()</code> 把字符串分割为字符串数组</h3><p>  注意：<code>split()</code>方法不改变原始字符串。<br>  如果把空字符串<code>(&quot;&quot;)</code>用作<code>separator</code>，那么<code>stringObject</code>中的每个字符之间都会被分割.</p>\n<blockquote>\n<p>string.split(separator, limit)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">s.split(<span class=\"string\">&quot;&quot;</span>);  <span class=\"comment\">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27; &#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;]</span></span><br><span class=\"line\">s.split(<span class=\"string\">&quot; &quot;</span>);  <span class=\"comment\">// [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"trim-去除字符串两边的空白\"><a href=\"#trim-去除字符串两边的空白\" class=\"headerlink\" title=\"trim() 去除字符串两边的空白\"></a><code>trim()</code> 去除字符串两边的空白</h3><blockquote>\n<p>string.trim()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27; hello world    &#x27;</span>;</span><br><span class=\"line\">s.trim();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"valueOf-返回某个字符串对象的原始值\"><a href=\"#valueOf-返回某个字符串对象的原始值\" class=\"headerlink\" title=\"valueOf() 返回某个字符串对象的原始值\"></a><code>valueOf()</code> 返回某个字符串对象的原始值</h3><blockquote>\n<p>string.valueOf()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">s.valueOf();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>字符串属性和方法</p>\n</blockquote>","more":"<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h3 id=\"constructor-返回创建字符串属性的函数\"><a href=\"#constructor-返回创建字符串属性的函数\" class=\"headerlink\" title=\"constructor 返回创建字符串属性的函数\"></a><code>constructor</code> 返回创建字符串属性的函数</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world!&#x27;</span>;</span><br><span class=\"line\">s.constructor;   <span class=\"comment\">// function String() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prototype-允许您向对象添加属性和方法\"><a href=\"#prototype-允许您向对象添加属性和方法\" class=\"headerlink\" title=\"prototype 允许您向对象添加属性和方法\"></a><code>prototype</code> 允许您向对象添加属性和方法</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;Jion&#x27;</span>);</span><br><span class=\"line\">s.prototype.name = <span class=\"string\">&#x27;world&#x27;</span>; <span class=\"comment\">// 添加属性name</span></span><br><span class=\"line\">s.name;   <span class=\"comment\">// world</span></span><br><span class=\"line\">s.prototype.myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;  <span class=\"comment\">// 添加方法</span></span><br><span class=\"line\">s.myFunc();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"length-返回字符串的长度-字符数\"><a href=\"#length-返回字符串的长度-字符数\" class=\"headerlink\" title=\"length 返回字符串的长度(字符数)\"></a><code>length</code> 返回字符串的长度(字符数)</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world!&#x27;</span>;</span><br><span class=\"line\">s.length;  <span class=\"comment\">// 13</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"charAt-返回指定索引位置的字符\"><a href=\"#charAt-返回指定索引位置的字符\" class=\"headerlink\" title=\"charAt() 返回指定索引位置的字符\"></a><code>charAt()</code> 返回指定索引位置的字符</h3><blockquote>\n<p>string.charCodeAt(index)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world&#x27;</span>;</span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>);  <span class=\"comment\">// e 索引从0开始</span></span><br><span class=\"line\">s.charAt(s.length-<span class=\"number\">1</span>);  <span class=\"comment\">// d 最后一个字符串</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"charCodeAt-返回指定索引位置字符的Unicode值\"><a href=\"#charCodeAt-返回指定索引位置字符的Unicode值\" class=\"headerlink\" title=\"charCodeAt() 返回指定索引位置字符的Unicode值\"></a><code>charCodeAt()</code> 返回指定索引位置字符的<code>Unicode</code>值</h3><blockquote>\n<p>string.charCodeAt(index)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello, world&#x27;</span>;</span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">0</span>);  <span class=\"comment\">// 72</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fromCharCode-将Unicode转换为字符串\"><a href=\"#fromCharCode-将Unicode转换为字符串\" class=\"headerlink\" title=\"fromCharCode() 将Unicode转换为字符串\"></a><code>fromCharCode()</code> 将<code>Unicode</code>转换为字符串</h3><blockquote>\n<p>String.fromCharCode(n1, n2, …, nX)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">72</span>, <span class=\"number\">69</span>, <span class=\"number\">76</span>, <span class=\"number\">76</span>, <span class=\"number\">79</span>);  <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"indexOf-返回字符串中检索指定字符第一次出现的位置\"><a href=\"#indexOf-返回字符串中检索指定字符第一次出现的位置\" class=\"headerlink\" title=\"indexOf() 返回字符串中检索指定字符第一次出现的位置\"></a><code>indexOf()</code> 返回字符串中检索指定字符第一次出现的位置</h3><blockquote>\n<p>string.indexOf(searchvalue, start)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world, welcome to the JavaScript!&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.indexOf(<span class=\"string\">&#x27;l&#x27;</span>);  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lastIndexOf-从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\"><a href=\"#lastIndexOf-从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\" class=\"headerlink\" title=\"lastIndexOf() 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置\"></a><code>lastIndexOf()</code> 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置</h3><blockquote>\n<p>string.lastIndexOf(searchvalue, start)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.lastIndexOf(<span class=\"string\">&#x27;l&#x27;</span>);  <span class=\"comment\">// 8 索引从后(0)到前</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slice-返回两个指定索引区间的字符\"><a href=\"#slice-返回两个指定索引区间的字符\" class=\"headerlink\" title=\"slice() 返回两个指定\b索引区间的字符\"></a><code>slice()</code> 返回两个指定\b索引区间的字符</h3><blockquote>\n<p>string.slice(start, end)</p>\n</blockquote>\n<p>  提示： 如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.slice(<span class=\"number\">0</span>, <span class=\"number\">5</span>);  <span class=\"comment\">// Hello 从索引0开始到5（不包括5）</span></span><br><span class=\"line\">s.slice(<span class=\"number\">6</span>);  <span class=\"comment\">// world 从索引6开始到结束</span></span><br><span class=\"line\">s.slice(-<span class=\"number\">1</span>);  <span class=\"comment\">// d 最后一个字符</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"substring-返回两个指定的索引区间的字符\"><a href=\"#substring-返回两个指定的索引区间的字符\" class=\"headerlink\" title=\"substring() 返回两个指定的索引区间的字符\"></a><code>substring()</code> 返回两个指定的索引区间的字符</h3><blockquote>\n<p>string.substring(from, to)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>);  <span class=\"comment\">// Hello 从索引0开始到5（不包括5）</span></span><br><span class=\"line\">s.substring(<span class=\"number\">6</span>);  <span class=\"comment\">// world 从索引6开始到结束</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"substr-返回从索引开始指定长度的字符\"><a href=\"#substr-返回从索引开始指定长度的字符\" class=\"headerlink\" title=\"substr() 返回从索引开始指定长度的字符\"></a><code>substr()</code> 返回从索引开始指定长度的字符</h3><blockquote>\n<p>string.substr(start, length)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.substr(<span class=\"number\">1</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// el 从索引1开始2个长度</span></span><br><span class=\"line\">s.substr(<span class=\"number\">6</span>);  <span class=\"comment\">// lo world  从索引6开始到结束</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>\b思考</strong>：<code>slice()</code>、<code>substring()</code>、<code>substr()</code>区别</p>\n<p><code>substring()</code>以两个参数中较小一个作为起始位置，较大的参数作为结束位置<br>当参数为负数时，<br><code>slice()</code>将它字符串的长度与对应的负数相加，结果作为参数<br><code>substring()</code>将负参数都直接转换为0<br><code>substr()</code>将第一个参数与字符串长度相加后的结果作为第一个参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// substring</span></span><br><span class=\"line\">s.substring(<span class=\"number\">2</span>, <span class=\"number\">8</span>);  <span class=\"comment\">// llo wo</span></span><br><span class=\"line\">s.substring(<span class=\"number\">8</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// llo wo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 负数</span></span><br><span class=\"line\">s.slice(-<span class=\"number\">3</span>);      <span class=\"comment\">//  </span></span><br><span class=\"line\">s.substring(-<span class=\"number\">3</span>);  <span class=\"comment\">// hello world</span></span><br><span class=\"line\">s.substr(-<span class=\"number\">3</span>);     <span class=\"comment\">// rld</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.slice(<span class=\"number\">3</span>, -<span class=\"number\">4</span>);   <span class=\"comment\">// lo w (3, 7)</span></span><br><span class=\"line\">s.substring(<span class=\"number\">3</span>, -<span class=\"number\">4</span>); <span class=\"comment\">// hel (0, 3)</span></span><br><span class=\"line\">s.substr(<span class=\"number\">3</span>, -<span class=\"number\">4</span>);    <span class=\"comment\">// 空字符串 索引为3长度为0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> IE对substr接收负值的处理有错，它会返回原始字符串。</p>\n<h3 id=\"match-找到一个或多个正则表达式的匹配\"><a href=\"#match-找到一个或多个正则表达式的匹配\" class=\"headerlink\" title=\"match() 找到一个或多个正则表达式的匹配\"></a><code>match()</code> 找到一个或多个正则表达式的匹配</h3><p>  如果没有找到任何匹配的文本，<code>match()</code>将返回<code>null</code>。否则，它将返回一个<code>array</code>，其中存放了与它找到的匹配文本有关的信息</p>\n<blockquote>\n<p>string.match(regexp)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;The rain in SPAIN stays mainly in the plain&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.match(<span class=\"regexp\">/ain/g</span>);  <span class=\"comment\">// ain, ain, ain</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不区分大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.match(<span class=\"regexp\">/ain/gi</span>);  <span class=\"comment\">// ain, AIN, ain, ain</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"search-检索与正则表达式相匹配的值\"><a href=\"#search-检索与正则表达式相匹配的值\" class=\"headerlink\" title=\"search() 检索与正则表达式相匹配的值\"></a><code>search()</code> 检索与正则表达式相匹配的值</h3><p>  如果没有找到任何匹配的子串，则返回 -1。</p>\n<blockquote>\n<p>string.search(searchvalue)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Mr. Blue has a blue house&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = str.search(<span class=\"string\">&quot;blue&quot;</span>);  <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.search(<span class=\"regexp\">/blue/i</span>);  <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toUpperCase-把一个字符串全部变为大写\"><a href=\"#toUpperCase-把一个字符串全部变为大写\" class=\"headerlink\" title=\"toUpperCase() 把一个字符串全部变为大写\"></a><code>toUpperCase()</code> 把一个字符串全部变为大写</h3><blockquote>\n<p>string.toUpperCase()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.toUpperCase();  <span class=\"comment\">// HELLO WORLD</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toLowerCase-把一个字符串全部变成小写\"><a href=\"#toLowerCase-把一个字符串全部变成小写\" class=\"headerlink\" title=\"toLowerCase() 把一个字符串全部变成小写\"></a><code>toLowerCase()</code> 把一个字符串全部变成小写</h3><blockquote>\n<p>string.toLowerCase()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br><span class=\"line\">s.toLowerCase();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concat-连接两个或多个字符串，返回连接后的字符串\"><a href=\"#concat-连接两个或多个字符串，返回连接后的字符串\" class=\"headerlink\" title=\"concat() 连接两个或多个字符串，返回连接后的字符串\"></a><code>concat()</code> 连接两个或多个字符串，返回连接后的字符串</h3><blockquote>\n<p>string.concat(string1, string2, …, stringX)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&#x27;Hello &#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">&#x27;world!&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s1.concat(s2);   <span class=\"comment\">// Hello world!</span></span><br><span class=\"line\"><span class=\"comment\">// 连接多个 , 隔开</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"string\">&#x27; How are you!&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = s1.concat(s2, s3)  <span class=\"comment\">// Hello world! How are you!</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replace-替换与正则表达式匹配的子串\"><a href=\"#replace-替换与正则表达式匹配的子串\" class=\"headerlink\" title=\"replace() 替换与正则表达式匹配的子串\"></a><code>replace()</code> 替换与正则表达式匹配的子串</h3><p>  注意：<code>replace()</code>方法不改变原始字符串。只执行一次替换</p>\n<blockquote>\n<p>string.replace(searchvalue, newvalue)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;hello world, good world&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = s.replace(<span class=\"string\">&#x27;world&#x27;</span>, <span class=\"string\">&#x27;javascript&#x27;</span>);  <span class=\"comment\">// hello javascript, good world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个全局替换 正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Mr Blue has a blue house and a blue car&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = str.replace(<span class=\"regexp\">/blue/g</span>,<span class=\"string\">&quot;red&quot;</span>); <span class=\"comment\">// Mr Blue has a red house and a red car</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行一个全局替换 忽略大小写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = str.replace(<span class=\"regexp\">/blue/gi</span>, <span class=\"string\">&quot;red&quot;</span>); <span class=\"comment\">// Mr red has a red house and a red car</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"split-把字符串分割为字符串数组\"><a href=\"#split-把字符串分割为字符串数组\" class=\"headerlink\" title=\"split() 把字符串分割为字符串数组\"></a><code>split()</code> 把字符串分割为字符串数组</h3><p>  注意：<code>split()</code>方法不改变原始字符串。<br>  如果把空字符串<code>(&quot;&quot;)</code>用作<code>separator</code>，那么<code>stringObject</code>中的每个字符之间都会被分割.</p>\n<blockquote>\n<p>string.split(separator, limit)</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">s.split(<span class=\"string\">&quot;&quot;</span>);  <span class=\"comment\">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27; &#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;]</span></span><br><span class=\"line\">s.split(<span class=\"string\">&quot; &quot;</span>);  <span class=\"comment\">// [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"trim-去除字符串两边的空白\"><a href=\"#trim-去除字符串两边的空白\" class=\"headerlink\" title=\"trim() 去除字符串两边的空白\"></a><code>trim()</code> 去除字符串两边的空白</h3><blockquote>\n<p>string.trim()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27; hello world    &#x27;</span>;</span><br><span class=\"line\">s.trim();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"valueOf-返回某个字符串对象的原始值\"><a href=\"#valueOf-返回某个字符串对象的原始值\" class=\"headerlink\" title=\"valueOf() 返回某个字符串对象的原始值\"></a><code>valueOf()</code> 返回某个字符串对象的原始值</h3><blockquote>\n<p>string.valueOf()</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">s.valueOf();  <span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>"},{"title":"微信小程序反编译","date":"2023-06-28T17:35:13.000Z","_content":"","source":"_posts/other/微信小程序反编译.md","raw":"---\ntitle: 微信小程序反编译\ndate: 2023-06-29 01:35:13\ntags:\n---\n","slug":"other/微信小程序反编译","published":1,"updated":"2023-06-28T17:35:13.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zp001wj0361gv25ama","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"解决GitHub下载速度缓慢","date":"2019-07-02T08:36:12.000Z","_content":"\n> 修改本机的Hosts\n\n<!-- more -->\n\n1.Hosts文件的路径:\n\n```path\n// Windows\n\nC:\\Windows\\System32\\drivers\\etc\n\n// Mac\nsudo vim /etc/hosts\n```\n\n2.追加域名的IP地址\n\n可以利用`https://www.ipaddress.com/`获得以下两个GitHub域名的IP地址\n\n`github.com`  \n\n`github.global.ssl.fastly.net`\n\n```n\n192.30.253.112 github.com\n151.101.185.194 github.global.ssl.fastly.net\n```\n","source":"_posts/other/解决GitHub下载速度缓慢.md","raw":"---\ntitle: 解决GitHub下载速度缓慢\ndate: 2019-07-02 16:36:12\ntags: GitHub\ncategories: GitHub\n---\n\n> 修改本机的Hosts\n\n<!-- more -->\n\n1.Hosts文件的路径:\n\n```path\n// Windows\n\nC:\\Windows\\System32\\drivers\\etc\n\n// Mac\nsudo vim /etc/hosts\n```\n\n2.追加域名的IP地址\n\n可以利用`https://www.ipaddress.com/`获得以下两个GitHub域名的IP地址\n\n`github.com`  \n\n`github.global.ssl.fastly.net`\n\n```n\n192.30.253.112 github.com\n151.101.185.194 github.global.ssl.fastly.net\n```\n","slug":"other/解决GitHub下载速度缓慢","published":1,"updated":"2021-06-22T07:14:19.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zp001yj03691xv685u","content":"<blockquote>\n<p>修改本机的Hosts</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>1.Hosts文件的路径:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Windows</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Windows\\System32\\drivers\\etc</span><br><span class=\"line\"></span><br><span class=\"line\">// Mac</span><br><span class=\"line\">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<p>2.追加域名的IP地址</p>\n<p>可以利用<code>https://www.ipaddress.com/</code>获得以下两个GitHub域名的IP地址</p>\n<p><code>github.com</code>  </p>\n<p><code>github.global.ssl.fastly.net</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.30.253.112 github.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>修改本机的Hosts</p>\n</blockquote>","more":"<p>1.Hosts文件的路径:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Windows</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Windows\\System32\\drivers\\etc</span><br><span class=\"line\"></span><br><span class=\"line\">// Mac</span><br><span class=\"line\">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<p>2.追加域名的IP地址</p>\n<p>可以利用<code>https://www.ipaddress.com/</code>获得以下两个GitHub域名的IP地址</p>\n<p><code>github.com</code>  </p>\n<p><code>github.global.ssl.fastly.net</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.30.253.112 github.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>"},{"title":"PHP管理工具Composer","date":"2019-06-19T03:42:44.000Z","_content":"\n> PHP管理工具Composer\n\n<!-- more -->\n\n## 全局安装\n\n```php\ncurl -sS https://getcomposer.org/installer | php\n\nmv composer.phar /usr/local/bin/composer\n```\n\n## Composer 国内镜像\n\n全局配置\n\n```php\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n\n```\n\n解除镜像并恢复到packagist官方源\n\n```php\ncomposer config -g --unset repos.packagist\n```\n\n*参考*：<http://www.yanchat.com/75.html>","source":"_posts/php/PHP管理工具Composer.md","raw":"---\ntitle: PHP管理工具Composer\ndate: 2019-06-19 11:42:44\ntags: [PHP, Composer]\ncategories: PHP\n---\n\n> PHP管理工具Composer\n\n<!-- more -->\n\n## 全局安装\n\n```php\ncurl -sS https://getcomposer.org/installer | php\n\nmv composer.phar /usr/local/bin/composer\n```\n\n## Composer 国内镜像\n\n全局配置\n\n```php\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n\n```\n\n解除镜像并恢复到packagist官方源\n\n```php\ncomposer config -g --unset repos.packagist\n```\n\n*参考*：<http://www.yanchat.com/75.html>","slug":"php/PHP管理工具Composer","published":1,"updated":"2021-06-22T07:14:19.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zq0021j036abv0hp3a","content":"<blockquote>\n<p>PHP管理工具Composer</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https:<span class=\"comment\">//getcomposer.org/installer | php</span></span><br><span class=\"line\"></span><br><span class=\"line\">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Composer-国内镜像\"><a href=\"#Composer-国内镜像\" class=\"headerlink\" title=\"Composer 国内镜像\"></a>Composer 国内镜像</h2><p>全局配置</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https:<span class=\"comment\">//packagist.phpcomposer.com</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>解除镜像并恢复到packagist官方源</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g --<span class=\"keyword\">unset</span> repos.packagist</span><br></pre></td></tr></table></figure>\n\n<p><em>参考</em>：<a href=\"http://www.yanchat.com/75.html\">http://www.yanchat.com/75.html</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>PHP管理工具Composer</p>\n</blockquote>","more":"<h2 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https:<span class=\"comment\">//getcomposer.org/installer | php</span></span><br><span class=\"line\"></span><br><span class=\"line\">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Composer-国内镜像\"><a href=\"#Composer-国内镜像\" class=\"headerlink\" title=\"Composer 国内镜像\"></a>Composer 国内镜像</h2><p>全局配置</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https:<span class=\"comment\">//packagist.phpcomposer.com</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>解除镜像并恢复到packagist官方源</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g --<span class=\"keyword\">unset</span> repos.packagist</span><br></pre></td></tr></table></figure>\n\n<p><em>参考</em>：<a href=\"http://www.yanchat.com/75.html\">http://www.yanchat.com/75.html</a></p>"},{"title":"Mac Apache+PHP配置","date":"2019-07-02T08:50:27.000Z","_content":"\n> MAC系统 Apache+PHP配置\n\n<!-- more -->\n\n## 开启apache\n\n> sudo apachectl start\n\n重启apache：\n> sudo apachectl restart\n\n关闭apache：\n> sudo apachectl stop\n\n开启apache：\n> sudo apachectl start\n\n版本apache：\n> httpd -v\n\n## 开启PHP\n\n查看本地php版本：\n> php -v\n\n打开文件\n> /etc/apache2/httpd.conf\n\nphp5:\n> LoadModule php5_module libexec/apache2/libphp5.so\n\nphp7:\n> LoadModule php7_module libexec/apache2/libphp7.so\n\n去掉前面的`#`\n\n重启apache：\n> sudo apachectl restart\n\n## 修改apache本地服务器路径\n\n默认路径：`/Library/WebServer/Documents`\n\n具体步骤：（我mac的用户名为henry，以下均以henry为例）\n\n1. 在用户名下创建文件夹Sites\n\n2. 打开文件/etc/apache2/httpd.conf\n\n    * 去掉前面的`#`\n    > LoadModule userdir_module libexec/apache2/mod_userdir.so\n\n    * 修改`DocumentRoot`为：\n\n        ```t\n        DocumentRoot \"/Users/henry/Sites\"\n        <Directory \"/Users/henry/Sites\">\n        ```\n\n    * `Options FollowSymLinks Multiviews` 修改为 `Options FollowSymLinks Multiviews Indexes`\n\n3. 创建文件/etc/apache2/users/henry.conf\n\n    输入以下内容：\n\n    ```t\n    <Directory \"/Users/henry/Sites/\">\n        Options Indexes MultiViews\n        AllowOverride All\n    </Directory>\n    ```\n\n4. 重启apache服务器\n\n    > sudo apachectl restart\n","source":"_posts/php/apache.md","raw":"---\ntitle: Mac Apache+PHP配置\ndate: 2019-07-02 16:50:27\ntags: [PHP, Apache]\ncategories: PHP\n---\n\n> MAC系统 Apache+PHP配置\n\n<!-- more -->\n\n## 开启apache\n\n> sudo apachectl start\n\n重启apache：\n> sudo apachectl restart\n\n关闭apache：\n> sudo apachectl stop\n\n开启apache：\n> sudo apachectl start\n\n版本apache：\n> httpd -v\n\n## 开启PHP\n\n查看本地php版本：\n> php -v\n\n打开文件\n> /etc/apache2/httpd.conf\n\nphp5:\n> LoadModule php5_module libexec/apache2/libphp5.so\n\nphp7:\n> LoadModule php7_module libexec/apache2/libphp7.so\n\n去掉前面的`#`\n\n重启apache：\n> sudo apachectl restart\n\n## 修改apache本地服务器路径\n\n默认路径：`/Library/WebServer/Documents`\n\n具体步骤：（我mac的用户名为henry，以下均以henry为例）\n\n1. 在用户名下创建文件夹Sites\n\n2. 打开文件/etc/apache2/httpd.conf\n\n    * 去掉前面的`#`\n    > LoadModule userdir_module libexec/apache2/mod_userdir.so\n\n    * 修改`DocumentRoot`为：\n\n        ```t\n        DocumentRoot \"/Users/henry/Sites\"\n        <Directory \"/Users/henry/Sites\">\n        ```\n\n    * `Options FollowSymLinks Multiviews` 修改为 `Options FollowSymLinks Multiviews Indexes`\n\n3. 创建文件/etc/apache2/users/henry.conf\n\n    输入以下内容：\n\n    ```t\n    <Directory \"/Users/henry/Sites/\">\n        Options Indexes MultiViews\n        AllowOverride All\n    </Directory>\n    ```\n\n4. 重启apache服务器\n\n    > sudo apachectl restart\n","slug":"php/apache","published":1,"updated":"2021-06-22T07:14:19.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zr0024j0362q4p5ej8","content":"<blockquote>\n<p>MAC系统 Apache+PHP配置</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"开启apache\"><a href=\"#开启apache\" class=\"headerlink\" title=\"开启apache\"></a>开启apache</h2><blockquote>\n<p>sudo apachectl start</p>\n</blockquote>\n<p>重启apache：</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n<p>关闭apache：</p>\n<blockquote>\n<p>sudo apachectl stop</p>\n</blockquote>\n<p>开启apache：</p>\n<blockquote>\n<p>sudo apachectl start</p>\n</blockquote>\n<p>版本apache：</p>\n<blockquote>\n<p>httpd -v</p>\n</blockquote>\n<h2 id=\"开启PHP\"><a href=\"#开启PHP\" class=\"headerlink\" title=\"开启PHP\"></a>开启PHP</h2><p>查看本地php版本：</p>\n<blockquote>\n<p>php -v</p>\n</blockquote>\n<p>打开文件</p>\n<blockquote>\n<p>/etc/apache2/httpd.conf</p>\n</blockquote>\n<p>php5:</p>\n<blockquote>\n<p>LoadModule php5_module libexec/apache2/libphp5.so</p>\n</blockquote>\n<p>php7:</p>\n<blockquote>\n<p>LoadModule php7_module libexec/apache2/libphp7.so</p>\n</blockquote>\n<p>去掉前面的<code>#</code></p>\n<p>重启apache：</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n<h2 id=\"修改apache本地服务器路径\"><a href=\"#修改apache本地服务器路径\" class=\"headerlink\" title=\"修改apache本地服务器路径\"></a>修改apache本地服务器路径</h2><p>默认路径：<code>/Library/WebServer/Documents</code></p>\n<p>具体步骤：（我mac的用户名为henry，以下均以henry为例）</p>\n<ol>\n<li><p>在用户名下创建文件夹Sites</p>\n</li>\n<li><p>打开文件/etc/apache2/httpd.conf</p>\n<ul>\n<li><p>去掉前面的<code>#</code></p>\n<blockquote>\n<p>LoadModule userdir_module libexec/apache2/mod_userdir.so</p>\n</blockquote>\n</li>\n<li><p>修改<code>DocumentRoot</code>为：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentRoot &quot;/Users/henry/Sites&quot;</span><br><span class=\"line\">&lt;Directory &quot;/Users/henry/Sites&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>Options FollowSymLinks Multiviews</code> 修改为 <code>Options FollowSymLinks Multiviews Indexes</code></p>\n</li>\n</ul>\n</li>\n<li><p>创建文件/etc/apache2/users/henry.conf</p>\n<p> 输入以下内容：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory &quot;/Users/henry/Sites/&quot;&gt;</span><br><span class=\"line\">    Options Indexes MultiViews</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>重启apache服务器</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>MAC系统 Apache+PHP配置</p>\n</blockquote>","more":"<h2 id=\"开启apache\"><a href=\"#开启apache\" class=\"headerlink\" title=\"开启apache\"></a>开启apache</h2><blockquote>\n<p>sudo apachectl start</p>\n</blockquote>\n<p>重启apache：</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n<p>关闭apache：</p>\n<blockquote>\n<p>sudo apachectl stop</p>\n</blockquote>\n<p>开启apache：</p>\n<blockquote>\n<p>sudo apachectl start</p>\n</blockquote>\n<p>版本apache：</p>\n<blockquote>\n<p>httpd -v</p>\n</blockquote>\n<h2 id=\"开启PHP\"><a href=\"#开启PHP\" class=\"headerlink\" title=\"开启PHP\"></a>开启PHP</h2><p>查看本地php版本：</p>\n<blockquote>\n<p>php -v</p>\n</blockquote>\n<p>打开文件</p>\n<blockquote>\n<p>/etc/apache2/httpd.conf</p>\n</blockquote>\n<p>php5:</p>\n<blockquote>\n<p>LoadModule php5_module libexec/apache2/libphp5.so</p>\n</blockquote>\n<p>php7:</p>\n<blockquote>\n<p>LoadModule php7_module libexec/apache2/libphp7.so</p>\n</blockquote>\n<p>去掉前面的<code>#</code></p>\n<p>重启apache：</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n<h2 id=\"修改apache本地服务器路径\"><a href=\"#修改apache本地服务器路径\" class=\"headerlink\" title=\"修改apache本地服务器路径\"></a>修改apache本地服务器路径</h2><p>默认路径：<code>/Library/WebServer/Documents</code></p>\n<p>具体步骤：（我mac的用户名为henry，以下均以henry为例）</p>\n<ol>\n<li><p>在用户名下创建文件夹Sites</p>\n</li>\n<li><p>打开文件/etc/apache2/httpd.conf</p>\n<ul>\n<li><p>去掉前面的<code>#</code></p>\n<blockquote>\n<p>LoadModule userdir_module libexec/apache2/mod_userdir.so</p>\n</blockquote>\n</li>\n<li><p>修改<code>DocumentRoot</code>为：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DocumentRoot &quot;/Users/henry/Sites&quot;</span><br><span class=\"line\">&lt;Directory &quot;/Users/henry/Sites&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>Options FollowSymLinks Multiviews</code> 修改为 <code>Options FollowSymLinks Multiviews Indexes</code></p>\n</li>\n</ul>\n</li>\n<li><p>创建文件/etc/apache2/users/henry.conf</p>\n<p> 输入以下内容：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory &quot;/Users/henry/Sites/&quot;&gt;</span><br><span class=\"line\">    Options Indexes MultiViews</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>重启apache服务器</p>\n<blockquote>\n<p>sudo apachectl restart</p>\n</blockquote>\n</li>\n</ol>"},{"title":"Git命令","date":"2021-08-06T05:03:57.000Z","_content":"\nGit相关命令\n\n<!-- more -->\n\n```shell\ngit init                                                  # 初始本地git仓库（创建新仓库）\ngit config --global user.name \"xxx\"                       # 配置用户名\ngit config --global user.email \"xxx@xxx.com\"              # 配置邮件\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库\ngit status                                                # 查看当前版本状态（是否修改）\ngit add xyz                                               # 添加xyz文件至index\ngit add .                                                 # 增加当前子目录下所有更改过的文件至index\ngit commit -m 'xxx'                                       # 提交\ngit commit --amend -m 'xxx'                               # 合并上一次提交（用于反复修改）\ngit commit -am 'xxx'                                      # 将add和commit合为一步\ngit rm xxx                                                # 删除index中的文件\ngit rm -r *                                               # 递归删除\ngit log                                                   # 显示提交日志\ngit log -1                                                # 显示1行日志 -n为n行\ngit log -5\ngit log --stat                                            # 显示提交日志及相关变动文件\ngit log -p -m\ngit show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容\ngit show dfb02                                            # 可只用commitid的前几位\ngit show HEAD                                             # 显示HEAD提交日志\ngit show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit tag                                                   # 显示已存在的tag\ngit tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag\ngit show v2.0                                             # 显示v2.0的日志及详细内容\ngit log v2.0                                              # 显示v2.0的日志\ngit diff                                                  # 显示所有未添加至index的变更\ngit diff --cached                                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                                            # 比较与上一个版本的差异\ngit diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异\ngit diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的\ngit diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容\ngit remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）\ngit branch                                                # 显示本地分支\ngit branch --contains 50089                               # 显示包含提交50089的分支\ngit branch -a                                             # 显示所有分支\ngit branch -r                                             # 显示所有原创分支\ngit branch --merged                                       # 显示所有已合并到当前分支的分支\ngit branch --no-merged                                    # 显示所有未合并到当前分支的分支\ngit branch -m master master_copy                          # 本地分支改名\ngit checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出\ngit checkout -b master master_copy                        # 上面的完整版\ngit checkout features/performance                         # 检出已存在的features/performance分支\ngit checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支\ngit checkout v2.0                                         # 检出版本v2.0\ngit checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出\ngit checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）\ngit merge origin/master                                   # 合并远程master分支至当前分支\ngit cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改\ngit push origin master                                    # 将当前分支push到远程master分支\ngit push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支\ngit push --tags                                           # 把所有tag推送到远程仓库\ngit fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）\ngit fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支\ngit pull origin master                                    # 获取远程分支master并merge到当前分支\ngit mv README README2                                     # 重命名文件README为README2\ngit reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）\ngit rebase\ngit branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）\ngit branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933\ngit ls-files                                              # 列出git index包含的文件\ngit show-branch                                           # 图示当前分支历史\ngit show-branch --all                                     # 图示所有分支历史\ngit whatchanged                                           # 显示提交历史对应的文件修改\ngit revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818\ngit ls-tree HEAD                                          # 内部命令：显示某个git对象\ngit rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH\ngit reflog                                                # 显示所有提交，包括孤立节点\ngit show HEAD@{5}\ngit show master@{yesterday}                               # 显示master分支昨天的状态\ngit log --pretty=format:'%h %s' --graph                   # 图示提交日志\ngit show HEAD~3\ngit show -s --pretty=raw 2be7fcb476\ngit stash                                                 # 暂存当前修改，将所有至为HEAD状态\ngit stash list                                            # 查看所有暂存\ngit stash show -p stash@{0}                               # 参考第一次暂存\ngit stash apply stash@{0}                                 # 应用第一次暂存\ngit grep \"delete from\"                                    # 文件中搜索文本“delete from”\ngit grep -e '#define' --and -e SORT_DIRENT\ngit gcgit\ngit fsck\n```\n","source":"_posts/tools/Git命令.md","raw":"---\ntitle: Git命令\ndate: 2021-08-06 13:03:57\ntags: Git\ncategories: Git\n---\n\nGit相关命令\n\n<!-- more -->\n\n```shell\ngit init                                                  # 初始本地git仓库（创建新仓库）\ngit config --global user.name \"xxx\"                       # 配置用户名\ngit config --global user.email \"xxx@xxx.com\"              # 配置邮件\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库\ngit status                                                # 查看当前版本状态（是否修改）\ngit add xyz                                               # 添加xyz文件至index\ngit add .                                                 # 增加当前子目录下所有更改过的文件至index\ngit commit -m 'xxx'                                       # 提交\ngit commit --amend -m 'xxx'                               # 合并上一次提交（用于反复修改）\ngit commit -am 'xxx'                                      # 将add和commit合为一步\ngit rm xxx                                                # 删除index中的文件\ngit rm -r *                                               # 递归删除\ngit log                                                   # 显示提交日志\ngit log -1                                                # 显示1行日志 -n为n行\ngit log -5\ngit log --stat                                            # 显示提交日志及相关变动文件\ngit log -p -m\ngit show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容\ngit show dfb02                                            # 可只用commitid的前几位\ngit show HEAD                                             # 显示HEAD提交日志\ngit show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit tag                                                   # 显示已存在的tag\ngit tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag\ngit show v2.0                                             # 显示v2.0的日志及详细内容\ngit log v2.0                                              # 显示v2.0的日志\ngit diff                                                  # 显示所有未添加至index的变更\ngit diff --cached                                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                                            # 比较与上一个版本的差异\ngit diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异\ngit diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的\ngit diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容\ngit remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）\ngit branch                                                # 显示本地分支\ngit branch --contains 50089                               # 显示包含提交50089的分支\ngit branch -a                                             # 显示所有分支\ngit branch -r                                             # 显示所有原创分支\ngit branch --merged                                       # 显示所有已合并到当前分支的分支\ngit branch --no-merged                                    # 显示所有未合并到当前分支的分支\ngit branch -m master master_copy                          # 本地分支改名\ngit checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出\ngit checkout -b master master_copy                        # 上面的完整版\ngit checkout features/performance                         # 检出已存在的features/performance分支\ngit checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支\ngit checkout v2.0                                         # 检出版本v2.0\ngit checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出\ngit checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）\ngit merge origin/master                                   # 合并远程master分支至当前分支\ngit cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改\ngit push origin master                                    # 将当前分支push到远程master分支\ngit push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支\ngit push --tags                                           # 把所有tag推送到远程仓库\ngit fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）\ngit fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支\ngit pull origin master                                    # 获取远程分支master并merge到当前分支\ngit mv README README2                                     # 重命名文件README为README2\ngit reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）\ngit rebase\ngit branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）\ngit branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933\ngit ls-files                                              # 列出git index包含的文件\ngit show-branch                                           # 图示当前分支历史\ngit show-branch --all                                     # 图示所有分支历史\ngit whatchanged                                           # 显示提交历史对应的文件修改\ngit revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818\ngit ls-tree HEAD                                          # 内部命令：显示某个git对象\ngit rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH\ngit reflog                                                # 显示所有提交，包括孤立节点\ngit show HEAD@{5}\ngit show master@{yesterday}                               # 显示master分支昨天的状态\ngit log --pretty=format:'%h %s' --graph                   # 图示提交日志\ngit show HEAD~3\ngit show -s --pretty=raw 2be7fcb476\ngit stash                                                 # 暂存当前修改，将所有至为HEAD状态\ngit stash list                                            # 查看所有暂存\ngit stash show -p stash@{0}                               # 参考第一次暂存\ngit stash apply stash@{0}                                 # 应用第一次暂存\ngit grep \"delete from\"                                    # 文件中搜索文本“delete from”\ngit grep -e '#define' --and -e SORT_DIRENT\ngit gcgit\ngit fsck\n```\n","slug":"tools/Git命令","published":1,"updated":"2021-08-06T05:40:46.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zr0027j036d2cs9ys5","content":"<p>Git相关命令</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init                                                  # 初始本地git仓库（创建新仓库）</span><br><span class=\"line\">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class=\"line\">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class=\"line\">git config --global color.ui true                         # git status等命令自动着色</span><br><span class=\"line\">git config --global color.status auto</span><br><span class=\"line\">git config --global color.diff auto</span><br><span class=\"line\">git config --global color.branch auto</span><br><span class=\"line\">git config --global color.interactive auto</span><br><span class=\"line\">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class=\"line\">git status                                                # 查看当前版本状态（是否修改）</span><br><span class=\"line\">git add xyz                                               # 添加xyz文件至index</span><br><span class=\"line\">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class=\"line\">git commit -m &#x27;xxx&#x27;                                       # 提交</span><br><span class=\"line\">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）</span><br><span class=\"line\">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步</span><br><span class=\"line\">git rm xxx                                                # 删除index中的文件</span><br><span class=\"line\">git rm -r *                                               # 递归删除</span><br><span class=\"line\">git log                                                   # 显示提交日志</span><br><span class=\"line\">git log -1                                                # 显示1行日志 -n为n行</span><br><span class=\"line\">git log -5</span><br><span class=\"line\">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class=\"line\">git log -p -m</span><br><span class=\"line\">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class=\"line\">git show dfb02                                            # 可只用commitid的前几位</span><br><span class=\"line\">git show HEAD                                             # 显示HEAD提交日志</span><br><span class=\"line\">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class=\"line\">git tag                                                   # 显示已存在的tag</span><br><span class=\"line\">git tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的tag</span><br><span class=\"line\">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class=\"line\">git log v2.0                                              # 显示v2.0的日志</span><br><span class=\"line\">git diff                                                  # 显示所有未添加至index的变更</span><br><span class=\"line\">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class=\"line\">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class=\"line\">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class=\"line\">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</span><br><span class=\"line\">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class=\"line\">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</span><br><span class=\"line\">git branch                                                # 显示本地分支</span><br><span class=\"line\">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class=\"line\">git branch -a                                             # 显示所有分支</span><br><span class=\"line\">git branch -r                                             # 显示所有原创分支</span><br><span class=\"line\">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class=\"line\">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class=\"line\">git branch -m master master_copy                          # 本地分支改名</span><br><span class=\"line\">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</span><br><span class=\"line\">git checkout -b master master_copy                        # 上面的完整版</span><br><span class=\"line\">git checkout features/performance                         # 检出已存在的features/performance分支</span><br><span class=\"line\">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class=\"line\">git checkout v2.0                                         # 检出版本v2.0</span><br><span class=\"line\">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</span><br><span class=\"line\">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</span><br><span class=\"line\">git merge origin/master                                   # 合并远程master分支至当前分支</span><br><span class=\"line\">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class=\"line\">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class=\"line\">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class=\"line\">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class=\"line\">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class=\"line\">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class=\"line\">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class=\"line\">git mv README README2                                     # 重命名文件README为README2</span><br><span class=\"line\">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class=\"line\">git rebase</span><br><span class=\"line\">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br><span class=\"line\">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</span><br><span class=\"line\">git ls-files                                              # 列出git index包含的文件</span><br><span class=\"line\">git show-branch                                           # 图示当前分支历史</span><br><span class=\"line\">git show-branch --all                                     # 图示所有分支历史</span><br><span class=\"line\">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class=\"line\">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class=\"line\">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class=\"line\">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class=\"line\">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class=\"line\">git show HEAD@&#123;5&#125;</span><br><span class=\"line\">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class=\"line\">git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志</span><br><span class=\"line\">git show HEAD~3</span><br><span class=\"line\">git show -s --pretty=raw 2be7fcb476</span><br><span class=\"line\">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class=\"line\">git stash list                                            # 查看所有暂存</span><br><span class=\"line\">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class=\"line\">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class=\"line\">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class=\"line\">git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT</span><br><span class=\"line\">git gcgit</span><br><span class=\"line\">git fsck</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Git相关命令</p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init                                                  # 初始本地git仓库（创建新仓库）</span><br><span class=\"line\">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class=\"line\">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class=\"line\">git config --global color.ui true                         # git status等命令自动着色</span><br><span class=\"line\">git config --global color.status auto</span><br><span class=\"line\">git config --global color.diff auto</span><br><span class=\"line\">git config --global color.branch auto</span><br><span class=\"line\">git config --global color.interactive auto</span><br><span class=\"line\">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class=\"line\">git status                                                # 查看当前版本状态（是否修改）</span><br><span class=\"line\">git add xyz                                               # 添加xyz文件至index</span><br><span class=\"line\">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class=\"line\">git commit -m &#x27;xxx&#x27;                                       # 提交</span><br><span class=\"line\">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）</span><br><span class=\"line\">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步</span><br><span class=\"line\">git rm xxx                                                # 删除index中的文件</span><br><span class=\"line\">git rm -r *                                               # 递归删除</span><br><span class=\"line\">git log                                                   # 显示提交日志</span><br><span class=\"line\">git log -1                                                # 显示1行日志 -n为n行</span><br><span class=\"line\">git log -5</span><br><span class=\"line\">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class=\"line\">git log -p -m</span><br><span class=\"line\">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class=\"line\">git show dfb02                                            # 可只用commitid的前几位</span><br><span class=\"line\">git show HEAD                                             # 显示HEAD提交日志</span><br><span class=\"line\">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class=\"line\">git tag                                                   # 显示已存在的tag</span><br><span class=\"line\">git tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的tag</span><br><span class=\"line\">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class=\"line\">git log v2.0                                              # 显示v2.0的日志</span><br><span class=\"line\">git diff                                                  # 显示所有未添加至index的变更</span><br><span class=\"line\">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class=\"line\">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class=\"line\">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class=\"line\">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</span><br><span class=\"line\">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class=\"line\">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</span><br><span class=\"line\">git branch                                                # 显示本地分支</span><br><span class=\"line\">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class=\"line\">git branch -a                                             # 显示所有分支</span><br><span class=\"line\">git branch -r                                             # 显示所有原创分支</span><br><span class=\"line\">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class=\"line\">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class=\"line\">git branch -m master master_copy                          # 本地分支改名</span><br><span class=\"line\">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</span><br><span class=\"line\">git checkout -b master master_copy                        # 上面的完整版</span><br><span class=\"line\">git checkout features/performance                         # 检出已存在的features/performance分支</span><br><span class=\"line\">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class=\"line\">git checkout v2.0                                         # 检出版本v2.0</span><br><span class=\"line\">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</span><br><span class=\"line\">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</span><br><span class=\"line\">git merge origin/master                                   # 合并远程master分支至当前分支</span><br><span class=\"line\">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class=\"line\">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class=\"line\">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class=\"line\">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class=\"line\">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class=\"line\">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class=\"line\">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class=\"line\">git mv README README2                                     # 重命名文件README为README2</span><br><span class=\"line\">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class=\"line\">git rebase</span><br><span class=\"line\">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br><span class=\"line\">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</span><br><span class=\"line\">git ls-files                                              # 列出git index包含的文件</span><br><span class=\"line\">git show-branch                                           # 图示当前分支历史</span><br><span class=\"line\">git show-branch --all                                     # 图示所有分支历史</span><br><span class=\"line\">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class=\"line\">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class=\"line\">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class=\"line\">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class=\"line\">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class=\"line\">git show HEAD@&#123;5&#125;</span><br><span class=\"line\">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class=\"line\">git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志</span><br><span class=\"line\">git show HEAD~3</span><br><span class=\"line\">git show -s --pretty=raw 2be7fcb476</span><br><span class=\"line\">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class=\"line\">git stash list                                            # 查看所有暂存</span><br><span class=\"line\">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class=\"line\">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class=\"line\">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class=\"line\">git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT</span><br><span class=\"line\">git gcgit</span><br><span class=\"line\">git fsck</span><br></pre></td></tr></table></figure>"},{"title":"Git常用命令","date":"2019-05-23T01:19:13.000Z","_content":"\n> Git（分布式版本控制系统）\n\n`Git`（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。\n\n更多命令查看帮助 `git help`\n\n<!-- more -->\n\n## 配置\n\n```shell\ngit config --global user.name \"xx\"\ngit config --global user.email \"xx@xx.com\"\n```\n\n## 常用命令\n\n```shell\ngit init\ngit clone\ngit pull\ngit push\ngit status\ngit add xyz\ngit add .\ngit commit -m xx\ngit commit --amend -m xx\ngit commit -am xx # add和commit\ngit rm xx\ngit rm -r *\ngit log \ngit log -1\ngit log --stat\ngit log -p -m\ngit show\ngit show HEAD\ngit show HEAD^\ngit checkout -b\ngit remote add origin http://xx.git\ngit push origin master \ngit reflog\ngit checkout HEAD@{1}\n```\n\n## 获取远程地址\n\n```shell\ngit remote -v\n```\n\n## 暂存\n\n```shell\n# 把所有没有提交的修改暂存\ngit stash\n# 查看所有暂存\ngit stash list \n# 获取暂存\ngit stash pop\n```\n\n## 丢弃本地修改\n\n```shell\n# 丢弃本地修改的所有文件（新增、删除、修改）\ngit checkout . && git clean -xdf\n# 本地所有修改的。没有的提交的，都返回到原来的状态\ngit checkout . \n\ngit reset --hard\n\n# 返回到某个节点，不保留修改\ngit reset --hard HASH \n# 返回到某个节点。保留修改\ngit reset --soft HASH\n\n# 返回到某个节点\ngit clean -df \ngit clean 参数\n    -n 显示 将要 删除的 文件 和  目录\n    -f 删除 文件\n    -df 删除 文件 和 目录\n```\n\n## 删除分支\n\n```shell\n# 查看分支\ngit branch -a\n\n# 删除本地分支\ngit branch -d <BranchName>\n# 删除远程分支\ngit push origin --delete <BranchName> \n```\n\n## Tag\n\n```shell\n# 删除本地tag\ngit tag -d <TagName>\n# 删除远程tag\ngit push origin :refs/tags/<TagName>\n\n# 查询远程tags\ngit ls-remote --tags origin  \n# 列出所有tag\ngit tag  \n#列出符合条件的tag（筛选作用）\ngit tag -l v1.* \n\n# 创建tag\ngit tag v1  \n# 创建含标注tag\ngit tag -a -m 'first version' v1  \n# 为之前提交打tag\ngit tag -a f1bb97a(commit id) \n\n# 推送所有本地tag到远程\ngit push --tags\n# 推送指定本地tag到远程\ngit push v1  \n\n# 拉取远程指定tag\ngit fetch origin v1 \n# 显示指定tag详细信息\ngit show v1 \n\n# 删除所有本地分支\ngit tag -l | xargs git tag -d  \n # 从远程拉取所有信息\ngit fetch origin --prune \n\n```\n\n## Git合并分支&取消合并\n\n```shell\n# 合并分支dev\ngit merge dev\n# 合并远程\ngit merge origin/master\n# 取消合并\ngit merge --abort \n```\n\n## 子模块\n\n```shell\ngit submodule update --init --recursive\n```\n\n## Git忽略文件\n\n创建`.gitignore`文件\n\n忽略文件的原则是：\n\n1. 忽略操作系统自动生成的文件，比如缩略图等；\n2. 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件；\n3. 就没必要放进版本库，比如Java编译产生的.class文件；\n4. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。\n\n例如：\n\n```git\n*.xcuserstate\nproject.xcworkspace\nxcuserdata\nUserInterfaceState.xcuserstate\nproject.xcworkspace/\nxcuserdata/\nUserInterface.xcuserstate\n\n.DS_Store\nxcuserdata/\n\n```\n\n如果存在文件，需要先清理缓存文件 git rm --cached xx\n或者找到文件后删除它，然后commit， push。\n\n## git代理\n\n```shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n查看一下gitconfig 文件 `open ~/.gitconfig`\n\n## 取消合并\n\n当我们使用git merge操作合并代码但还没add 时，若想取消这次合并，则使用\n\n```shell\ngit merge --abort\n```\n\n但，如果你已经add 了呢，那就git log一下，查看下提交历史操作查看下你想回退到的版本，复制下那个版本的commit id，然后\n\n```shell\ngit reset --hard xxxxxxx(你的commit id)\n```\n","source":"_posts/tools/Git常用命令.md","raw":"---\ntitle: Git常用命令\ndate: 2019-05-23 09:19:13\ntags: Git\ncategories: Git\n---\n\n> Git（分布式版本控制系统）\n\n`Git`（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。\n\n更多命令查看帮助 `git help`\n\n<!-- more -->\n\n## 配置\n\n```shell\ngit config --global user.name \"xx\"\ngit config --global user.email \"xx@xx.com\"\n```\n\n## 常用命令\n\n```shell\ngit init\ngit clone\ngit pull\ngit push\ngit status\ngit add xyz\ngit add .\ngit commit -m xx\ngit commit --amend -m xx\ngit commit -am xx # add和commit\ngit rm xx\ngit rm -r *\ngit log \ngit log -1\ngit log --stat\ngit log -p -m\ngit show\ngit show HEAD\ngit show HEAD^\ngit checkout -b\ngit remote add origin http://xx.git\ngit push origin master \ngit reflog\ngit checkout HEAD@{1}\n```\n\n## 获取远程地址\n\n```shell\ngit remote -v\n```\n\n## 暂存\n\n```shell\n# 把所有没有提交的修改暂存\ngit stash\n# 查看所有暂存\ngit stash list \n# 获取暂存\ngit stash pop\n```\n\n## 丢弃本地修改\n\n```shell\n# 丢弃本地修改的所有文件（新增、删除、修改）\ngit checkout . && git clean -xdf\n# 本地所有修改的。没有的提交的，都返回到原来的状态\ngit checkout . \n\ngit reset --hard\n\n# 返回到某个节点，不保留修改\ngit reset --hard HASH \n# 返回到某个节点。保留修改\ngit reset --soft HASH\n\n# 返回到某个节点\ngit clean -df \ngit clean 参数\n    -n 显示 将要 删除的 文件 和  目录\n    -f 删除 文件\n    -df 删除 文件 和 目录\n```\n\n## 删除分支\n\n```shell\n# 查看分支\ngit branch -a\n\n# 删除本地分支\ngit branch -d <BranchName>\n# 删除远程分支\ngit push origin --delete <BranchName> \n```\n\n## Tag\n\n```shell\n# 删除本地tag\ngit tag -d <TagName>\n# 删除远程tag\ngit push origin :refs/tags/<TagName>\n\n# 查询远程tags\ngit ls-remote --tags origin  \n# 列出所有tag\ngit tag  \n#列出符合条件的tag（筛选作用）\ngit tag -l v1.* \n\n# 创建tag\ngit tag v1  \n# 创建含标注tag\ngit tag -a -m 'first version' v1  \n# 为之前提交打tag\ngit tag -a f1bb97a(commit id) \n\n# 推送所有本地tag到远程\ngit push --tags\n# 推送指定本地tag到远程\ngit push v1  \n\n# 拉取远程指定tag\ngit fetch origin v1 \n# 显示指定tag详细信息\ngit show v1 \n\n# 删除所有本地分支\ngit tag -l | xargs git tag -d  \n # 从远程拉取所有信息\ngit fetch origin --prune \n\n```\n\n## Git合并分支&取消合并\n\n```shell\n# 合并分支dev\ngit merge dev\n# 合并远程\ngit merge origin/master\n# 取消合并\ngit merge --abort \n```\n\n## 子模块\n\n```shell\ngit submodule update --init --recursive\n```\n\n## Git忽略文件\n\n创建`.gitignore`文件\n\n忽略文件的原则是：\n\n1. 忽略操作系统自动生成的文件，比如缩略图等；\n2. 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件；\n3. 就没必要放进版本库，比如Java编译产生的.class文件；\n4. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。\n\n例如：\n\n```git\n*.xcuserstate\nproject.xcworkspace\nxcuserdata\nUserInterfaceState.xcuserstate\nproject.xcworkspace/\nxcuserdata/\nUserInterface.xcuserstate\n\n.DS_Store\nxcuserdata/\n\n```\n\n如果存在文件，需要先清理缓存文件 git rm --cached xx\n或者找到文件后删除它，然后commit， push。\n\n## git代理\n\n```shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n查看一下gitconfig 文件 `open ~/.gitconfig`\n\n## 取消合并\n\n当我们使用git merge操作合并代码但还没add 时，若想取消这次合并，则使用\n\n```shell\ngit merge --abort\n```\n\n但，如果你已经add 了呢，那就git log一下，查看下提交历史操作查看下你想回退到的版本，复制下那个版本的commit id，然后\n\n```shell\ngit reset --hard xxxxxxx(你的commit id)\n```\n","slug":"tools/Git常用命令","published":1,"updated":"2023-06-03T14:23:51.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zs002aj03635uhc980","content":"<blockquote>\n<p>Git（分布式版本控制系统）</p>\n</blockquote>\n<p><code>Git</code>（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p>\n<p>更多命令查看帮助 <code>git help</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xx&quot;</span><br><span class=\"line\">git config --global user.email &quot;xx@xx.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git clone</span><br><span class=\"line\">git pull</span><br><span class=\"line\">git push</span><br><span class=\"line\">git status</span><br><span class=\"line\">git add xyz</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m xx</span><br><span class=\"line\">git commit --amend -m xx</span><br><span class=\"line\">git commit -am xx # add和commit</span><br><span class=\"line\">git rm xx</span><br><span class=\"line\">git rm -r *</span><br><span class=\"line\">git log </span><br><span class=\"line\">git log -1</span><br><span class=\"line\">git log --stat</span><br><span class=\"line\">git log -p -m</span><br><span class=\"line\">git show</span><br><span class=\"line\">git show HEAD</span><br><span class=\"line\">git show HEAD^</span><br><span class=\"line\">git checkout -b</span><br><span class=\"line\">git remote add origin http://xx.git</span><br><span class=\"line\">git push origin master </span><br><span class=\"line\">git reflog</span><br><span class=\"line\">git checkout HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取远程地址\"><a href=\"#获取远程地址\" class=\"headerlink\" title=\"获取远程地址\"></a>获取远程地址</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"暂存\"><a href=\"#暂存\" class=\"headerlink\" title=\"暂存\"></a>暂存</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把所有没有提交的修改暂存</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看所有暂存</span></span><br><span class=\"line\">git stash list </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取暂存</span></span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"丢弃本地修改\"><a href=\"#丢弃本地修改\" class=\"headerlink\" title=\"丢弃本地修改\"></a>丢弃本地修改</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 丢弃本地修改的所有文件（新增、删除、修改）</span></span><br><span class=\"line\">git checkout . &amp;&amp; git clean -xdf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 本地所有修改的。没有的提交的，都返回到原来的状态</span></span><br><span class=\"line\">git checkout . </span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回到某个节点，不保留修改</span></span><br><span class=\"line\">git reset --hard HASH </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回到某个节点。保留修改</span></span><br><span class=\"line\">git reset --soft HASH</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回到某个节点</span></span><br><span class=\"line\">git clean -df </span><br><span class=\"line\">git clean 参数</span><br><span class=\"line\">    -n 显示 将要 删除的 文件 和  目录</span><br><span class=\"line\">    -f 删除 文件</span><br><span class=\"line\">    -df 删除 文件 和 目录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看分支</span></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地分支</span></span><br><span class=\"line\">git branch -d &lt;BranchName&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程分支</span></span><br><span class=\"line\">git push origin --delete &lt;BranchName&gt; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地tag</span></span><br><span class=\"line\">git tag -d &lt;TagName&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程tag</span></span><br><span class=\"line\">git push origin :refs/tags/&lt;TagName&gt;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询远程tags</span></span><br><span class=\"line\">git ls-remote --tags origin  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有tag</span></span><br><span class=\"line\">git tag  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">列出符合条件的tag（筛选作用）</span></span><br><span class=\"line\">git tag -l v1.* </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建tag</span></span><br><span class=\"line\">git tag v1  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建含标注tag</span></span><br><span class=\"line\">git tag -a -m &#x27;first version&#x27; v1  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 为之前提交打tag</span></span><br><span class=\"line\">git tag -a f1bb97a(commit id) </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送所有本地tag到远程</span></span><br><span class=\"line\">git push --tags</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送指定本地tag到远程</span></span><br><span class=\"line\">git push v1  </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拉取远程指定tag</span></span><br><span class=\"line\">git fetch origin v1 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定tag详细信息</span></span><br><span class=\"line\">git show v1 </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除所有本地分支</span></span><br><span class=\"line\">git tag -l | xargs git tag -d  </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 从远程拉取所有信息</span></span><br><span class=\"line\">git fetch origin --prune </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git合并分支-amp-取消合并\"><a href=\"#Git合并分支-amp-取消合并\" class=\"headerlink\" title=\"Git合并分支&amp;取消合并\"></a>Git合并分支&amp;取消合并</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并分支dev</span></span><br><span class=\"line\">git merge dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并远程</span></span><br><span class=\"line\">git merge origin/master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 取消合并</span></span><br><span class=\"line\">git merge --abort </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子模块\"><a href=\"#子模块\" class=\"headerlink\" title=\"子模块\"></a>子模块</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git忽略文件\"><a href=\"#Git忽略文件\" class=\"headerlink\" title=\"Git忽略文件\"></a>Git忽略文件</h2><p>创建<code>.gitignore</code>文件</p>\n<p>忽略文件的原则是：</p>\n<ol>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件；</li>\n<li>就没必要放进版本库，比如Java编译产生的.class文件；</li>\n<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.xcuserstate</span><br><span class=\"line\">project.xcworkspace</span><br><span class=\"line\">xcuserdata</span><br><span class=\"line\">UserInterfaceState.xcuserstate</span><br><span class=\"line\">project.xcworkspace/</span><br><span class=\"line\">xcuserdata/</span><br><span class=\"line\">UserInterface.xcuserstate</span><br><span class=\"line\"></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">xcuserdata/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果存在文件，需要先清理缓存文件 git rm –cached xx<br>或者找到文件后删除它，然后commit， push。</p>\n<h2 id=\"git代理\"><a href=\"#git代理\" class=\"headerlink\" title=\"git代理\"></a>git代理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>查看一下gitconfig 文件 <code>open ~/.gitconfig</code></p>\n<h2 id=\"取消合并\"><a href=\"#取消合并\" class=\"headerlink\" title=\"取消合并\"></a>取消合并</h2><p>当我们使用git merge操作合并代码但还没add 时，若想取消这次合并，则使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n<p>但，如果你已经add 了呢，那就git log一下，查看下提交历史操作查看下你想回退到的版本，复制下那个版本的commit id，然后</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard xxxxxxx(你的commit id)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Git（分布式版本控制系统）</p>\n</blockquote>\n<p><code>Git</code>（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p>\n<p>更多命令查看帮助 <code>git help</code></p>","more":"<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xx&quot;</span><br><span class=\"line\">git config --global user.email &quot;xx@xx.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git clone</span><br><span class=\"line\">git pull</span><br><span class=\"line\">git push</span><br><span class=\"line\">git status</span><br><span class=\"line\">git add xyz</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m xx</span><br><span class=\"line\">git commit --amend -m xx</span><br><span class=\"line\">git commit -am xx # add和commit</span><br><span class=\"line\">git rm xx</span><br><span class=\"line\">git rm -r *</span><br><span class=\"line\">git log </span><br><span class=\"line\">git log -1</span><br><span class=\"line\">git log --stat</span><br><span class=\"line\">git log -p -m</span><br><span class=\"line\">git show</span><br><span class=\"line\">git show HEAD</span><br><span class=\"line\">git show HEAD^</span><br><span class=\"line\">git checkout -b</span><br><span class=\"line\">git remote add origin http://xx.git</span><br><span class=\"line\">git push origin master </span><br><span class=\"line\">git reflog</span><br><span class=\"line\">git checkout HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取远程地址\"><a href=\"#获取远程地址\" class=\"headerlink\" title=\"获取远程地址\"></a>获取远程地址</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"暂存\"><a href=\"#暂存\" class=\"headerlink\" title=\"暂存\"></a>暂存</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把所有没有提交的修改暂存</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看所有暂存</span></span><br><span class=\"line\">git stash list </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取暂存</span></span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"丢弃本地修改\"><a href=\"#丢弃本地修改\" class=\"headerlink\" title=\"丢弃本地修改\"></a>丢弃本地修改</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 丢弃本地修改的所有文件（新增、删除、修改）</span></span><br><span class=\"line\">git checkout . &amp;&amp; git clean -xdf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 本地所有修改的。没有的提交的，都返回到原来的状态</span></span><br><span class=\"line\">git checkout . </span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回到某个节点，不保留修改</span></span><br><span class=\"line\">git reset --hard HASH </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回到某个节点。保留修改</span></span><br><span class=\"line\">git reset --soft HASH</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 返回到某个节点</span></span><br><span class=\"line\">git clean -df </span><br><span class=\"line\">git clean 参数</span><br><span class=\"line\">    -n 显示 将要 删除的 文件 和  目录</span><br><span class=\"line\">    -f 删除 文件</span><br><span class=\"line\">    -df 删除 文件 和 目录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看分支</span></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地分支</span></span><br><span class=\"line\">git branch -d &lt;BranchName&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程分支</span></span><br><span class=\"line\">git push origin --delete &lt;BranchName&gt; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除本地tag</span></span><br><span class=\"line\">git tag -d &lt;TagName&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除远程tag</span></span><br><span class=\"line\">git push origin :refs/tags/&lt;TagName&gt;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询远程tags</span></span><br><span class=\"line\">git ls-remote --tags origin  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有tag</span></span><br><span class=\"line\">git tag  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">列出符合条件的tag（筛选作用）</span></span><br><span class=\"line\">git tag -l v1.* </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建tag</span></span><br><span class=\"line\">git tag v1  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建含标注tag</span></span><br><span class=\"line\">git tag -a -m &#x27;first version&#x27; v1  </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 为之前提交打tag</span></span><br><span class=\"line\">git tag -a f1bb97a(commit id) </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送所有本地tag到远程</span></span><br><span class=\"line\">git push --tags</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 推送指定本地tag到远程</span></span><br><span class=\"line\">git push v1  </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拉取远程指定tag</span></span><br><span class=\"line\">git fetch origin v1 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定tag详细信息</span></span><br><span class=\"line\">git show v1 </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除所有本地分支</span></span><br><span class=\"line\">git tag -l | xargs git tag -d  </span><br><span class=\"line\"><span class=\"meta\"> #</span><span class=\"bash\"> 从远程拉取所有信息</span></span><br><span class=\"line\">git fetch origin --prune </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git合并分支-amp-取消合并\"><a href=\"#Git合并分支-amp-取消合并\" class=\"headerlink\" title=\"Git合并分支&amp;取消合并\"></a>Git合并分支&amp;取消合并</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并分支dev</span></span><br><span class=\"line\">git merge dev</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并远程</span></span><br><span class=\"line\">git merge origin/master</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 取消合并</span></span><br><span class=\"line\">git merge --abort </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子模块\"><a href=\"#子模块\" class=\"headerlink\" title=\"子模块\"></a>子模块</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git忽略文件\"><a href=\"#Git忽略文件\" class=\"headerlink\" title=\"Git忽略文件\"></a>Git忽略文件</h2><p>创建<code>.gitignore</code>文件</p>\n<p>忽略文件的原则是：</p>\n<ol>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件；</li>\n<li>就没必要放进版本库，比如Java编译产生的.class文件；</li>\n<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.xcuserstate</span><br><span class=\"line\">project.xcworkspace</span><br><span class=\"line\">xcuserdata</span><br><span class=\"line\">UserInterfaceState.xcuserstate</span><br><span class=\"line\">project.xcworkspace/</span><br><span class=\"line\">xcuserdata/</span><br><span class=\"line\">UserInterface.xcuserstate</span><br><span class=\"line\"></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">xcuserdata/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果存在文件，需要先清理缓存文件 git rm –cached xx<br>或者找到文件后删除它，然后commit， push。</p>\n<h2 id=\"git代理\"><a href=\"#git代理\" class=\"headerlink\" title=\"git代理\"></a>git代理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>查看一下gitconfig 文件 <code>open ~/.gitconfig</code></p>\n<h2 id=\"取消合并\"><a href=\"#取消合并\" class=\"headerlink\" title=\"取消合并\"></a>取消合并</h2><p>当我们使用git merge操作合并代码但还没add 时，若想取消这次合并，则使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n<p>但，如果你已经add 了呢，那就git log一下，查看下提交历史操作查看下你想回退到的版本，复制下那个版本的commit id，然后</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard xxxxxxx(你的commit id)</span><br></pre></td></tr></table></figure>"},{"title":"CentOS6安装Python3.6环境","date":"2019-08-09T03:07:50.000Z","_content":"\n> CentOS6.5安装python3.6.9\n\nCentOS6安装python3.7，会出现问题：pip is configured with locations that require TLS/SSL\n\n系统版本centos6.5，其中openssl的版本为OpenSSL 1.0.1e-fips 11 Feb 2013,而python3.7需要的openssl的版本为1.0.2或者1.1.x,需要对openssl进行升级，并重新编译python3.7.0。yum 安装的openssl 版本都比较低。\n\n<!-- more -->\n\n解决办法可参考地址：<https://www.cnblogs.com/khstudy/p/11102633.html>\n嫌麻烦，安装python3.6.9\n\n## 1、安装Python前的库环境\n\n```shell\nyum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y\nyum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel readline-devel.x86_64 -y\n```\n\n## 2、下载Python源码包\n\n```shell\nwget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n\n// wget: command not found 安装wget\nyum -y install wget\n```\n\n## 3、 安装Python\n\n```shell\ntar zxvf Python-3.6.9.tgz\ncd Python-3.6.9\n./configure --prefix=/usr/local/python3\nmake && make install\n```\n\n## 4、设置软连接\n\n```shell\nln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3\n```\n\n## 5、查看python3版本以及pip3版本\n\n```shell\npython3\nexit() // 退出python\npip3 -V\n```\n\n## 6、更新pip3版本\n\n```shell\npip3 install --upgrade pip\n```\n\n**注意**：Centos系统中自带Python2，不过没有安装pip `centos -bash: pip: command not found`\n\n```shell\n// 安装EPEL\nyum -y install epel-release\n// 启用EPEL\nyum install -y yum-utils && yum-config-manager --enable epel\n// 安装pip\nyum install -y python-pip\n// 更新\npip install --upgrade pip\n```\n\n## 卸载python3\n\n```shell\nrpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps       // 卸载pyhton3\nwhereis python3 |xargs rm -frv           // 删除所有残余文件\nwhereis   python       // 查看现有安装的python\n```\n\n## 安装Django\n\n```shell\npip3 install django\n\n// 给Django设置软连接\nln -s /usr/local/python3/bin/django-admin /usr/local/bin/django-admin\n```\n\n// 出现错误：SQLite 3.8.3 or later is required\n解决方法1：给django降级\n\n```shell\n卸载django:   pip3 uninstall django\n安装低版本：   pip3 install django==2.1.8\n```\n\n解决方法2：升级SQLite\n\n```shell\n// 查看版本\nsqlite3 --version\n```\n\n还是嫌麻烦选择降级，降级后又出现错误：`django.db.utils.NotSupportedError: URIs not supported`\n\n。。。。。。还是老老实实升级吧\n\n参考地址：<https://blog.csdn.net/qq_39969226/article/details/92218635>\n\n## 安装git\n\n```shell\nyum install git -y\n```\n\n## 安装MySQL\n\n### 1、查看是否安装了MySQL\n\n```shell\nrpm -qa | grep mysql\n```\n\n### 2、删除原来的数据库\n\n```shell\nrpm -e   mysql; // 一般删除，如果提示依赖的其他文件，则不能删除\nrpm -e  --nodeps mysql; // 强力删除，如果有其他依赖文件，则可以对其进行强力删除\n```\n\n### 3、mysql安装\n\n```shell\n// 将mysql,mysql-server,mysql-devel都安装好\nyum install -y mysql-server mysql mysql-devel\n```\n\n### 4、数据库安装成功之后，查看mysql-server的命令\n\n```shell\nrpm  -qi mysql-server\n```\n\n### 5、启动mysql服务\n\n```shell\nservice mysqld start\n```\n\n## MySql相关命令\n\n```shell\n// 查看mysql数据库服务是否设置成开机自己启动\nchkconfig --list  | grep mysqld\n\n// 设置mysql数据库服务开机自动启动\nchkconfig  mysqld on\n\n// 给root账号设置密码为 root\nmysqladmin -u root  password 'root';\n\n// 登录数据库\nmysql -u root -p\n\n```\n\n## CentOS6 部署Django+Nginx+uwsgi\n\n参考：<https://www.cnblogs.com/Black-rainbow/articles/9455927.html>\n     <https://www.cnblogs.com/khstudy/p/11102633.html>\n","source":"_posts/python/CentOS6安装Python3环境.md","raw":"---\ntitle: CentOS6安装Python3.6环境\ndate: 2019-08-09 11:07:50\ntags: [Python CentOS6]\ncategories: Python\n---\n\n> CentOS6.5安装python3.6.9\n\nCentOS6安装python3.7，会出现问题：pip is configured with locations that require TLS/SSL\n\n系统版本centos6.5，其中openssl的版本为OpenSSL 1.0.1e-fips 11 Feb 2013,而python3.7需要的openssl的版本为1.0.2或者1.1.x,需要对openssl进行升级，并重新编译python3.7.0。yum 安装的openssl 版本都比较低。\n\n<!-- more -->\n\n解决办法可参考地址：<https://www.cnblogs.com/khstudy/p/11102633.html>\n嫌麻烦，安装python3.6.9\n\n## 1、安装Python前的库环境\n\n```shell\nyum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y\nyum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel readline-devel.x86_64 -y\n```\n\n## 2、下载Python源码包\n\n```shell\nwget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz\n\n// wget: command not found 安装wget\nyum -y install wget\n```\n\n## 3、 安装Python\n\n```shell\ntar zxvf Python-3.6.9.tgz\ncd Python-3.6.9\n./configure --prefix=/usr/local/python3\nmake && make install\n```\n\n## 4、设置软连接\n\n```shell\nln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3\n```\n\n## 5、查看python3版本以及pip3版本\n\n```shell\npython3\nexit() // 退出python\npip3 -V\n```\n\n## 6、更新pip3版本\n\n```shell\npip3 install --upgrade pip\n```\n\n**注意**：Centos系统中自带Python2，不过没有安装pip `centos -bash: pip: command not found`\n\n```shell\n// 安装EPEL\nyum -y install epel-release\n// 启用EPEL\nyum install -y yum-utils && yum-config-manager --enable epel\n// 安装pip\nyum install -y python-pip\n// 更新\npip install --upgrade pip\n```\n\n## 卸载python3\n\n```shell\nrpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps       // 卸载pyhton3\nwhereis python3 |xargs rm -frv           // 删除所有残余文件\nwhereis   python       // 查看现有安装的python\n```\n\n## 安装Django\n\n```shell\npip3 install django\n\n// 给Django设置软连接\nln -s /usr/local/python3/bin/django-admin /usr/local/bin/django-admin\n```\n\n// 出现错误：SQLite 3.8.3 or later is required\n解决方法1：给django降级\n\n```shell\n卸载django:   pip3 uninstall django\n安装低版本：   pip3 install django==2.1.8\n```\n\n解决方法2：升级SQLite\n\n```shell\n// 查看版本\nsqlite3 --version\n```\n\n还是嫌麻烦选择降级，降级后又出现错误：`django.db.utils.NotSupportedError: URIs not supported`\n\n。。。。。。还是老老实实升级吧\n\n参考地址：<https://blog.csdn.net/qq_39969226/article/details/92218635>\n\n## 安装git\n\n```shell\nyum install git -y\n```\n\n## 安装MySQL\n\n### 1、查看是否安装了MySQL\n\n```shell\nrpm -qa | grep mysql\n```\n\n### 2、删除原来的数据库\n\n```shell\nrpm -e   mysql; // 一般删除，如果提示依赖的其他文件，则不能删除\nrpm -e  --nodeps mysql; // 强力删除，如果有其他依赖文件，则可以对其进行强力删除\n```\n\n### 3、mysql安装\n\n```shell\n// 将mysql,mysql-server,mysql-devel都安装好\nyum install -y mysql-server mysql mysql-devel\n```\n\n### 4、数据库安装成功之后，查看mysql-server的命令\n\n```shell\nrpm  -qi mysql-server\n```\n\n### 5、启动mysql服务\n\n```shell\nservice mysqld start\n```\n\n## MySql相关命令\n\n```shell\n// 查看mysql数据库服务是否设置成开机自己启动\nchkconfig --list  | grep mysqld\n\n// 设置mysql数据库服务开机自动启动\nchkconfig  mysqld on\n\n// 给root账号设置密码为 root\nmysqladmin -u root  password 'root';\n\n// 登录数据库\nmysql -u root -p\n\n```\n\n## CentOS6 部署Django+Nginx+uwsgi\n\n参考：<https://www.cnblogs.com/Black-rainbow/articles/9455927.html>\n     <https://www.cnblogs.com/khstudy/p/11102633.html>\n","slug":"python/CentOS6安装Python3环境","published":1,"updated":"2021-06-22T07:14:19.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zt002dj036b0y63i20","content":"<blockquote>\n<p>CentOS6.5安装python3.6.9</p>\n</blockquote>\n<p>CentOS6安装python3.7，会出现问题：pip is configured with locations that require TLS/SSL</p>\n<p>系统版本centos6.5，其中openssl的版本为OpenSSL 1.0.1e-fips 11 Feb 2013,而python3.7需要的openssl的版本为1.0.2或者1.1.x,需要对openssl进行升级，并重新编译python3.7.0。yum 安装的openssl 版本都比较低。</p>\n<span id=\"more\"></span>\n\n<p>解决办法可参考地址：<a href=\"https://www.cnblogs.com/khstudy/p/11102633.html\">https://www.cnblogs.com/khstudy/p/11102633.html</a><br>嫌麻烦，安装python3.6.9</p>\n<h2 id=\"1、安装Python前的库环境\"><a href=\"#1、安装Python前的库环境\" class=\"headerlink\" title=\"1、安装Python前的库环境\"></a>1、安装Python前的库环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y</span><br><span class=\"line\">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel readline-devel.x86_64 -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、下载Python源码包\"><a href=\"#2、下载Python源码包\" class=\"headerlink\" title=\"2、下载Python源码包\"></a>2、下载Python源码包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">// wget: command not found 安装wget</span><br><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、-安装Python\"><a href=\"#3、-安装Python\" class=\"headerlink\" title=\"3、 安装Python\"></a>3、 安装Python</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf Python-3.6.9.tgz</span><br><span class=\"line\">cd Python-3.6.9</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、设置软连接\"><a href=\"#4、设置软连接\" class=\"headerlink\" title=\"4、设置软连接\"></a>4、设置软连接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、查看python3版本以及pip3版本\"><a href=\"#5、查看python3版本以及pip3版本\" class=\"headerlink\" title=\"5、查看python3版本以及pip3版本\"></a>5、查看python3版本以及pip3版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3</span><br><span class=\"line\">exit() // 退出python</span><br><span class=\"line\">pip3 -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、更新pip3版本\"><a href=\"#6、更新pip3版本\" class=\"headerlink\" title=\"6、更新pip3版本\"></a>6、更新pip3版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：Centos系统中自带Python2，不过没有安装pip <code>centos -bash: pip: command not found</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装EPEL</span><br><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\">// 启用EPEL</span><br><span class=\"line\">yum install -y yum-utils &amp;&amp; yum-config-manager --enable epel</span><br><span class=\"line\">// 安装pip</span><br><span class=\"line\">yum install -y python-pip</span><br><span class=\"line\">// 更新</span><br><span class=\"line\">pip install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"卸载python3\"><a href=\"#卸载python3\" class=\"headerlink\" title=\"卸载python3\"></a>卸载python3</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps       // 卸载pyhton3</span><br><span class=\"line\">whereis python3 |xargs rm -frv           // 删除所有残余文件</span><br><span class=\"line\">whereis   python       // 查看现有安装的python</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install django</span><br><span class=\"line\"></span><br><span class=\"line\">// 给Django设置软连接</span><br><span class=\"line\">ln -s /usr/local/python3/bin/django-admin /usr/local/bin/django-admin</span><br></pre></td></tr></table></figure>\n\n<p>// 出现错误：SQLite 3.8.3 or later is required<br>解决方法1：给django降级</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">卸载django:   pip3 uninstall django</span><br><span class=\"line\">安装低版本：   pip3 install django==2.1.8</span><br></pre></td></tr></table></figure>\n\n<p>解决方法2：升级SQLite</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看版本</span><br><span class=\"line\">sqlite3 --version</span><br></pre></td></tr></table></figure>\n\n<p>还是嫌麻烦选择降级，降级后又出现错误：<code>django.db.utils.NotSupportedError: URIs not supported</code></p>\n<p>。。。。。。还是老老实实升级吧</p>\n<p>参考地址：<a href=\"https://blog.csdn.net/qq_39969226/article/details/92218635\">https://blog.csdn.net/qq_39969226/article/details/92218635</a></p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><h3 id=\"1、查看是否安装了MySQL\"><a href=\"#1、查看是否安装了MySQL\" class=\"headerlink\" title=\"1、查看是否安装了MySQL\"></a>1、查看是否安装了MySQL</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、删除原来的数据库\"><a href=\"#2、删除原来的数据库\" class=\"headerlink\" title=\"2、删除原来的数据库\"></a>2、删除原来的数据库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e   mysql; // 一般删除，如果提示依赖的其他文件，则不能删除</span><br><span class=\"line\">rpm -e  --nodeps mysql; // 强力删除，如果有其他依赖文件，则可以对其进行强力删除</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、mysql安装\"><a href=\"#3、mysql安装\" class=\"headerlink\" title=\"3、mysql安装\"></a>3、mysql安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将mysql,mysql-server,mysql-devel都安装好</span><br><span class=\"line\">yum install -y mysql-server mysql mysql-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、数据库安装成功之后，查看mysql-server的命令\"><a href=\"#4、数据库安装成功之后，查看mysql-server的命令\" class=\"headerlink\" title=\"4、数据库安装成功之后，查看mysql-server的命令\"></a>4、数据库安装成功之后，查看mysql-server的命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm  -qi mysql-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、启动mysql服务\"><a href=\"#5、启动mysql服务\" class=\"headerlink\" title=\"5、启动mysql服务\"></a>5、启动mysql服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySql相关命令\"><a href=\"#MySql相关命令\" class=\"headerlink\" title=\"MySql相关命令\"></a>MySql相关命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看mysql数据库服务是否设置成开机自己启动</span><br><span class=\"line\">chkconfig --list  | grep mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置mysql数据库服务开机自动启动</span><br><span class=\"line\">chkconfig  mysqld on</span><br><span class=\"line\"></span><br><span class=\"line\">// 给root账号设置密码为 root</span><br><span class=\"line\">mysqladmin -u root  password &#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 登录数据库</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CentOS6-部署Django-Nginx-uwsgi\"><a href=\"#CentOS6-部署Django-Nginx-uwsgi\" class=\"headerlink\" title=\"CentOS6 部署Django+Nginx+uwsgi\"></a>CentOS6 部署Django+Nginx+uwsgi</h2><p>参考：<a href=\"https://www.cnblogs.com/Black-rainbow/articles/9455927.html\">https://www.cnblogs.com/Black-rainbow/articles/9455927.html</a><br>     <a href=\"https://www.cnblogs.com/khstudy/p/11102633.html\">https://www.cnblogs.com/khstudy/p/11102633.html</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>CentOS6.5安装python3.6.9</p>\n</blockquote>\n<p>CentOS6安装python3.7，会出现问题：pip is configured with locations that require TLS/SSL</p>\n<p>系统版本centos6.5，其中openssl的版本为OpenSSL 1.0.1e-fips 11 Feb 2013,而python3.7需要的openssl的版本为1.0.2或者1.1.x,需要对openssl进行升级，并重新编译python3.7.0。yum 安装的openssl 版本都比较低。</p>","more":"<p>解决办法可参考地址：<a href=\"https://www.cnblogs.com/khstudy/p/11102633.html\">https://www.cnblogs.com/khstudy/p/11102633.html</a><br>嫌麻烦，安装python3.6.9</p>\n<h2 id=\"1、安装Python前的库环境\"><a href=\"#1、安装Python前的库环境\" class=\"headerlink\" title=\"1、安装Python前的库环境\"></a>1、安装Python前的库环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y</span><br><span class=\"line\">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel readline-devel.x86_64 -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、下载Python源码包\"><a href=\"#2、下载Python源码包\" class=\"headerlink\" title=\"2、下载Python源码包\"></a>2、下载Python源码包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">// wget: command not found 安装wget</span><br><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、-安装Python\"><a href=\"#3、-安装Python\" class=\"headerlink\" title=\"3、 安装Python\"></a>3、 安装Python</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf Python-3.6.9.tgz</span><br><span class=\"line\">cd Python-3.6.9</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、设置软连接\"><a href=\"#4、设置软连接\" class=\"headerlink\" title=\"4、设置软连接\"></a>4、设置软连接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、查看python3版本以及pip3版本\"><a href=\"#5、查看python3版本以及pip3版本\" class=\"headerlink\" title=\"5、查看python3版本以及pip3版本\"></a>5、查看python3版本以及pip3版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3</span><br><span class=\"line\">exit() // 退出python</span><br><span class=\"line\">pip3 -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、更新pip3版本\"><a href=\"#6、更新pip3版本\" class=\"headerlink\" title=\"6、更新pip3版本\"></a>6、更新pip3版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：Centos系统中自带Python2，不过没有安装pip <code>centos -bash: pip: command not found</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装EPEL</span><br><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\">// 启用EPEL</span><br><span class=\"line\">yum install -y yum-utils &amp;&amp; yum-config-manager --enable epel</span><br><span class=\"line\">// 安装pip</span><br><span class=\"line\">yum install -y python-pip</span><br><span class=\"line\">// 更新</span><br><span class=\"line\">pip install --upgrade pip</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"卸载python3\"><a href=\"#卸载python3\" class=\"headerlink\" title=\"卸载python3\"></a>卸载python3</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps       // 卸载pyhton3</span><br><span class=\"line\">whereis python3 |xargs rm -frv           // 删除所有残余文件</span><br><span class=\"line\">whereis   python       // 查看现有安装的python</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install django</span><br><span class=\"line\"></span><br><span class=\"line\">// 给Django设置软连接</span><br><span class=\"line\">ln -s /usr/local/python3/bin/django-admin /usr/local/bin/django-admin</span><br></pre></td></tr></table></figure>\n\n<p>// 出现错误：SQLite 3.8.3 or later is required<br>解决方法1：给django降级</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">卸载django:   pip3 uninstall django</span><br><span class=\"line\">安装低版本：   pip3 install django==2.1.8</span><br></pre></td></tr></table></figure>\n\n<p>解决方法2：升级SQLite</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看版本</span><br><span class=\"line\">sqlite3 --version</span><br></pre></td></tr></table></figure>\n\n<p>还是嫌麻烦选择降级，降级后又出现错误：<code>django.db.utils.NotSupportedError: URIs not supported</code></p>\n<p>。。。。。。还是老老实实升级吧</p>\n<p>参考地址：<a href=\"https://blog.csdn.net/qq_39969226/article/details/92218635\">https://blog.csdn.net/qq_39969226/article/details/92218635</a></p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><h3 id=\"1、查看是否安装了MySQL\"><a href=\"#1、查看是否安装了MySQL\" class=\"headerlink\" title=\"1、查看是否安装了MySQL\"></a>1、查看是否安装了MySQL</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、删除原来的数据库\"><a href=\"#2、删除原来的数据库\" class=\"headerlink\" title=\"2、删除原来的数据库\"></a>2、删除原来的数据库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e   mysql; // 一般删除，如果提示依赖的其他文件，则不能删除</span><br><span class=\"line\">rpm -e  --nodeps mysql; // 强力删除，如果有其他依赖文件，则可以对其进行强力删除</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、mysql安装\"><a href=\"#3、mysql安装\" class=\"headerlink\" title=\"3、mysql安装\"></a>3、mysql安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将mysql,mysql-server,mysql-devel都安装好</span><br><span class=\"line\">yum install -y mysql-server mysql mysql-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、数据库安装成功之后，查看mysql-server的命令\"><a href=\"#4、数据库安装成功之后，查看mysql-server的命令\" class=\"headerlink\" title=\"4、数据库安装成功之后，查看mysql-server的命令\"></a>4、数据库安装成功之后，查看mysql-server的命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm  -qi mysql-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、启动mysql服务\"><a href=\"#5、启动mysql服务\" class=\"headerlink\" title=\"5、启动mysql服务\"></a>5、启动mysql服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySql相关命令\"><a href=\"#MySql相关命令\" class=\"headerlink\" title=\"MySql相关命令\"></a>MySql相关命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看mysql数据库服务是否设置成开机自己启动</span><br><span class=\"line\">chkconfig --list  | grep mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置mysql数据库服务开机自动启动</span><br><span class=\"line\">chkconfig  mysqld on</span><br><span class=\"line\"></span><br><span class=\"line\">// 给root账号设置密码为 root</span><br><span class=\"line\">mysqladmin -u root  password &#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 登录数据库</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CentOS6-部署Django-Nginx-uwsgi\"><a href=\"#CentOS6-部署Django-Nginx-uwsgi\" class=\"headerlink\" title=\"CentOS6 部署Django+Nginx+uwsgi\"></a>CentOS6 部署Django+Nginx+uwsgi</h2><p>参考：<a href=\"https://www.cnblogs.com/Black-rainbow/articles/9455927.html\">https://www.cnblogs.com/Black-rainbow/articles/9455927.html</a><br>     <a href=\"https://www.cnblogs.com/khstudy/p/11102633.html\">https://www.cnblogs.com/khstudy/p/11102633.html</a></p>"},{"title":"Vim配置及插件安装(Mac)","date":"2020-05-23T01:19:13.000Z","_content":"\n> VIM（Unix及类Unix系统文本编辑器）\n\n`Vim`是一个类似于`Vi`的著名的功能强大、高度可定制的文本编辑器 ，在`Vi`的基础上改进和增加了很多特性。 `VIM`是自由软件\n\n<!-- more -->\n\n## 1 macOS（Linux）包管理器 `Homebrew`\n\n安装命令\n\n```brew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\n```\n\n## 2 安装 vim\n\n```brew\nbrew install wget\n```\n\n## 3 建立并编辑配置文件\n\n```brew\ncd ~\ntouch .vimrc\nvim .vimrc\n```\n\n编辑配置文件为：\n\n```vim\n\" 输入:make编译并运行\nset makeprg=clear;gcc\\ %\\ &&\\ ./a.out\n\n\" 当前行高亮\nau WinLeave * set nocursorline nocursorcolumn\nau WinEnter * set cursorline\nset cursorline\n\ncolorscheme default       \" 颜色主题\nsyntax enable             \" 启用语法分析着色\nset tabstop=4             \" 设定Tab表示的空格数\nset softtabstop=4         \" 设定输入Tab表示的空格数\nset expandtab             \" 将Tab视为若干空格\nset backspace=2           \" 设置退格键可用\nset number                \" 显示行号\nset showcmd               \" 右下角显示待补全命令\nset hlsearch              \" 搜索字符串时高亮所有结果,:nohlsearch取消高亮\n```\n\n`:wq` 保存退出\n\n## 4 安装 Vundle（Vim 插件管理器）\n\n```git\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n\n// 编辑文件\nvim .vimrc\n```\n\n在配置文件开头添加如下配置：\n\n```vim\n\"---START OF VUNDLE---\nset nocompatible\nfiletype off\n\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\nPlugin 'VundleVim/Vundle.vim'\n\" Plugins start\n\n\" Plugins end\ncall vundle#end()\nfiletype plugin indent on\n\" ---END OF VUNDLE---\n```\n\n## 5 Vundle 安装插件\n\n在配置文件 \"Plugins start 和 end 注释之间加入：\n\n```vim\nPlugin '[插件名]'\n\n:wq\nvim .vimrc\n:PluginInstall\n```\n\n## 6 代码自动补全 YouCompleteMe 安装\n\n```brew\nbrew install cmake\n```\n\n方法一 使用 Vundle 安装\n\n然后在 `/.vimrc`文件中加入\n\n```vim\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py'}\n\n// Go support\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py --go-completer'}\n// 全部安装\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py --all'}\n```\n\n然后执行`:PluginInstall`，自动安装\n\n**注**： `https://www.jianshu.com/p/edc4bbed92ca`\n\n方法二\n下载 ycm 源码包\n\n```git\ngit clone https://github.com/Valloric/YouCompleteMe.git\n\n// YouCompleteMe/目录下执行命令\ncd YouCompleteMe\npython install.py\n```\n","source":"_posts/vim/Vim配置及插件安装(Mac).md","raw":"---\ntitle: Vim配置及插件安装(Mac)\ndate: 2020-05-23 09:19:13\ntags: [Mac, Vim]\ncategories: Vim\n---\n\n> VIM（Unix及类Unix系统文本编辑器）\n\n`Vim`是一个类似于`Vi`的著名的功能强大、高度可定制的文本编辑器 ，在`Vi`的基础上改进和增加了很多特性。 `VIM`是自由软件\n\n<!-- more -->\n\n## 1 macOS（Linux）包管理器 `Homebrew`\n\n安装命令\n\n```brew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\n```\n\n## 2 安装 vim\n\n```brew\nbrew install wget\n```\n\n## 3 建立并编辑配置文件\n\n```brew\ncd ~\ntouch .vimrc\nvim .vimrc\n```\n\n编辑配置文件为：\n\n```vim\n\" 输入:make编译并运行\nset makeprg=clear;gcc\\ %\\ &&\\ ./a.out\n\n\" 当前行高亮\nau WinLeave * set nocursorline nocursorcolumn\nau WinEnter * set cursorline\nset cursorline\n\ncolorscheme default       \" 颜色主题\nsyntax enable             \" 启用语法分析着色\nset tabstop=4             \" 设定Tab表示的空格数\nset softtabstop=4         \" 设定输入Tab表示的空格数\nset expandtab             \" 将Tab视为若干空格\nset backspace=2           \" 设置退格键可用\nset number                \" 显示行号\nset showcmd               \" 右下角显示待补全命令\nset hlsearch              \" 搜索字符串时高亮所有结果,:nohlsearch取消高亮\n```\n\n`:wq` 保存退出\n\n## 4 安装 Vundle（Vim 插件管理器）\n\n```git\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n\n// 编辑文件\nvim .vimrc\n```\n\n在配置文件开头添加如下配置：\n\n```vim\n\"---START OF VUNDLE---\nset nocompatible\nfiletype off\n\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\nPlugin 'VundleVim/Vundle.vim'\n\" Plugins start\n\n\" Plugins end\ncall vundle#end()\nfiletype plugin indent on\n\" ---END OF VUNDLE---\n```\n\n## 5 Vundle 安装插件\n\n在配置文件 \"Plugins start 和 end 注释之间加入：\n\n```vim\nPlugin '[插件名]'\n\n:wq\nvim .vimrc\n:PluginInstall\n```\n\n## 6 代码自动补全 YouCompleteMe 安装\n\n```brew\nbrew install cmake\n```\n\n方法一 使用 Vundle 安装\n\n然后在 `/.vimrc`文件中加入\n\n```vim\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py'}\n\n// Go support\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py --go-completer'}\n// 全部安装\nPlugin 'Valloric/YouCompleteMe',{'do':'python3 install.py --all'}\n```\n\n然后执行`:PluginInstall`，自动安装\n\n**注**： `https://www.jianshu.com/p/edc4bbed92ca`\n\n方法二\n下载 ycm 源码包\n\n```git\ngit clone https://github.com/Valloric/YouCompleteMe.git\n\n// YouCompleteMe/目录下执行命令\ncd YouCompleteMe\npython install.py\n```\n","slug":"vim/Vim配置及插件安装(Mac)","published":1,"updated":"2021-06-22T07:14:19.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zt002fj0361qyfh9c8","content":"<blockquote>\n<p>VIM（Unix及类Unix系统文本编辑器）</p>\n</blockquote>\n<p><code>Vim</code>是一个类似于<code>Vi</code>的著名的功能强大、高度可定制的文本编辑器 ，在<code>Vi</code>的基础上改进和增加了很多特性。 <code>VIM</code>是自由软件</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-macOS（Linux）包管理器-Homebrew\"><a href=\"#1-macOS（Linux）包管理器-Homebrew\" class=\"headerlink\" title=\"1 macOS（Linux）包管理器 Homebrew\"></a>1 macOS（Linux）包管理器 <code>Homebrew</code></h2><p>安装命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装-vim\"><a href=\"#2-安装-vim\" class=\"headerlink\" title=\"2 安装 vim\"></a>2 安装 vim</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-建立并编辑配置文件\"><a href=\"#3-建立并编辑配置文件\" class=\"headerlink\" title=\"3 建立并编辑配置文件\"></a>3 建立并编辑配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">touch .vimrc</span><br><span class=\"line\">vim .vimrc</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件为：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot; 输入:make编译并运行</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> makeprg=clear;gcc\\ %\\ &amp;&amp;\\ ./<span class=\"keyword\">a</span>.out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 当前行高亮</span></span><br><span class=\"line\"><span class=\"keyword\">au</span> WinLeave * <span class=\"keyword\">set</span> nocursorline nocursorcolumn</span><br><span class=\"line\"><span class=\"keyword\">au</span> WinEnter * <span class=\"keyword\">set</span> cursorline</span><br><span class=\"line\"><span class=\"keyword\">set</span> cursorline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">colorscheme</span> default       <span class=\"comment\">&quot; 颜色主题</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable             <span class=\"comment\">&quot; 启用语法分析着色</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">4</span>             <span class=\"comment\">&quot; 设定Tab表示的空格数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> softtabstop=<span class=\"number\">4</span>         <span class=\"comment\">&quot; 设定输入Tab表示的空格数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab             <span class=\"comment\">&quot; 将Tab视为若干空格</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> backspace=<span class=\"number\">2</span>           <span class=\"comment\">&quot; 设置退格键可用</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span>                <span class=\"comment\">&quot; 显示行号</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> showcmd               <span class=\"comment\">&quot; 右下角显示待补全命令</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hlsearch              <span class=\"comment\">&quot; 搜索字符串时高亮所有结果,:nohlsearch取消高亮</span></span><br></pre></td></tr></table></figure>\n\n<p><code>:wq</code> 保存退出</p>\n<h2 id=\"4-安装-Vundle（Vim-插件管理器）\"><a href=\"#4-安装-Vundle（Vim-插件管理器）\" class=\"headerlink\" title=\"4 安装 Vundle（Vim 插件管理器）\"></a>4 安装 Vundle（Vim 插件管理器）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br><span class=\"line\"></span><br><span class=\"line\">// 编辑文件</span><br><span class=\"line\">vim .vimrc</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件开头添加如下配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot;---START OF VUNDLE---</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> nocompatible</span><br><span class=\"line\"><span class=\"keyword\">filetype</span> off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> rtp+=~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> vundle#begin()</span><br><span class=\"line\">Plugin <span class=\"string\">&#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">&quot; Plugins start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; Plugins end</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> vundle#end()</span><br><span class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></span><br><span class=\"line\"><span class=\"comment\">&quot; ---END OF VUNDLE---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Vundle-安装插件\"><a href=\"#5-Vundle-安装插件\" class=\"headerlink\" title=\"5 Vundle 安装插件\"></a>5 Vundle 安装插件</h2><p>在配置文件 “Plugins start 和 end 注释之间加入：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin <span class=\"string\">&#x27;[插件名]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">:<span class=\"keyword\">wq</span></span><br><span class=\"line\"><span class=\"keyword\">vim</span> .vimrc</span><br><span class=\"line\">:PluginInstall</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-代码自动补全-YouCompleteMe-安装\"><a href=\"#6-代码自动补全-YouCompleteMe-安装\" class=\"headerlink\" title=\"6 代码自动补全 YouCompleteMe 安装\"></a>6 代码自动补全 YouCompleteMe 安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install cmake</span><br></pre></td></tr></table></figure>\n\n<p>方法一 使用 Vundle 安装</p>\n<p>然后在 <code>/.vimrc</code>文件中加入</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin <span class=\"string\">&#x27;Valloric/YouCompleteMe&#x27;</span>,&#123;<span class=\"string\">&#x27;do&#x27;</span>:<span class=\"string\">&#x27;python3 install.py&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Go support</span><br><span class=\"line\">Plugin <span class=\"string\">&#x27;Valloric/YouCompleteMe&#x27;</span>,&#123;<span class=\"string\">&#x27;do&#x27;</span>:<span class=\"string\">&#x27;python3 install.py --go-completer&#x27;</span>&#125;</span><br><span class=\"line\">// 全部安装</span><br><span class=\"line\">Plugin <span class=\"string\">&#x27;Valloric/YouCompleteMe&#x27;</span>,&#123;<span class=\"string\">&#x27;do&#x27;</span>:<span class=\"string\">&#x27;python3 install.py --all&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>:PluginInstall</code>，自动安装</p>\n<p><strong>注</strong>： <code>https://www.jianshu.com/p/edc4bbed92ca</code></p>\n<p>方法二<br>下载 ycm 源码包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Valloric/YouCompleteMe.git</span><br><span class=\"line\"></span><br><span class=\"line\">// YouCompleteMe/目录下执行命令</span><br><span class=\"line\">cd YouCompleteMe</span><br><span class=\"line\">python install.py</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>VIM（Unix及类Unix系统文本编辑器）</p>\n</blockquote>\n<p><code>Vim</code>是一个类似于<code>Vi</code>的著名的功能强大、高度可定制的文本编辑器 ，在<code>Vi</code>的基础上改进和增加了很多特性。 <code>VIM</code>是自由软件</p>","more":"<h2 id=\"1-macOS（Linux）包管理器-Homebrew\"><a href=\"#1-macOS（Linux）包管理器-Homebrew\" class=\"headerlink\" title=\"1 macOS（Linux）包管理器 Homebrew\"></a>1 macOS（Linux）包管理器 <code>Homebrew</code></h2><p>安装命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装-vim\"><a href=\"#2-安装-vim\" class=\"headerlink\" title=\"2 安装 vim\"></a>2 安装 vim</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-建立并编辑配置文件\"><a href=\"#3-建立并编辑配置文件\" class=\"headerlink\" title=\"3 建立并编辑配置文件\"></a>3 建立并编辑配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">touch .vimrc</span><br><span class=\"line\">vim .vimrc</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置文件为：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot; 输入:make编译并运行</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> makeprg=clear;gcc\\ %\\ &amp;&amp;\\ ./<span class=\"keyword\">a</span>.out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 当前行高亮</span></span><br><span class=\"line\"><span class=\"keyword\">au</span> WinLeave * <span class=\"keyword\">set</span> nocursorline nocursorcolumn</span><br><span class=\"line\"><span class=\"keyword\">au</span> WinEnter * <span class=\"keyword\">set</span> cursorline</span><br><span class=\"line\"><span class=\"keyword\">set</span> cursorline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">colorscheme</span> default       <span class=\"comment\">&quot; 颜色主题</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable             <span class=\"comment\">&quot; 启用语法分析着色</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">4</span>             <span class=\"comment\">&quot; 设定Tab表示的空格数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> softtabstop=<span class=\"number\">4</span>         <span class=\"comment\">&quot; 设定输入Tab表示的空格数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab             <span class=\"comment\">&quot; 将Tab视为若干空格</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> backspace=<span class=\"number\">2</span>           <span class=\"comment\">&quot; 设置退格键可用</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span>                <span class=\"comment\">&quot; 显示行号</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> showcmd               <span class=\"comment\">&quot; 右下角显示待补全命令</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hlsearch              <span class=\"comment\">&quot; 搜索字符串时高亮所有结果,:nohlsearch取消高亮</span></span><br></pre></td></tr></table></figure>\n\n<p><code>:wq</code> 保存退出</p>\n<h2 id=\"4-安装-Vundle（Vim-插件管理器）\"><a href=\"#4-安装-Vundle（Vim-插件管理器）\" class=\"headerlink\" title=\"4 安装 Vundle（Vim 插件管理器）\"></a>4 安装 Vundle（Vim 插件管理器）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br><span class=\"line\"></span><br><span class=\"line\">// 编辑文件</span><br><span class=\"line\">vim .vimrc</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件开头添加如下配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot;---START OF VUNDLE---</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> nocompatible</span><br><span class=\"line\"><span class=\"keyword\">filetype</span> off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> rtp+=~/.<span class=\"keyword\">vim</span>/bundle/Vundle.<span class=\"keyword\">vim</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> vundle#begin()</span><br><span class=\"line\">Plugin <span class=\"string\">&#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">&quot; Plugins start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; Plugins end</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> vundle#end()</span><br><span class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></span><br><span class=\"line\"><span class=\"comment\">&quot; ---END OF VUNDLE---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Vundle-安装插件\"><a href=\"#5-Vundle-安装插件\" class=\"headerlink\" title=\"5 Vundle 安装插件\"></a>5 Vundle 安装插件</h2><p>在配置文件 “Plugins start 和 end 注释之间加入：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin <span class=\"string\">&#x27;[插件名]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">:<span class=\"keyword\">wq</span></span><br><span class=\"line\"><span class=\"keyword\">vim</span> .vimrc</span><br><span class=\"line\">:PluginInstall</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-代码自动补全-YouCompleteMe-安装\"><a href=\"#6-代码自动补全-YouCompleteMe-安装\" class=\"headerlink\" title=\"6 代码自动补全 YouCompleteMe 安装\"></a>6 代码自动补全 YouCompleteMe 安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install cmake</span><br></pre></td></tr></table></figure>\n\n<p>方法一 使用 Vundle 安装</p>\n<p>然后在 <code>/.vimrc</code>文件中加入</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plugin <span class=\"string\">&#x27;Valloric/YouCompleteMe&#x27;</span>,&#123;<span class=\"string\">&#x27;do&#x27;</span>:<span class=\"string\">&#x27;python3 install.py&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Go support</span><br><span class=\"line\">Plugin <span class=\"string\">&#x27;Valloric/YouCompleteMe&#x27;</span>,&#123;<span class=\"string\">&#x27;do&#x27;</span>:<span class=\"string\">&#x27;python3 install.py --go-completer&#x27;</span>&#125;</span><br><span class=\"line\">// 全部安装</span><br><span class=\"line\">Plugin <span class=\"string\">&#x27;Valloric/YouCompleteMe&#x27;</span>,&#123;<span class=\"string\">&#x27;do&#x27;</span>:<span class=\"string\">&#x27;python3 install.py --all&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>:PluginInstall</code>，自动安装</p>\n<p><strong>注</strong>： <code>https://www.jianshu.com/p/edc4bbed92ca</code></p>\n<p>方法二<br>下载 ycm 源码包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Valloric/YouCompleteMe.git</span><br><span class=\"line\"></span><br><span class=\"line\">// YouCompleteMe/目录下执行命令</span><br><span class=\"line\">cd YouCompleteMe</span><br><span class=\"line\">python install.py</span><br></pre></td></tr></table></figure>"},{"title":"Laravel基础学习","date":"2020-03-09T09:59:11.000Z","_content":"\n> Laravel（PHP开发框架）\n\n`Laravel`是一套简洁、优雅的PHP Web开发框架(`PHP Web Framework`)。它可以让你从面条一样杂乱的代码中解脱出来；它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力\n\n<!-- more -->\n\n```php\n// 1.创建模型\nphp artisan make:model Categories\n// 创建模型并生成迁移\nphp artisan make:model Categories -m\n\n// 2.生成迁移\nphp artisan make:migration create_categories_table\n\n// 3.运行数据库迁移\nphp artisan migrate\n\n// admin\n// 4.创建一个对应模型的路由器\nphp artisan admin:make CategoryController --model=App\\\\Category\n\n// 5.将以下路由添加到 app/Admin/routes.php:\n$router->resource('categories', CategoryController::class);\n\n```\n\n## 1、Eloquent ORM\n\n> 提供一个漂亮、简洁的 ActiveRecord 实现来和数据库交互\n\n### 创建Eloquent 模型\n\n所有的 `Eloquent` 模型都继承至 `Illuminate\\Database\\Eloquent\\Model` 类，创建的模型类默认在app目录下，可指定到app目录下的Models目录下，\n\n```php\n// app/Flight\nphp artisan make:model Flight\n\n// app/Models/Flight\nphp artisan make:model Models/Flight\n```\n\n如果要在生成模型的时候生成 数据库迁移 ，可以使用 `--migration` 或 `-m` 选项：\n\n```php\nphp artisan make:model Flight --migration\n\nphp artisan make:model Flight -m\n```\n\n### 数据表\n\n```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    // 数据库连接 模型指定一个不同的连接\n    protected $connection = 'connection-name';\n\n    // 与模型关联的表名，默认：flights\n    protected $table = 'my_flights';\n\n    // 主键，默认：id\n    protected $primaryKey = 'flight_id';\n\n    // 指示模型主键是否递增，默认：一个自增的整数值\n    public $incrementing = false;\n\n    // 自动递增ID的“类型”\n    protected $keyType = 'string';\n\n    // 指示是否自动维护时间戳， created_at 和 updated_at\n    public $timestamps = false;\n\n    // 自定义时间戳的格式\n    protected $dateFormat = 'U';\n\n    // 自定义存储时间戳的字段名\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n\n    // 可以被批量赋值的属性\n    protected $fillable = ['name', 'url'];\n    // 不可批量赋值的属性\n    protected $guarded = ['price'];\n\n    // 默认属性值\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n### 模型检索(Eloquent 模型 查询构造器 )\n\n```php\n<?php\n\n// 所有数据\n$flights = App\\Flight::all();\n\nforeach ($flights as $flight) {\n    echo $flight->name;\n}\n\n// 附加约束\n$flights = App\\Flight::where('active', 1)\n               ->orderBy('name', 'desc')\n               ->take(10)\n               ->get();\n\n// 重新加载模型\n// fresh 和 refresh 方法重新加载模型\n// fresh现有的模型实例不受影响\n$flight = App\\Flight::where('number', 'FR 900')->first();\n$freshFlight = $flight->fresh();\n\n// refresh新数据重新赋值现有模型\n$flight = App\\Flight::where('number', 'FR 900')->first();\n$flight->number = 'FR 456';\n$flight->refresh();\n$flight->number; // \"FR 900\"\n\n```\n\n一些问题\n\n[laravel 图片上传与前端显示问题](https://www.cnblogs.com/linqingvoe/p/11253859.html)\n\n执行命令：\n\n```php\nphp artisan storage:link\n```\n","source":"_posts/php/laraval/Laravel基础学习.md","raw":"---\ntitle: Laravel基础学习\ndate: 2020-03-09 17:59:11\ntags: [PHP, Laravel]\ncategories: PHP\n---\n\n> Laravel（PHP开发框架）\n\n`Laravel`是一套简洁、优雅的PHP Web开发框架(`PHP Web Framework`)。它可以让你从面条一样杂乱的代码中解脱出来；它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力\n\n<!-- more -->\n\n```php\n// 1.创建模型\nphp artisan make:model Categories\n// 创建模型并生成迁移\nphp artisan make:model Categories -m\n\n// 2.生成迁移\nphp artisan make:migration create_categories_table\n\n// 3.运行数据库迁移\nphp artisan migrate\n\n// admin\n// 4.创建一个对应模型的路由器\nphp artisan admin:make CategoryController --model=App\\\\Category\n\n// 5.将以下路由添加到 app/Admin/routes.php:\n$router->resource('categories', CategoryController::class);\n\n```\n\n## 1、Eloquent ORM\n\n> 提供一个漂亮、简洁的 ActiveRecord 实现来和数据库交互\n\n### 创建Eloquent 模型\n\n所有的 `Eloquent` 模型都继承至 `Illuminate\\Database\\Eloquent\\Model` 类，创建的模型类默认在app目录下，可指定到app目录下的Models目录下，\n\n```php\n// app/Flight\nphp artisan make:model Flight\n\n// app/Models/Flight\nphp artisan make:model Models/Flight\n```\n\n如果要在生成模型的时候生成 数据库迁移 ，可以使用 `--migration` 或 `-m` 选项：\n\n```php\nphp artisan make:model Flight --migration\n\nphp artisan make:model Flight -m\n```\n\n### 数据表\n\n```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    // 数据库连接 模型指定一个不同的连接\n    protected $connection = 'connection-name';\n\n    // 与模型关联的表名，默认：flights\n    protected $table = 'my_flights';\n\n    // 主键，默认：id\n    protected $primaryKey = 'flight_id';\n\n    // 指示模型主键是否递增，默认：一个自增的整数值\n    public $incrementing = false;\n\n    // 自动递增ID的“类型”\n    protected $keyType = 'string';\n\n    // 指示是否自动维护时间戳， created_at 和 updated_at\n    public $timestamps = false;\n\n    // 自定义时间戳的格式\n    protected $dateFormat = 'U';\n\n    // 自定义存储时间戳的字段名\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n\n    // 可以被批量赋值的属性\n    protected $fillable = ['name', 'url'];\n    // 不可批量赋值的属性\n    protected $guarded = ['price'];\n\n    // 默认属性值\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n### 模型检索(Eloquent 模型 查询构造器 )\n\n```php\n<?php\n\n// 所有数据\n$flights = App\\Flight::all();\n\nforeach ($flights as $flight) {\n    echo $flight->name;\n}\n\n// 附加约束\n$flights = App\\Flight::where('active', 1)\n               ->orderBy('name', 'desc')\n               ->take(10)\n               ->get();\n\n// 重新加载模型\n// fresh 和 refresh 方法重新加载模型\n// fresh现有的模型实例不受影响\n$flight = App\\Flight::where('number', 'FR 900')->first();\n$freshFlight = $flight->fresh();\n\n// refresh新数据重新赋值现有模型\n$flight = App\\Flight::where('number', 'FR 900')->first();\n$flight->number = 'FR 456';\n$flight->refresh();\n$flight->number; // \"FR 900\"\n\n```\n\n一些问题\n\n[laravel 图片上传与前端显示问题](https://www.cnblogs.com/linqingvoe/p/11253859.html)\n\n执行命令：\n\n```php\nphp artisan storage:link\n```\n","slug":"php/laraval/Laravel基础学习","published":1,"updated":"2021-06-22T07:14:19.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zu002ij036dsj54mxm","content":"<blockquote>\n<p>Laravel（PHP开发框架）</p>\n</blockquote>\n<p><code>Laravel</code>是一套简洁、优雅的PHP Web开发框架(<code>PHP Web Framework</code>)。它可以让你从面条一样杂乱的代码中解脱出来；它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建模型</span></span><br><span class=\"line\">php artisan make:model Categories</span><br><span class=\"line\"><span class=\"comment\">// 创建模型并生成迁移</span></span><br><span class=\"line\">php artisan make:model Categories -m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.生成迁移</span></span><br><span class=\"line\">php artisan make:migration create_categories_table</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.运行数据库迁移</span></span><br><span class=\"line\">php artisan migrate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// admin</span></span><br><span class=\"line\"><span class=\"comment\">// 4.创建一个对应模型的路由器</span></span><br><span class=\"line\">php artisan admin:make CategoryController --model=App\\\\Category</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.将以下路由添加到 app/Admin/routes.php:</span></span><br><span class=\"line\"><span class=\"variable\">$router</span>-&gt;resource(<span class=\"string\">&#x27;categories&#x27;</span>, CategoryController::class);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1、Eloquent-ORM\"><a href=\"#1、Eloquent-ORM\" class=\"headerlink\" title=\"1、Eloquent ORM\"></a>1、Eloquent ORM</h2><blockquote>\n<p>提供一个漂亮、简洁的 ActiveRecord 实现来和数据库交互</p>\n</blockquote>\n<h3 id=\"创建Eloquent-模型\"><a href=\"#创建Eloquent-模型\" class=\"headerlink\" title=\"创建Eloquent 模型\"></a>创建Eloquent 模型</h3><p>所有的 <code>Eloquent</code> 模型都继承至 <code>Illuminate\\Database\\Eloquent\\Model</code> 类，创建的模型类默认在app目录下，可指定到app目录下的Models目录下，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/Flight</span></span><br><span class=\"line\">php artisan make:model Flight</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app/Models/Flight</span></span><br><span class=\"line\">php artisan make:model Models/Flight</span><br></pre></td></tr></table></figure>\n\n<p>如果要在生成模型的时候生成 数据库迁移 ，可以使用 <code>--migration</code> 或 <code>-m</code> 选项：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:model Flight --migration</span><br><span class=\"line\"></span><br><span class=\"line\">php artisan make:model Flight -m</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据表\"><a href=\"#数据表\" class=\"headerlink\" title=\"数据表\"></a>数据表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Eloquent</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据库连接 模型指定一个不同的连接</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$connection</span> = <span class=\"string\">&#x27;connection-name&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 与模型关联的表名，默认：flights</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$table</span> = <span class=\"string\">&#x27;my_flights&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主键，默认：id</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$primaryKey</span> = <span class=\"string\">&#x27;flight_id&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指示模型主键是否递增，默认：一个自增的整数值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$incrementing</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动递增ID的“类型”</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$keyType</span> = <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指示是否自动维护时间戳， created_at 和 updated_at</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$timestamps</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义时间戳的格式</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$dateFormat</span> = <span class=\"string\">&#x27;U&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义存储时间戳的字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> CREATED_AT = <span class=\"string\">&#x27;creation_date&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> UPDATED_AT = <span class=\"string\">&#x27;last_update&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可以被批量赋值的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$fillable</span> = [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;url&#x27;</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 不可批量赋值的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$guarded</span> = [<span class=\"string\">&#x27;price&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 默认属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$attributes</span> = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;delayed&#x27;</span> =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模型检索-Eloquent-模型-查询构造器\"><a href=\"#模型检索-Eloquent-模型-查询构造器\" class=\"headerlink\" title=\"模型检索(Eloquent 模型 查询构造器 )\"></a>模型检索(Eloquent 模型 查询构造器 )</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有数据</span></span><br><span class=\"line\"><span class=\"variable\">$flights</span> = App\\Flight::all();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$flights</span> <span class=\"keyword\">as</span> <span class=\"variable\">$flight</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$flight</span>-&gt;name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 附加约束</span></span><br><span class=\"line\"><span class=\"variable\">$flights</span> = App\\Flight::where(<span class=\"string\">&#x27;active&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">               -&gt;orderBy(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;desc&#x27;</span>)</span><br><span class=\"line\">               -&gt;take(<span class=\"number\">10</span>)</span><br><span class=\"line\">               -&gt;get();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重新加载模型</span></span><br><span class=\"line\"><span class=\"comment\">// fresh 和 refresh 方法重新加载模型</span></span><br><span class=\"line\"><span class=\"comment\">// fresh现有的模型实例不受影响</span></span><br><span class=\"line\"><span class=\"variable\">$flight</span> = App\\Flight::where(<span class=\"string\">&#x27;number&#x27;</span>, <span class=\"string\">&#x27;FR 900&#x27;</span>)-&gt;first();</span><br><span class=\"line\"><span class=\"variable\">$freshFlight</span> = <span class=\"variable\">$flight</span>-&gt;fresh();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// refresh新数据重新赋值现有模型</span></span><br><span class=\"line\"><span class=\"variable\">$flight</span> = App\\Flight::where(<span class=\"string\">&#x27;number&#x27;</span>, <span class=\"string\">&#x27;FR 900&#x27;</span>)-&gt;first();</span><br><span class=\"line\"><span class=\"variable\">$flight</span>-&gt;number = <span class=\"string\">&#x27;FR 456&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$flight</span>-&gt;refresh();</span><br><span class=\"line\"><span class=\"variable\">$flight</span>-&gt;number; <span class=\"comment\">// &quot;FR 900&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>一些问题</p>\n<p><a href=\"https://www.cnblogs.com/linqingvoe/p/11253859.html\">laravel 图片上传与前端显示问题</a></p>\n<p>执行命令：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan storage:link</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Laravel（PHP开发框架）</p>\n</blockquote>\n<p><code>Laravel</code>是一套简洁、优雅的PHP Web开发框架(<code>PHP Web Framework</code>)。它可以让你从面条一样杂乱的代码中解脱出来；它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力</p>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建模型</span></span><br><span class=\"line\">php artisan make:model Categories</span><br><span class=\"line\"><span class=\"comment\">// 创建模型并生成迁移</span></span><br><span class=\"line\">php artisan make:model Categories -m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.生成迁移</span></span><br><span class=\"line\">php artisan make:migration create_categories_table</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.运行数据库迁移</span></span><br><span class=\"line\">php artisan migrate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// admin</span></span><br><span class=\"line\"><span class=\"comment\">// 4.创建一个对应模型的路由器</span></span><br><span class=\"line\">php artisan admin:make CategoryController --model=App\\\\Category</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.将以下路由添加到 app/Admin/routes.php:</span></span><br><span class=\"line\"><span class=\"variable\">$router</span>-&gt;resource(<span class=\"string\">&#x27;categories&#x27;</span>, CategoryController::class);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1、Eloquent-ORM\"><a href=\"#1、Eloquent-ORM\" class=\"headerlink\" title=\"1、Eloquent ORM\"></a>1、Eloquent ORM</h2><blockquote>\n<p>提供一个漂亮、简洁的 ActiveRecord 实现来和数据库交互</p>\n</blockquote>\n<h3 id=\"创建Eloquent-模型\"><a href=\"#创建Eloquent-模型\" class=\"headerlink\" title=\"创建Eloquent 模型\"></a>创建Eloquent 模型</h3><p>所有的 <code>Eloquent</code> 模型都继承至 <code>Illuminate\\Database\\Eloquent\\Model</code> 类，创建的模型类默认在app目录下，可指定到app目录下的Models目录下，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/Flight</span></span><br><span class=\"line\">php artisan make:model Flight</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app/Models/Flight</span></span><br><span class=\"line\">php artisan make:model Models/Flight</span><br></pre></td></tr></table></figure>\n\n<p>如果要在生成模型的时候生成 数据库迁移 ，可以使用 <code>--migration</code> 或 <code>-m</code> 选项：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:model Flight --migration</span><br><span class=\"line\"></span><br><span class=\"line\">php artisan make:model Flight -m</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据表\"><a href=\"#数据表\" class=\"headerlink\" title=\"数据表\"></a>数据表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Eloquent</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据库连接 模型指定一个不同的连接</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$connection</span> = <span class=\"string\">&#x27;connection-name&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 与模型关联的表名，默认：flights</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$table</span> = <span class=\"string\">&#x27;my_flights&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主键，默认：id</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$primaryKey</span> = <span class=\"string\">&#x27;flight_id&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指示模型主键是否递增，默认：一个自增的整数值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$incrementing</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自动递增ID的“类型”</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$keyType</span> = <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指示是否自动维护时间戳， created_at 和 updated_at</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$timestamps</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义时间戳的格式</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$dateFormat</span> = <span class=\"string\">&#x27;U&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自定义存储时间戳的字段名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> CREATED_AT = <span class=\"string\">&#x27;creation_date&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> UPDATED_AT = <span class=\"string\">&#x27;last_update&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可以被批量赋值的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$fillable</span> = [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;url&#x27;</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 不可批量赋值的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$guarded</span> = [<span class=\"string\">&#x27;price&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 默认属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$attributes</span> = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;delayed&#x27;</span> =&gt; <span class=\"literal\">false</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模型检索-Eloquent-模型-查询构造器\"><a href=\"#模型检索-Eloquent-模型-查询构造器\" class=\"headerlink\" title=\"模型检索(Eloquent 模型 查询构造器 )\"></a>模型检索(Eloquent 模型 查询构造器 )</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有数据</span></span><br><span class=\"line\"><span class=\"variable\">$flights</span> = App\\Flight::all();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$flights</span> <span class=\"keyword\">as</span> <span class=\"variable\">$flight</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$flight</span>-&gt;name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 附加约束</span></span><br><span class=\"line\"><span class=\"variable\">$flights</span> = App\\Flight::where(<span class=\"string\">&#x27;active&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">               -&gt;orderBy(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;desc&#x27;</span>)</span><br><span class=\"line\">               -&gt;take(<span class=\"number\">10</span>)</span><br><span class=\"line\">               -&gt;get();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重新加载模型</span></span><br><span class=\"line\"><span class=\"comment\">// fresh 和 refresh 方法重新加载模型</span></span><br><span class=\"line\"><span class=\"comment\">// fresh现有的模型实例不受影响</span></span><br><span class=\"line\"><span class=\"variable\">$flight</span> = App\\Flight::where(<span class=\"string\">&#x27;number&#x27;</span>, <span class=\"string\">&#x27;FR 900&#x27;</span>)-&gt;first();</span><br><span class=\"line\"><span class=\"variable\">$freshFlight</span> = <span class=\"variable\">$flight</span>-&gt;fresh();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// refresh新数据重新赋值现有模型</span></span><br><span class=\"line\"><span class=\"variable\">$flight</span> = App\\Flight::where(<span class=\"string\">&#x27;number&#x27;</span>, <span class=\"string\">&#x27;FR 900&#x27;</span>)-&gt;first();</span><br><span class=\"line\"><span class=\"variable\">$flight</span>-&gt;number = <span class=\"string\">&#x27;FR 456&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$flight</span>-&gt;refresh();</span><br><span class=\"line\"><span class=\"variable\">$flight</span>-&gt;number; <span class=\"comment\">// &quot;FR 900&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>一些问题</p>\n<p><a href=\"https://www.cnblogs.com/linqingvoe/p/11253859.html\">laravel 图片上传与前端显示问题</a></p>\n<p>执行命令：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan storage:link</span><br></pre></td></tr></table></figure>"},{"title":"初学thinkphp5","date":"2020-03-23T09:28:39.000Z","_content":"\n> ThinkPHP（PHP开发框架）\n\n`ThinkPHP`是一个快速、兼容而且简单的轻量级国产PHP开发框架\n\n<!-- more -->\n\n## php环境的搭建\n\n使用`phpstudy`集成环境\n\n开发手册：<https://www.kancloud.cn/manual/thinkphp5/118003>\n\n入口为`public/index.php`\n\n如何需要隐藏`public/index.php`，则需要配置入口，有很多方法，才疏学浅，目测了一种方法\n\n* 使用`.htaccess`来实现URL重定向\n\n在根目录下创建文件`.htaccess`，`public`目录下删除`.htaccess`文件，`.htaccess`内容如下：\n\n```htaccess\n<IfModule mod_rewrite.c>\n  Options +FollowSymlinks -Multiviews\n  RewriteEngine On\n\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ public/index.php?/$1[QSA]\n</IfModule>\n```\n\n## 多模块\n\n命令行：<https://www.kancloud.cn/manual/thinkphp5/118021>\n\n默认的框架的根目录下面自带了一个`build.php`，用于自动生成的规则定义文件\n\n读取application下面的build.php作为自动生成的定义文件\n> php think build\n\n读取根目录下的build.php文件\n> php think build --config build.php\n\n* 快速生成模块\n\n> php think build --module admin\n\n* 快速生成控制器类\n\n生成index模块的Blog控制器类库文件\n> php think make:controller index/Blog  \nphp think make:controller index\\Blog --plain\n\n* 快速生成模型类\n\n生成index模块的Blog模型类库文件\n> php think make:model index/Blog\n","source":"_posts/php/thinkphp5/初学thinkphp5.md","raw":"---\ntitle: 初学thinkphp5\ndate: 2020-03-23 17:28:39\ntags: [PHP, ThinkPHP]\ncategories: PHP\n---\n\n> ThinkPHP（PHP开发框架）\n\n`ThinkPHP`是一个快速、兼容而且简单的轻量级国产PHP开发框架\n\n<!-- more -->\n\n## php环境的搭建\n\n使用`phpstudy`集成环境\n\n开发手册：<https://www.kancloud.cn/manual/thinkphp5/118003>\n\n入口为`public/index.php`\n\n如何需要隐藏`public/index.php`，则需要配置入口，有很多方法，才疏学浅，目测了一种方法\n\n* 使用`.htaccess`来实现URL重定向\n\n在根目录下创建文件`.htaccess`，`public`目录下删除`.htaccess`文件，`.htaccess`内容如下：\n\n```htaccess\n<IfModule mod_rewrite.c>\n  Options +FollowSymlinks -Multiviews\n  RewriteEngine On\n\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^(.*)$ public/index.php?/$1[QSA]\n</IfModule>\n```\n\n## 多模块\n\n命令行：<https://www.kancloud.cn/manual/thinkphp5/118021>\n\n默认的框架的根目录下面自带了一个`build.php`，用于自动生成的规则定义文件\n\n读取application下面的build.php作为自动生成的定义文件\n> php think build\n\n读取根目录下的build.php文件\n> php think build --config build.php\n\n* 快速生成模块\n\n> php think build --module admin\n\n* 快速生成控制器类\n\n生成index模块的Blog控制器类库文件\n> php think make:controller index/Blog  \nphp think make:controller index\\Blog --plain\n\n* 快速生成模型类\n\n生成index模块的Blog模型类库文件\n> php think make:model index/Blog\n","slug":"php/thinkphp5/初学thinkphp5","published":1,"updated":"2021-06-22T07:14:19.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljg0n3zv002kj0362pf2blc2","content":"<blockquote>\n<p>ThinkPHP（PHP开发框架）</p>\n</blockquote>\n<p><code>ThinkPHP</code>是一个快速、兼容而且简单的轻量级国产PHP开发框架</p>\n<span id=\"more\"></span>\n\n<h2 id=\"php环境的搭建\"><a href=\"#php环境的搭建\" class=\"headerlink\" title=\"php环境的搭建\"></a>php环境的搭建</h2><p>使用<code>phpstudy</code>集成环境</p>\n<p>开发手册：<a href=\"https://www.kancloud.cn/manual/thinkphp5/118003\">https://www.kancloud.cn/manual/thinkphp5/118003</a></p>\n<p>入口为<code>public/index.php</code></p>\n<p>如何需要隐藏<code>public/index.php</code>，则需要配置入口，有很多方法，才疏学浅，目测了一种方法</p>\n<ul>\n<li>使用<code>.htaccess</code>来实现URL重定向</li>\n</ul>\n<p>在根目录下创建文件<code>.htaccess</code>，<code>public</code>目录下删除<code>.htaccess</code>文件，<code>.htaccess</code>内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">  Options +FollowSymlinks -Multiviews</span><br><span class=\"line\">  RewriteEngine On</span><br><span class=\"line\"></span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">  RewriteRule ^(.*)$ public/index.php?/$1[QSA]</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多模块\"><a href=\"#多模块\" class=\"headerlink\" title=\"多模块\"></a>多模块</h2><p>命令行：<a href=\"https://www.kancloud.cn/manual/thinkphp5/118021\">https://www.kancloud.cn/manual/thinkphp5/118021</a></p>\n<p>默认的框架的根目录下面自带了一个<code>build.php</code>，用于自动生成的规则定义文件</p>\n<p>读取application下面的build.php作为自动生成的定义文件</p>\n<blockquote>\n<p>php think build</p>\n</blockquote>\n<p>读取根目录下的build.php文件</p>\n<blockquote>\n<p>php think build –config build.php</p>\n</blockquote>\n<ul>\n<li>快速生成模块</li>\n</ul>\n<blockquote>\n<p>php think build –module admin</p>\n</blockquote>\n<ul>\n<li>快速生成控制器类</li>\n</ul>\n<p>生成index模块的Blog控制器类库文件</p>\n<blockquote>\n<p>php think make:controller index/Blog<br>php think make:controller index\\Blog –plain</p>\n</blockquote>\n<ul>\n<li>快速生成模型类</li>\n</ul>\n<p>生成index模块的Blog模型类库文件</p>\n<blockquote>\n<p>php think make:model index/Blog</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>ThinkPHP（PHP开发框架）</p>\n</blockquote>\n<p><code>ThinkPHP</code>是一个快速、兼容而且简单的轻量级国产PHP开发框架</p>","more":"<h2 id=\"php环境的搭建\"><a href=\"#php环境的搭建\" class=\"headerlink\" title=\"php环境的搭建\"></a>php环境的搭建</h2><p>使用<code>phpstudy</code>集成环境</p>\n<p>开发手册：<a href=\"https://www.kancloud.cn/manual/thinkphp5/118003\">https://www.kancloud.cn/manual/thinkphp5/118003</a></p>\n<p>入口为<code>public/index.php</code></p>\n<p>如何需要隐藏<code>public/index.php</code>，则需要配置入口，有很多方法，才疏学浅，目测了一种方法</p>\n<ul>\n<li>使用<code>.htaccess</code>来实现URL重定向</li>\n</ul>\n<p>在根目录下创建文件<code>.htaccess</code>，<code>public</code>目录下删除<code>.htaccess</code>文件，<code>.htaccess</code>内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">  Options +FollowSymlinks -Multiviews</span><br><span class=\"line\">  RewriteEngine On</span><br><span class=\"line\"></span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">  RewriteRule ^(.*)$ public/index.php?/$1[QSA]</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多模块\"><a href=\"#多模块\" class=\"headerlink\" title=\"多模块\"></a>多模块</h2><p>命令行：<a href=\"https://www.kancloud.cn/manual/thinkphp5/118021\">https://www.kancloud.cn/manual/thinkphp5/118021</a></p>\n<p>默认的框架的根目录下面自带了一个<code>build.php</code>，用于自动生成的规则定义文件</p>\n<p>读取application下面的build.php作为自动生成的定义文件</p>\n<blockquote>\n<p>php think build</p>\n</blockquote>\n<p>读取根目录下的build.php文件</p>\n<blockquote>\n<p>php think build –config build.php</p>\n</blockquote>\n<ul>\n<li>快速生成模块</li>\n</ul>\n<blockquote>\n<p>php think build –module admin</p>\n</blockquote>\n<ul>\n<li>快速生成控制器类</li>\n</ul>\n<p>生成index模块的Blog控制器类库文件</p>\n<blockquote>\n<p>php think make:controller index/Blog<br>php think make:controller index\\Blog –plain</p>\n</blockquote>\n<ul>\n<li>快速生成模型类</li>\n</ul>\n<p>生成index模块的Blog模型类库文件</p>\n<blockquote>\n<p>php think make:model index/Blog</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cljg0n3z60006j036d6d92rvq","category_id":"cljg0n3z70008j03610q03e7o","_id":"cljg0n3zd000kj036d8ivherc"},{"post_id":"cljg0n3za000cj036hoju4df1","category_id":"cljg0n3zc000gj0361xaa6d1j","_id":"cljg0n3zg000tj036fu0y7y4f"},{"post_id":"cljg0n3za000ej0364xdwhds8","category_id":"cljg0n3zc000gj0361xaa6d1j","_id":"cljg0n3zi000yj036fbpl89vd"},{"post_id":"cljg0n3zc000jj036aw59ejr0","category_id":"cljg0n3zg000sj036gut30uke","_id":"cljg0n3zj0015j036c9m3gz7h"},{"post_id":"cljg0n3zi0011j036frwm2y54","category_id":"cljg0n3zg000sj036gut30uke","_id":"cljg0n3zl001cj0367046crum"},{"post_id":"cljg0n3zd000nj036agh7br11","category_id":"cljg0n3zi0010j036a1uva0gk","_id":"cljg0n3zm001gj036705df2en"},{"post_id":"cljg0n3ze000pj0361m3m05wf","category_id":"cljg0n3zg000sj036gut30uke","_id":"cljg0n3zm001kj0369q3v0ml5"},{"post_id":"cljg0n3zj0014j0360wrp4ex2","category_id":"cljg0n3zl001dj036efep9xe3","_id":"cljg0n3zo001sj03639g4eknk"},{"post_id":"cljg0n3zk001bj03653to4xic","category_id":"cljg0n3zn001mj0363fd49i93","_id":"cljg0n3zq001zj0361iym0m0y"},{"post_id":"cljg0n3zl001fj036d18panz7","category_id":"cljg0n3zo001uj036fqbj58uv","_id":"cljg0n3zr0026j03676kx9wxy"},{"post_id":"cljg0n3zm001jj036hwqub2hq","category_id":"cljg0n3zo001uj036fqbj58uv","_id":"cljg0n3zt002bj036hec981kx"},{"post_id":"cljg0n3zn001nj036gm1ahcr5","category_id":"cljg0n3zr0025j036b8uedd6n","_id":"cljg0n3zu002gj036cabeczsj"},{"post_id":"cljg0n3zn001qj036d5zdcn39","category_id":"cljg0n3zt002cj036fby2fwt2","_id":"cljg0n3zv002nj0362nph113m"},{"post_id":"cljg0n3zo001tj036bxue4fkq","category_id":"cljg0n3zt002cj036fby2fwt2","_id":"cljg0n3zw002rj0366btu54dm"},{"post_id":"cljg0n3zp001yj03691xv685u","category_id":"cljg0n3zv002mj0365sileix6","_id":"cljg0n3zw002vj03627kuavxy"},{"post_id":"cljg0n3zq0021j036abv0hp3a","category_id":"cljg0n3zw002sj036d8vs1cq7","_id":"cljg0n3zx0030j0365zje0w3y"},{"post_id":"cljg0n3zr0024j0362q4p5ej8","category_id":"cljg0n3zw002sj036d8vs1cq7","_id":"cljg0n3zy0032j036h1js4nh1"},{"post_id":"cljg0n3zr0027j036d2cs9ys5","category_id":"cljg0n3zx002zj036diri9bz5","_id":"cljg0n3zy0037j036a5a18nqg"},{"post_id":"cljg0n3zs002aj03635uhc980","category_id":"cljg0n3zx002zj036diri9bz5","_id":"cljg0n3zy003aj036fw114iyz"},{"post_id":"cljg0n3zt002dj036b0y63i20","category_id":"cljg0n3zy0036j036415f54iz","_id":"cljg0n3zz003ej036am0ocnbb"},{"post_id":"cljg0n3zt002fj0361qyfh9c8","category_id":"cljg0n3zz003bj0361pkz6jqa","_id":"cljg0n3zz003kj036bybnb7wd"},{"post_id":"cljg0n3zu002ij036dsj54mxm","category_id":"cljg0n3zw002sj036d8vs1cq7","_id":"cljg0n400003nj03633pr6i7w"},{"post_id":"cljg0n3zv002kj0362pf2blc2","category_id":"cljg0n3zw002sj036d8vs1cq7","_id":"cljg0n400003qj0368u5i08z0"}],"PostTag":[{"post_id":"cljg0n3z70007j0363uu0dyll","tag_id":"cljg0n3z50005j03616pr3vo7","_id":"cljg0n3za000bj0369am57znc"},{"post_id":"cljg0n3z30003j036962vcvgy","tag_id":"cljg0n3z50005j03616pr3vo7","_id":"cljg0n3za000dj036efhuep8s"},{"post_id":"cljg0n3z40004j036a2o9cd8b","tag_id":"cljg0n3z50005j03616pr3vo7","_id":"cljg0n3zc000hj036cw258ajs"},{"post_id":"cljg0n3z60006j036d6d92rvq","tag_id":"cljg0n3z50005j03616pr3vo7","_id":"cljg0n3zd000mj0365vwm75m9"},{"post_id":"cljg0n3za000cj036hoju4df1","tag_id":"cljg0n3zd000lj03682n615e1","_id":"cljg0n3zg000uj0366u1vcmtr"},{"post_id":"cljg0n3za000ej0364xdwhds8","tag_id":"cljg0n3zd000lj03682n615e1","_id":"cljg0n3zi000zj03682eh10uv"},{"post_id":"cljg0n3zh000xj0361xt025nx","tag_id":"cljg0n3zh000wj036b4k24ekf","_id":"cljg0n3zj0013j0363morfhy3"},{"post_id":"cljg0n3zc000ij036bfsu827h","tag_id":"cljg0n3zh000wj036b4k24ekf","_id":"cljg0n3zj0017j0363sq1hzwb"},{"post_id":"cljg0n3zi0011j036frwm2y54","tag_id":"cljg0n3zh000wj036b4k24ekf","_id":"cljg0n3zk0019j036fozsfes7"},{"post_id":"cljg0n3zj0014j0360wrp4ex2","tag_id":"cljg0n3zh000wj036b4k24ekf","_id":"cljg0n3zl001ej03665r3405a"},{"post_id":"cljg0n3zc000jj036aw59ejr0","tag_id":"cljg0n3zi0012j036g9pq1r54","_id":"cljg0n3zm001hj0364c90hh6r"},{"post_id":"cljg0n3zk0018j036d9afbo7k","tag_id":"cljg0n3zh000wj036b4k24ekf","_id":"cljg0n3zn001lj036bykrdb6z"},{"post_id":"cljg0n3ze000pj0361m3m05wf","tag_id":"cljg0n3zi0012j036g9pq1r54","_id":"cljg0n3zn001oj036hczphg43"},{"post_id":"cljg0n3zf000rj0365tlocfj9","tag_id":"cljg0n3zh000wj036b4k24ekf","_id":"cljg0n3zo001rj0367kf0dt52"},{"post_id":"cljg0n3zh000vj0368etw3xsw","tag_id":"cljg0n3zh000wj036b4k24ekf","_id":"cljg0n3zp001xj036gip4d89z"},{"post_id":"cljg0n3zl001fj036d18panz7","tag_id":"cljg0n3zp001vj03635fo4p2s","_id":"cljg0n3zr0023j0364kh884sg"},{"post_id":"cljg0n3zm001jj036hwqub2hq","tag_id":"cljg0n3zp001vj03635fo4p2s","_id":"cljg0n3zs0029j036ailn10iw"},{"post_id":"cljg0n3zn001nj036gm1ahcr5","tag_id":"cljg0n3zs0028j0361swj7gyf","_id":"cljg0n3zv002lj0364yi1gz3h"},{"post_id":"cljg0n3zn001nj036gm1ahcr5","tag_id":"cljg0n3zt002ej036c4ct46vo","_id":"cljg0n3zw002oj0369ptdbfhf"},{"post_id":"cljg0n3zn001qj036d5zdcn39","tag_id":"cljg0n3zs0028j0361swj7gyf","_id":"cljg0n3zw002qj036bl8z6492"},{"post_id":"cljg0n3zo001tj036bxue4fkq","tag_id":"cljg0n3zs0028j0361swj7gyf","_id":"cljg0n3zw002uj0367obm45v6"},{"post_id":"cljg0n3zp001yj03691xv685u","tag_id":"cljg0n3zw002tj036bebj0quu","_id":"cljg0n3zx002yj036alse3tcg"},{"post_id":"cljg0n3zq0021j036abv0hp3a","tag_id":"cljg0n3zx002xj0367ekia9fz","_id":"cljg0n3zy0035j036gsitab49"},{"post_id":"cljg0n3zq0021j036abv0hp3a","tag_id":"cljg0n3zx0031j03616lf9a2x","_id":"cljg0n3zy0038j03663uhctgu"},{"post_id":"cljg0n3zr0024j0362q4p5ej8","tag_id":"cljg0n3zx002xj0367ekia9fz","_id":"cljg0n3zz003dj036d4yz3zwc"},{"post_id":"cljg0n3zr0024j0362q4p5ej8","tag_id":"cljg0n3zy0039j036d51a0z6z","_id":"cljg0n3zz003gj0362ni74loq"},{"post_id":"cljg0n3zr0027j036d2cs9ys5","tag_id":"cljg0n3zz003cj0365aojgq95","_id":"cljg0n3zz003ij036exmf88qb"},{"post_id":"cljg0n3zs002aj03635uhc980","tag_id":"cljg0n3zz003cj0365aojgq95","_id":"cljg0n400003mj036go415uk3"},{"post_id":"cljg0n3zt002dj036b0y63i20","tag_id":"cljg0n400003lj036gojkhvn3","_id":"cljg0n400003pj0364ijx0icf"},{"post_id":"cljg0n3zt002fj0361qyfh9c8","tag_id":"cljg0n3zd000lj03682n615e1","_id":"cljg0n400003sj0361cwhbolc"},{"post_id":"cljg0n3zt002fj0361qyfh9c8","tag_id":"cljg0n400003oj0360luvau4j","_id":"cljg0n400003tj0365zhu8jye"},{"post_id":"cljg0n3zu002ij036dsj54mxm","tag_id":"cljg0n3zx002xj0367ekia9fz","_id":"cljg0n401003wj036dayu4v3v"},{"post_id":"cljg0n3zu002ij036dsj54mxm","tag_id":"cljg0n401003uj036g4o09xse","_id":"cljg0n401003xj036es4m5s65"},{"post_id":"cljg0n3zv002kj0362pf2blc2","tag_id":"cljg0n3zx002xj0367ekia9fz","_id":"cljg0n401003zj0369zad6xau"},{"post_id":"cljg0n3zv002kj0362pf2blc2","tag_id":"cljg0n401003yj0361ix4hllp","_id":"cljg0n4010040j036gid151g9"}],"Tag":[{"name":"Android","_id":"cljg0n3z50005j03616pr3vo7"},{"name":"Mac","_id":"cljg0n3zd000lj03682n615e1"},{"name":"iOS","_id":"cljg0n3zh000wj036b4k24ekf"},{"name":"OC","_id":"cljg0n3zi0012j036g9pq1r54"},{"name":"Linux","_id":"cljg0n3zp001vj03635fo4p2s"},{"name":"JS","_id":"cljg0n3zs0028j0361swj7gyf"},{"name":"Node","_id":"cljg0n3zt002ej036c4ct46vo"},{"name":"GitHub","_id":"cljg0n3zw002tj036bebj0quu"},{"name":"PHP","_id":"cljg0n3zx002xj0367ekia9fz"},{"name":"Composer","_id":"cljg0n3zx0031j03616lf9a2x"},{"name":"Apache","_id":"cljg0n3zy0039j036d51a0z6z"},{"name":"Git","_id":"cljg0n3zz003cj0365aojgq95"},{"name":"Python CentOS6","_id":"cljg0n400003lj036gojkhvn3"},{"name":"Vim","_id":"cljg0n400003oj0360luvau4j"},{"name":"Laravel","_id":"cljg0n401003uj036g4o09xse"},{"name":"ThinkPHP","_id":"cljg0n401003yj0361ix4hllp"}]}}